{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n// tslint:disable: no-typeof-undefined\nimport { ApolloClient, InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-boost';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from 'apollo-link-error';\nimport { createHttpLink } from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch';\nimport getConfig from 'next/config';\nimport { handleGraphQLError, handleNetworkError } from './handleError';\n\nvar _getConfig = getConfig(),\n    publicRuntimeConfig = _getConfig.publicRuntimeConfig;\n\nvar isBrowser = typeof window !== 'undefined';\nvar apolloClient = null;\n\nfunction create(initialState, _ref) {\n  var getCookie = _ref.getCookie;\n  var httpLink = createHttpLink({\n    credentials: 'include',\n    fetch: fetch,\n    uri: publicRuntimeConfig.serverUrl\n  }); // 使用 apollo-link-error 进行错误处理\n\n  var errorLink = onError(function (data) {\n    var graphQLErrors = data.graphQLErrors,\n        networkError = data.networkError;\n\n    if (graphQLErrors && graphQLErrors.length) {\n      handleGraphQLError(graphQLErrors[0]);\n    }\n\n    if (networkError) {\n      handleNetworkError(networkError);\n    }\n  });\n  var authLink = setContext(function (_, _ref2) {\n    var headers = _ref2.headers;\n    var accessToken = localStorage.getItem('accessToken');\n    var departmentId = localStorage.getItem('departmentId');\n    return {\n      headers: _objectSpread({\n        Department: departmentId\n      }, headers, {\n        Authorization: accessToken,\n        accessToken: accessToken,\n        cookie: getCookie()\n      })\n    };\n  });\n\n  var createIntrospectionFactory = function createIntrospectionFactory(kind) {\n    return function (name, possibleTypes) {\n      return {\n        kind: kind,\n        name: name,\n        possibleTypes: possibleTypes.map(function (typename) {\n          return {\n            name: typename\n          };\n        })\n      };\n    };\n  };\n\n  var createInterface = createIntrospectionFactory('INTERFACE');\n  var fragmentMatcher = new IntrospectionFragmentMatcher({\n    introspectionQueryResultData: {\n      __schema: {\n        types: [createInterface('Content', ['ShortLink', 'NormalPage', 'WechatGroup'])]\n      }\n    }\n  });\n  var cache = new InMemoryCache({\n    fragmentMatcher: fragmentMatcher\n  }); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    cache: cache.restore(typeof window === 'undefined' ? initialState : window.__APOLLO_CLIENT__),\n    connectToDevTools: isBrowser,\n    link: authLink.concat(errorLink).concat(httpLink),\n    ssrMode: !isBrowser // Disables forceFetch on the server (so queries are only run once)\n\n  });\n}\n\nexport default function initApollo(initialState, options) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!isBrowser) {\n    return create(initialState, options);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}","map":null,"metadata":{},"sourceType":"module"}