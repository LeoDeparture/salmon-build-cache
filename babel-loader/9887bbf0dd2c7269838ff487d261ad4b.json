{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport copy from 'copy-to-clipboard';\nimport React from 'react';\nimport Loading from '../../../../components/Loading';\nimport RoleSelect from '../../../../components/Select/RoleSelect';\nimport TableFooter from '../../../../components/Table/TableFooter';\nimport TableOperation from '../../../../components/Table/TableOperation';\nimport AccountTable from '../components/AccountTable';\nimport { MutationDeleteAccount, MutationDisableAccount, MutationEnableAccount, MutationSendResetPasswordEmail, MutationSendVerifyEmail, MutationUpdateAccount, QueryGetVerificationLink } from './Mutations';\nimport ListAccounts, { QueryListAccounts } from './QueryListAccounts';\nvar ItemsPerPage = 20;\n\nvar AccountsContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AccountsContainer, _React$Component);\n\n  function AccountsContainer(props) {\n    var _this;\n\n    _classCallCheck(this, AccountsContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AccountsContainer).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"showModal\", function (account, action) {\n      if (!account || !action) return; // 保存选择的账号, 清空 id\n\n      _this.setState({\n        selectedRoleId: '',\n        selectedAccount: account\n      });\n\n      var title = '';\n      var content = null;\n      var okType;\n      var okText = '';\n      var onOk = null; // 启用或者更换 (需要选择角色的弹窗)\n\n      var enableOrChange = ['启用', '更换角色'].includes(action);\n\n      if (enableOrChange) {\n        var roles = _this.props.roles;\n        title = action === '启用' ? '启用账号' : '更换角色';\n        var defaultValue = action === '更换角色' && account.role ? account.role.id : undefined;\n        content = React.createElement(React.Fragment, null, React.createElement(\"p\", null, action === '启用' ? '选择一个正常状态角色后，方可启用此账号' : ''), React.createElement(RoleSelect, {\n          roles: roles,\n          style: {\n            width: 250\n          },\n          placeholder: \"\\u8BF7\\u9009\\u62E9\",\n          defaultValue: defaultValue,\n          notFoundContent: \"\\u672A\\u627E\\u5230\\u4EFB\\u4F55\\u6B63\\u5E38\\u72B6\\u6001\\u89D2\\u8272\",\n          onSelect: _this.onSelectRole\n        }));\n        okText = \"\\u786E\\u8BA4\".concat(action === '启用' ? '启用' : '更换');\n        onOk = _this.handleAccount.bind(_assertThisInitialized(_this), account.id, action);\n      }\n\n      if (action === '停用') {\n        title = '确认停用此账号吗？';\n        content = '停用后，此账号将无法使用。';\n        okText = '确认停用';\n        onOk = _this.handleAccount.bind(_assertThisInitialized(_this), account.id, action);\n      }\n\n      if (action === '删除') {\n        title = '确认要删除此账号吗？';\n        content = '此操作无法撤回，请谨慎操作。';\n        okText = '确认删除';\n        okType = 'danger';\n        onOk = _this.handleAccount.bind(_assertThisInitialized(_this), account.id, action);\n      }\n\n      if (action === '重置密码') {\n        title = '确认发送重置密码邮件吗？';\n        content = '确认发送后，系统会发送一封带有重置密码链接的邮件到此账号的邮箱中。';\n        okText = '确认发送';\n        onOk = _this.sendEmail.bind(_assertThisInitialized(_this), account.id, action);\n      }\n\n      if (action === '发送验证邮件') {\n        title = '确认发送验证邮件吗？';\n        content = '确认发送后，系统会重新发送一封带有验证链接的邮件到此账号的邮箱中。';\n        okText = '确认发送';\n        onOk = _this.sendEmail.bind(_assertThisInitialized(_this), account.id, action);\n      }\n\n      _this.modal = _Modal.confirm({\n        centered: true,\n        content: content,\n        icon: !enableOrChange && React.createElement(_Icon, {\n          type: \"question-circle\",\n          theme: \"filled\"\n        }),\n        okText: okText,\n        okType: okType,\n        onOk: onOk,\n        title: title,\n        okButtonProps: {\n          disabled: enableOrChange\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectRole\", function (selectedRoleId) {\n      _this.setState({\n        selectedRoleId: selectedRoleId\n      }); // 已选择角色, 更新弹窗的按钮状态为可用\n\n\n      _this.modal.update({\n        okButtonProps: {\n          disabled: !selectedRoleId\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"sendEmail\", function (id, action) {\n      var mutation;\n\n      if (action === '重置密码') {\n        mutation = MutationSendResetPasswordEmail;\n      }\n\n      if (action === '发送验证邮件') {\n        mutation = MutationSendVerifyEmail;\n      }\n\n      _this.client.mutate({\n        mutation: mutation,\n        variables: {\n          input: {\n            id: id\n          }\n        }\n      }).then(function (result) {\n        if (action === '重置密码' && result.data.status.success) {\n          _message.success('已成功发送重置密码邮件');\n        }\n\n        if (action === '发送验证邮件' && result.data.status.success) {\n          _this.getVerificationLink(id);\n        }\n      }).catch(function () {\n        _message.error('发送邮件失败');\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getVerificationLink\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(id) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.client.query({\n                  query: QueryGetVerificationLink,\n                  variables: {\n                    input: {\n                      id: id\n                    }\n                  },\n                  fetchPolicy: 'network-only'\n                }).then(function (result) {\n                  if (result.data && result.data.verificationLink) {\n                    var link = result.data.verificationLink.link;\n\n                    _Modal.confirm({\n                      cancelText: '拷贝验证链接',\n                      centered: true,\n                      content: '对方未收到邮件？试试手动发送验证链接',\n                      icon: React.createElement(_Icon, {\n                        type: \"check-circle\",\n                        theme: \"filled\"\n                      }),\n                      okText: '我知道了',\n                      onCancel: function onCancel() {\n                        copy(link);\n\n                        _Modal.success({\n                          title: '成功拷贝验证链接',\n                          content: '发送验证链接前，请确认对方身份，以免数据泄露。',\n                          okText: '我知道了'\n                        });\n                      },\n                      title: \"\\u6210\\u529F\\u53D1\\u9001\\u9A8C\\u8BC1\\u90AE\\u4EF6\"\n                    });\n                  }\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAccount\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(id, action) {\n        var mutation, variables, selectedRoleId;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                variables = {\n                  input: {\n                    id: id\n                  }\n                };\n\n                if (action === '停用') {\n                  mutation = MutationDisableAccount;\n                }\n\n                if (action === '删除') {\n                  mutation = MutationDeleteAccount;\n                }\n\n                if (['启用', '更换角色'].includes(action)) {\n                  mutation = action === '启用' ? MutationEnableAccount : MutationUpdateAccount;\n                  selectedRoleId = _this.state.selectedRoleId;\n\n                  _Object$assign(variables.input, {\n                    roleId: selectedRoleId\n                  });\n                }\n\n                return _context2.abrupt(\"return\", _this.client.mutate({\n                  mutation: mutation,\n                  variables: variables,\n                  refetchQueries: action === '删除' && [{\n                    query: QueryListAccounts,\n                    variables: _this.variables\n                  }]\n                }).then(function (result) {\n                  if (result) {\n                    _this.showMessage(action, true);\n                  }\n                }).catch(function () {\n                  _this.showMessage(action, false);\n                }));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2, _x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"showMessage\", function (action, successful) {\n      var isChangeRole = action === '更换角色';\n      successful ? _message.success(\"\\u5DF2\\u6210\\u529F\".concat(action).concat(isChangeRole ? '' : '此账户')) : _message.error(\"\".concat(action).concat(isChangeRole ? '' : '账户', \"\\u5931\\u8D25\"));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"queryMore\", function () {\n      var pageInfo = _this.state.pageInfo;\n\n      _this.fetchMore({\n        updateQuery: function updateQuery(prev, _ref3) {\n          var newData = _ref3.fetchMoreResult;\n\n          if (!newData) {\n            return prev;\n          }\n\n          var prevData = prev.accountRoles.edges;\n          var fetchResult = newData.accountRoles.edges;\n          newData.accountRoles.edges = [].concat(_toConsumableArray(prevData), _toConsumableArray(fetchResult));\n          return newData;\n        },\n        variables: {\n          input: {\n            after: pageInfo.endCursor,\n            first: ItemsPerPage,\n            where: _this.variables.input.where\n          }\n        }\n      }).then(function () {\n        // 记录翻页数据\n        _this.variables.input.first += ItemsPerPage;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"storePageInfo\", function (data) {\n      var pageInfo = data.accountRoles.pageInfo;\n\n      _this.setState({\n        pageInfo: pageInfo\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"menuRender\", function (actions, account) {\n      var operations = actions.map(function (action) {\n        return {\n          title: action,\n          color: action === '删除' ? 'red' : null,\n          onClick: ['停用', '启用', '删除', '重置密码', '发送验证邮件', '更换角色'].includes(action) && _this.showModal.bind(_assertThisInitialized(_this), account, action)\n        };\n      }).filter(function (v) {\n        return Boolean(v.title);\n      });\n      return React.createElement(TableOperation, {\n        operations: operations\n      });\n    });\n\n    _this.state = {\n      enableAccountId: '',\n      pageInfo: undefined,\n      roleSelect: '',\n      isShowEnableModal: false,\n      selectedAccount: null,\n      selectedRoleId: ''\n    };\n    _this.variables = {\n      input: {\n        first: ItemsPerPage,\n        where: {\n          isDeleted: false,\n          role: {\n            id: _this.props.roleId || undefined\n          }\n        }\n      }\n    };\n    return _this;\n  } // 修改筛选 id\n\n\n  _createClass(AccountsContainer, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.roleId !== prevProps.roleId) {\n        this.variables.input.where.role.id = this.props.roleId || undefined;\n        this.refetch(this.variables);\n      }\n    } // 显示弹窗\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var pageInfo = this.state.pageInfo;\n      return React.createElement(ListAccounts, {\n        query: QueryListAccounts,\n        variables: this.variables,\n        onCompleted: this.storePageInfo,\n        fetchPolicy: \"network-only\",\n        notifyOnNetworkStatusChange: true\n      }, function (_ref4) {\n        var data = _ref4.data,\n            refetch = _ref4.refetch,\n            loading = _ref4.loading,\n            error = _ref4.error,\n            client = _ref4.client,\n            fetchMore = _ref4.fetchMore,\n            networkStatus = _ref4.networkStatus;\n        _this2.refetch = refetch;\n        _this2.client = client;\n        _this2.fetchMore = fetchMore;\n\n        if (loading && ![3, 4].includes(networkStatus)) {\n          return React.createElement(Loading, null);\n        }\n\n        if (error) {\n          return null;\n        }\n\n        var accountRoles = data.accountRoles.edges.map(function (v) {\n          return _objectSpread({}, v.node, {\n            key: v.node.id\n          });\n        });\n\n        var footer = function footer() {\n          return pageInfo.hasNextPage && React.createElement(TableFooter, {\n            isLoading: networkStatus === 3,\n            onClickLink: _this2.queryMore\n          });\n        };\n\n        return React.createElement(React.Fragment, null, React.createElement(AccountTable, {\n          accountRoles: accountRoles,\n          footer: footer,\n          menuRender: _this2.menuRender\n        }));\n      });\n    }\n  }]);\n\n  return AccountsContainer;\n}(React.Component);\n\nexport { AccountsContainer as default };","map":null,"metadata":{},"sourceType":"module"}