{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport Loading from '../../../../components/Loading';\nimport { FlexContentCenter } from '../../../../lib/commonCss';\nimport { parseErrorCode } from '../../../../lib/commonJs';\nimport { utc2Asia, yyyymmdd } from '../../../../lib/date';\nimport { ChapterTable } from '../components/ChapterTable';\nimport { listChapters, ListChaptersQuery } from './ListChaptersQuery';\nimport { deleteChapterMutation, disableChapterMutation, enableChapterMutation } from './StatusMutation';\nimport { handleConfirmOtherError } from '../../../../lib/handleError';\nimport { handleCommonErr } from '../../commonErrFunc';\nimport { removeSectionMutation } from '../../section/containers/StatusMutation';\nimport { formatDict } from '../../subscriptionConstants';\n\nvar ListChaptersContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ListChaptersContainer, _React$Component);\n\n  function ListChaptersContainer(props) {\n    var _this;\n\n    _classCallCheck(this, ListChaptersContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListChaptersContainer).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"enableChapter\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(id) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.client.mutate({\n                  mutation: enableChapterMutation,\n                  refetchQueries: [{\n                    query: listChapters,\n                    variables: _this.variables\n                  }],\n                  variables: {\n                    input: {\n                      id: id\n                    }\n                  }\n                }).then(function (_) {\n                  _message.success('已成功上线此章节');\n                }).catch(function (err) {\n                  if (parseErrorCode(err) === 'NoSection') {\n                    _Modal.warning({\n                      icon: React.createElement(_Icon, {\n                        type: \"exclamation-circle\",\n                        style: {\n                          color: 'orange'\n                        },\n                        theme: \"filled\"\n                      }),\n                      content: '此章节下暂无小节，无法上线此章节。',\n                      okText: '我知道了',\n                      title: '无法上线此章节'\n                    });\n                  } else if (handleConfirmOtherError(err)) {\n                    _message.error('章节上线失败');\n                  }\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"disableChapterMutation\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(id) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.client.mutate({\n                  mutation: disableChapterMutation,\n                  refetchQueries: [{\n                    query: listChapters,\n                    variables: _this.variables\n                  }],\n                  variables: {\n                    input: {\n                      id: id\n                    }\n                  }\n                }).then(function (_) {\n                  _message.success('已成功下线此章节');\n                }).catch(function (err) {\n                  handleCommonErr(err);\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"deleteChapterMutation\",\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(id) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _this.client.mutate({\n                  mutation: deleteChapterMutation,\n                  update: function update(cache, _) {\n                    var listCache = cache.readQuery({\n                      query: listChapters,\n                      variables: {\n                        input: {\n                          where: {\n                            series: {\n                              id: _this.props.courseSeriesId\n                            },\n                            status: {\n                              key_not: 'REMOVED'\n                            },\n                            isDeleted: false\n                          }\n                        }\n                      }\n                    });\n                    var newData = listCache.listChapters.filter(function (record) {\n                      return record.id !== id;\n                    });\n                    listCache.listChapters = newData;\n                    cache.writeQuery({\n                      data: {\n                        listChapters: listCache.listChapters\n                      },\n                      query: listChapters,\n                      variables: {\n                        input: {\n                          where: {\n                            series: {\n                              id: _this.props.courseSeriesId\n                            },\n                            status: {\n                              key_not: 'REMOVED'\n                            },\n                            isDeleted: false\n                          }\n                        }\n                      }\n                    });\n                  },\n                  variables: {\n                    input: {\n                      id: id\n                    }\n                  }\n                }).then(function (_) {\n                  _this.setState({\n                    refresh: true\n                  });\n\n                  _message.success('已成功删除此章节');\n                }).catch(function (err) {\n                  handleCommonErr(err);\n                });\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"removeSectionMutation\",\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(id) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return _this.client.mutate({\n                  mutation: removeSectionMutation,\n                  update: function update(cache, _) {\n                    var listCache = cache.readQuery({\n                      query: listChapters,\n                      variables: {\n                        input: {\n                          where: {\n                            series: {\n                              id: _this.props.courseSeriesId\n                            },\n                            status: {\n                              key_not: 'REMOVED'\n                            },\n                            isDeleted: false\n                          }\n                        }\n                      }\n                    });\n                    listCache.listChapters.forEach(function (chapter) {\n                      chapter.sections = chapter.sections.filter(function (sec) {\n                        return sec.id !== id;\n                      });\n                      return chapter;\n                    }); // listCache.listChapters = newData;\n\n                    cache.writeQuery({\n                      data: _objectSpread({}, listCache, {\n                        listChapters: _toConsumableArray(listCache.listChapters)\n                      }),\n                      query: listChapters,\n                      variables: {\n                        input: {\n                          where: {\n                            series: {\n                              id: _this.props.courseSeriesId\n                            },\n                            status: {\n                              key_not: 'REMOVED'\n                            },\n                            isDeleted: false\n                          }\n                        }\n                      }\n                    });\n                  },\n                  variables: {\n                    input: {\n                      id: id\n                    }\n                  }\n                }).then(function (_) {\n                  _this.setState({\n                    refresh: true\n                  });\n\n                  _message.success('已成功删除此小节');\n                }).catch(function (err) {\n                  handleCommonErr(err);\n                });\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"flatDataAndStoreCursor\", function (data) {\n      var coreData = data.listChapters;\n      return coreData.map(function (d) {\n        var row = d;\n        var sectionAmount = row.sections.length;\n        var flattedSections = row.sections.map(function (sd) {\n          var fileFormats = sd.mediaFileDescription.map(function (mfd) {\n            return formatDict[mfd.file.format];\n          });\n          var tutors = sd.tutorDescriptions.map(function (td) {\n            return td.tutor && td.tutor.nickname;\n          });\n          return {\n            id: sd.id,\n            key: sd.id,\n            name: sd.name,\n            format: fileFormats,\n            tutors: tutors.length > 1 ? tutors.reduce(function (acu, cur) {\n              return \"\".concat(acu, \"\\u3001\").concat(cur);\n            }) : tutors.length > 0 ? tutors[0] : '- -',\n            createdAt: yyyymmdd(utc2Asia(sd.createdAt), 'YYYY/MM/DD HH:mm'),\n            operation: '选择操作',\n            description: sd.description,\n            mediaFileDescription: sd.mediaFileDescription,\n            attachment: sd.attachment,\n            tutorDescriptions: sd.tutorDescriptions\n          };\n        });\n        return {\n          id: row.id,\n          key: row.id,\n          name: row.name,\n          description: row.description,\n          sectionAmount: sectionAmount,\n          status: row.status.name,\n          sections: flattedSections,\n          createdAt: yyyymmdd(utc2Asia(row.createdAt), 'YYYY/MM/DD HH:mm'),\n          operation: '选择操作'\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"countRecordAmount\", function (data) {\n      return data.listChapters.length;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"render\", function () {\n      return React.createElement(ListChaptersQuery, {\n        query: listChapters,\n        variables: _this.variables,\n        fetchPolicy: \"network-only\"\n      }, function (_ref5) {\n        var data = _ref5.data,\n            loading = _ref5.loading,\n            error = _ref5.error,\n            client = _ref5.client;\n        _this.client = client;\n\n        if (loading) {\n          return React.createElement(FlexContentCenter, null, React.createElement(Loading, null));\n        }\n\n        if (error) {\n          return React.createElement(FlexContentCenter, null, error.message);\n        }\n\n        return React.createElement(ChapterTable, {\n          courseSeriesId: _this.props.courseSeriesId,\n          enableMutation: _this.enableChapter,\n          disableMutation: _this.disableChapterMutation,\n          removeMutation: _this.deleteChapterMutation,\n          chaptersAmount: _this.countRecordAmount(data),\n          listChapterData: _this.flatDataAndStoreCursor(data),\n          removeSectionMutation: _this.removeSectionMutation,\n          switchPage: _this.props.switchPage,\n          setCurrentChapter: _this.props.setCurrentChapter,\n          setCurrentSection: _this.props.setCurrentSection\n        });\n      });\n    });\n\n    _this.state = {\n      loading: false,\n      refresh: false\n    };\n    _this.variables = {\n      input: {\n        where: {\n          series: {\n            id: _this.props.courseSeriesId\n          },\n          status: {\n            key_not: 'REMOVED'\n          },\n          isDeleted: false\n        }\n      }\n    };\n    return _this;\n  }\n\n  return ListChaptersContainer;\n}(React.Component);\n\nexport { ListChaptersContainer };","map":null,"metadata":{},"sourceType":"module"}