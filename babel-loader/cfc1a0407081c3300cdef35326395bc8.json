{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport * as filestack from 'filestack-js';\nimport React from 'react';\nimport styled from 'styled-components';\nexport var OutlineDiv = styled.div.withConfig({\n  displayName: \"RichTextEditor__OutlineDiv\",\n  componentId: \"xflgg6-0\"\n})([\"border:1px solid rgba(0,0,0,0.2);\"]);\nvar BraftEditor;\n\nvar RichTextEditor =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RichTextEditor, _React$Component);\n\n  function RichTextEditor() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RichTextEditor);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RichTextEditor)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      client: null,\n      editorState: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"preview\", function () {\n      // @ts-ignore\n      if (window.previewWindow) {\n        // @ts-ignore\n        window.previewWindow.close();\n      } // @ts-ignore\n\n\n      window.previewWindow = window.open(); // @ts-ignore\n\n      window.previewWindow.document.write(_this.buildPreviewHtml()); // @ts-ignore\n\n      window.previewWindow.document.close();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"buildPreviewHtml\", function () {\n      return \"\\n      <!Doctype html>\\n      <html>\\n        <head>\\n          <title>Preview Content</title>\\n          <style>\\n            html,body{\\n              height: 100%;\\n              margin: 0;\\n              padding: 0;\\n              overflow: auto;\\n              background-color: #f1f2f3;\\n            }\\n            .container{\\n              box-sizing: border-box;\\n              width: 1000px;\\n              max-width: 100%;\\n              min-height: 100%;\\n              margin: 0 auto;\\n              padding: 30px 20px;\\n              overflow: hidden;\\n              background-color: #fff;\\n              border-right: solid 1px #eee;\\n              border-left: solid 1px #eee;\\n            }\\n            .container img,\\n            .container audio,\\n            .container video{\\n              max-width: 100%;\\n              height: auto;\\n            }\\n            .container p{\\n              white-space: pre-wrap;\\n              min-height: 1em;\\n            }\\n            .container pre{\\n              padding: 15px;\\n              background-color: #f1f1f1;\\n              border-radius: 5px;\\n            }\\n            .container blockquote{\\n              margin: 0;\\n              padding: 15px;\\n              background-color: #f1f1f1;\\n              border-left: 3px solid #d1d1d1;\\n            }\\n          </style>\\n        </head>\\n        <body>\\n          <div class=\\\"container\\\">\".concat(_this.state.editorState.toHTML(), \"</div>\\n        </body>\\n      </html>\\n    \");\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEditorChange\", function (editorState) {\n      _this.setState({\n        editorState: editorState\n      });\n\n      _this.props.getValue(editorState);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"myUploadFn\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(param) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _this.state.client.upload(param.file);\n\n              case 3:\n                data = _context.sent;\n                param.success({\n                  meta: {\n                    alt: data.url,\n                    autoPlay: true,\n                    controls: true,\n                    id: data.key,\n                    loop: true,\n                    poster: data.url,\n                    title: data.url\n                  },\n                  url: data.url\n                });\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                param.error({\n                  err: {\n                    msg: _context.t0\n                  }\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(RichTextEditor, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return require('braft-editor').default;\n\n              case 2:\n                BraftEditor = _context2.sent;\n                this.setState({\n                  client: filestack.init(this.props.apikey),\n                  editorState: BraftEditor.createEditorState(this.props.setValue)\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var extendControls = [{\n        key: 'custom-button',\n        onClick: this.preview,\n        text: '预览',\n        type: 'button'\n      }];\n      var excludeControls = ['line-height', 'italic', 'strike-through', 'superscript', 'subscript', 'remove-styles', 'separator', 'text-indent', 'text-align', 'list-ol', 'blockquote', 'code', 'link'];\n      return BraftEditor ? React.createElement(OutlineDiv, null, React.createElement(BraftEditor, {\n        excludeControls: excludeControls,\n        extendControls: extendControls,\n        media: {\n          accepts: {\n            video: false,\n            audio: false\n          },\n          externals: {\n            video: false,\n            audio: false,\n            image: false,\n            embed: false\n          },\n          uploadFn: this.myUploadFn\n        },\n        onChange: this.handleEditorChange,\n        value: this.state.editorState\n      })) : React.createElement(React.Fragment, null);\n    }\n  }]);\n\n  return RichTextEditor;\n}(React.Component);\n\nexport default RichTextEditor;","map":null,"metadata":{},"sourceType":"module"}