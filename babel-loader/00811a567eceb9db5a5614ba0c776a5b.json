{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"antd/lib/dropdown/style\";\nimport _Dropdown from \"antd/lib/dropdown\";\nimport \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/menu/style\";\nimport _Menu from \"antd/lib/menu\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { format as formatDate } from 'date-fns';\nimport filesize from 'filesize';\nimport Link from 'next/link';\nimport React from 'react';\nimport styled from 'styled-components'; // tslint:disable: no-var-requires\n// tslint:disable: no-submodule-imports\n\nvar AES = require('crypto-js/aes');\n\nimport TableFooter from '../../../components/Table/TableFooter';\nimport CopyFilePop from './CopyFilePop';\nimport CreateFolderPop from './CreateFolderPop';\nimport DeleteFilePop from './DeleteFilePop';\nimport { EmptyTxt } from './FileCenterComponent';\nimport SendFilePop from './SendFilePop';\nimport TranscodingPop from './TranscodingPop';\nimport UnsupportedPop from './UnsupportedPop';\n\nvar FileList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FileList, _React$Component);\n\n  function FileList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FileList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FileList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onRow\", function (_record, index) {\n      if (index % 2 === 1) {\n        return {\n          style: {\n            backgroundColor: '#fafafa'\n          }\n        };\n      } else {\n        return null;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRefCopyFilePop\", function (ref) {\n      _this.copyFilePop = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickCopy\", function () {\n      _this.copyFilePop.showPop();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRefSendFilePop\", function (ref) {\n      _this.sendFilePop = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickSend\", function () {\n      _this.sendFilePop.showPop();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRefDeleteFilePop\", function (ref) {\n      _this.deleteFilePop = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickDelete\", function () {\n      _this.deleteFilePop.showPop();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRefCreateFolderPop\", function (ref) {\n      _this.createFolderPop = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showCreateFolderPop\", function () {\n      _this.createFolderPop.showPop();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRefUnsupportedPop\", function (ref) {\n      _this.unsupportedPop = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showUnsupportedPop\", function () {\n      _this.unsupportedPop.showPop();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRefTranscodingPop\", function (ref) {\n      _this.transcodingPop = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showTranscodingPop\", function (status) {\n      _this.transcodingPop.showPop(status);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"generatePreviewUrl\", function (_ref) {\n      var url = _ref.url,\n          format = _ref.format;\n      var ciphertext = encodeURIComponent(AES.encrypt(url.slice(8), 'zw-secret').toString());\n      var linkUrl = '';\n\n      if (['video', 'audio'].includes(format)) {\n        linkUrl = \"/videos/\".concat(ciphertext);\n      }\n\n      if (['word', 'excel', 'ppt', 'pdf'].includes(format)) {\n        linkUrl = url;\n      }\n\n      if (format === 'image') {\n        linkUrl = url;\n      }\n\n      return linkUrl;\n    });\n\n    return _this;\n  }\n\n  _createClass(FileList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var type = this.props.type; // 操作下拉菜单\n\n      var actionDropdown = function actionDropdown(_text, record) {\n        var format = record.format,\n            ownerPersonId = record.ownerPersonId,\n            filename = record.filename,\n            key = record.key,\n            status = record.status,\n            file = record.file; // 是不是我创建的文件\n\n        var isMyFile = false;\n\n        if (ownerPersonId === localStorage.getItem('zhiwen_person_id')) {\n          isMyFile = true;\n        } // 可下载\n\n\n        var downloadable = !['video', 'audio'].includes(format); // 可预览\n\n        var previewable = format !== 'other'; // 文件格式 word, excel, ppt, image, audio, video, pdf, other\n        // 预览 link\n\n        var link;\n\n        if (status === 0 || status === 2) {\n          link = React.createElement(\"a\", {\n            onClick: _this2.showTranscodingPop.bind(_this2, status)\n          }, \"\\u9884\\u89C8\");\n        }\n\n        if (status === 1) {\n          var url = file.transformedFile.url;\n\n          var linkUrl = _this2.generatePreviewUrl({\n            url: url,\n            format: format\n          });\n\n          link = React.createElement(Link, {\n            href: linkUrl\n          }, React.createElement(\"a\", {\n            target: \"_blank\",\n            rel: \"noreferrer\"\n          }, \"\\u9884\\u89C8\"));\n        }\n\n        var originalUrl = file.url;\n        var menu = React.createElement(_Menu, null, previewable && React.createElement(_Menu.Item, null, link), downloadable && React.createElement(_Menu.Item, null, React.createElement(\"a\", {\n          href: originalUrl ? originalUrl + '?dl=true' : '',\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          download: filename\n        }, \"\\u4E0B\\u8F7D\")), React.createElement(_Menu.Item, {\n          onClick: status === 1 ? _this2.onClickCopy : _this2.showTranscodingPop.bind(_this2, status)\n        }, \"\\u590D\\u5236\\u5230...\"), React.createElement(_Menu.Item, {\n          onClick: status === 1 ? _this2.onClickSend : _this2.showTranscodingPop.bind(_this2, status)\n        }, \"\\u53D1\\u9001\\u7ED9\\u5DE5\\u4F5C\\u4F19\\u4F34\"), isMyFile && React.createElement(_Menu.Item, null, React.createElement(\"a\", {\n          style: {\n            color: '#F30B0B'\n          },\n          onClick: _this2.onClickDelete\n        }, \"\\u5220\\u9664\")), React.createElement(CopyFilePop, {\n          fileLinkId: key,\n          onRef: _this2.onRefCopyFilePop,\n          showCreateFolderPop: _this2.showCreateFolderPop,\n          copyFile: _this2.props.copyFile,\n          myfolders: _this2.props.myFolders\n        }), React.createElement(SendFilePop, {\n          fileLinkId: key,\n          onRef: _this2.onRefSendFilePop,\n          searchAccount: _this2.props.searchAccount,\n          sendFile: _this2.props.sendFile\n        }), React.createElement(DeleteFilePop, {\n          fileLinkId: key,\n          onRef: _this2.onRefDeleteFilePop,\n          deleteFile: _this2.props.deleteFile\n        }), React.createElement(CreateFolderPop, {\n          onRef: _this2.onRefCreateFolderPop,\n          createFolder: _this2.props.createFolder\n        }));\n        return React.createElement(_Dropdown, {\n          overlay: menu\n        }, React.createElement(LinkWrapper, null, \"\\u9009\\u62E9\\u64CD\\u4F5C \", React.createElement(_Icon, {\n          type: \"down\"\n        })));\n      };\n\n      var personTxt;\n      var timeTxt;\n\n      if (type === 'folder') {\n        personTxt = '添加';\n        timeTxt = '添加';\n      }\n\n      if (type === 'received') {\n        personTxt = '发送';\n        timeTxt = '接收';\n      }\n\n      if (type === 'sent') {\n        personTxt = '接收';\n        timeTxt = '发送';\n      }\n\n      var columnData = [['文件名', 'filename'], ['大小', 'size'], [\"\".concat(personTxt, \"\\u8005\"), 'person'], [\"\".concat(timeTxt, \"\\u65F6\\u95F4\"), 'time'], ['操作', 'action']]; // 构造 column\n\n      var columns = columnData.map(function (v, i) {\n        var _v = _slicedToArray(v, 2),\n            title = _v[0],\n            key = _v[1];\n\n        var columnsWidth = [563, 126, 147, 173, 127];\n\n        var onCell = function onCell() {\n          var cellStyle = {\n            style: {\n              whiteSpace: 'nowrap',\n              maxWidth: columnsWidth[i],\n              overflow: 'hidden',\n              wordBreak: 'break-all'\n            }\n          }; // 设置表格第一列样式\n\n          if (i === 0) {\n            _Object$assign(cellStyle.style, {\n              paddingLeft: '55px'\n            });\n          }\n\n          return cellStyle;\n        }; // 渲染文件名\n\n\n        var renderFileName = function renderFileName(text, record) {\n          var filename = record.filename,\n              format = record.format,\n              status = record.status,\n              file = record.file;\n          var iconUrl = \"/static/fileicon/\".concat(format, \".png\"); // 预览 link\n\n          var link;\n\n          if (status === 0 || status === 2) {\n            if (status === 0) {\n              text = '（转码中）' + text;\n            }\n\n            if (status === 2) {\n              text = '（转码失败）' + text;\n            }\n\n            link = React.createElement(\"a\", {\n              style: LinkStyle,\n              onClick: _this2.showTranscodingPop.bind(_this2, status)\n            }, text);\n          }\n\n          if (status === 1) {\n            if (format === 'other') {\n              link = React.createElement(\"a\", {\n                style: LinkStyle,\n                onClick: _this2.showUnsupportedPop\n              }, text);\n            } else {\n              var url = file.transformedFile.url;\n\n              var linkUrl = _this2.generatePreviewUrl({\n                url: url,\n                format: format\n              });\n\n              link = React.createElement(Link, {\n                href: linkUrl\n              }, React.createElement(\"a\", {\n                style: LinkStyle,\n                target: \"_blank\",\n                rel: \"noreferrer\"\n              }, text));\n            }\n          }\n\n          var originalUrl = file.url;\n          return React.createElement(FileNameWrapper, null, React.createElement(UnsupportedPop, {\n            onRef: _this2.onRefUnsupportedPop,\n            url: originalUrl,\n            filename: filename\n          }), React.createElement(FileIconImg, {\n            src: iconUrl\n          }), React.createElement(FileNameTxt, null, link));\n        }; // 渲染相关人栏\n\n\n        var renderPerson = function renderPerson(text) {\n          return React.createElement(AvatarWrapper, null, React.createElement(AvatarImg, {\n            src: \"/static/default_avatar.png\",\n            alt: \"\"\n          }), React.createElement(AvatarTxt, null, text));\n        };\n\n        var column = {\n          key: key,\n          dataIndex: key,\n          title: title,\n          width: columnsWidth[i],\n          // 指定各列宽度\n          onCell: onCell,\n          onHeaderCell: onCell,\n          render: function render(text) {\n            return React.createElement(\"div\", {\n              style: {\n                textOverflow: 'ellipsis',\n                overflow: 'hidden'\n              }\n            }, text);\n          }\n        }; // 设置表格第一列: 文件名 样式\n\n        if (i === 0) {\n          _Object$assign(column, {\n            render: renderFileName\n          });\n        } // 设置表格第三列: 样式\n\n\n        if (i === 2) {\n          _Object$assign(column, {\n            render: renderPerson\n          });\n        } // 渲染操作下拉菜单\n\n\n        if (key === 'action') {\n          _Object$assign(column, {\n            render: actionDropdown\n          });\n        }\n\n        return column;\n      });\n      var fileListData = this.props.fileListData; // 文件夹中有文件\n      // tslint:disable:no-console\n\n      console.log(fileListData);\n\n      if (fileListData.length > 0) {\n        // 格式化数据\n        var formatedData = fileListData.map(function (v) {\n          var person;\n          var time;\n\n          if (type === 'folder') {\n            person = v.owner.person.name;\n            time = v.createdAt;\n          }\n\n          if (type === 'received') {\n            person = v.fromLink ? v.fromLink.owner.person.name : '';\n            time = v.updatedAt;\n          }\n\n          if (type === 'sent') {\n            person = v.toAccount.person.name;\n            time = v.updatedAt;\n          } // 如果转码完成, 使用已转码的文件\n\n\n          var format = v.format,\n              id = v.id,\n              file = v.file;\n          var status = file.status,\n              filename = file.filename,\n              size = file.size;\n          return {\n            key: id,\n            file: file,\n            filename: filename,\n            size: filesize(size),\n            person: person,\n            time: formatDate(time, 'YYYY/MM/DD HH:mm'),\n            format: format,\n            ownerPersonId: v.owner.person.id,\n            status: status\n          };\n        });\n\n        var renderFooter = function renderFooter() {\n          var _this2$props = _this2.props,\n              loading = _this2$props.loading,\n              queryMore = _this2$props.queryMore;\n          return React.createElement(TableFooter, {\n            onClickLink: queryMore,\n            isLoading: loading\n          });\n        };\n\n        return React.createElement(React.Fragment, null, React.createElement(TranscodingPop, {\n          onRef: this.onRefTranscodingPop\n        }), React.createElement(_Table, {\n          columns: columns,\n          dataSource: formatedData,\n          pagination: false,\n          onRow: this.onRow,\n          footer: this.props.isShowFooter ? renderFooter : undefined\n        }));\n      } else {\n        // 无文件\n        return React.createElement(EmptyTxt, null, \"\\u6682\\u65E0\\u6587\\u4EF6\");\n      }\n    }\n  }]);\n\n  return FileList;\n}(React.Component);\n\nexport default FileList;\nvar LinkWrapper = styled.div.withConfig({\n  displayName: \"FileList__LinkWrapper\",\n  componentId: \"sc-1t3wh03-0\"\n})([\"color:#6285ff;text-decoration:none;outline:0;&:hover{color:#8aa7ff;}\"]); // 文件名栏\n\nvar FileNameWrapper = styled.div.withConfig({\n  displayName: \"FileList__FileNameWrapper\",\n  componentId: \"sc-1t3wh03-1\"\n})([\"height:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;\"]);\nvar FileIconImg = styled.img.withConfig({\n  displayName: \"FileList__FileIconImg\",\n  componentId: \"sc-1t3wh03-2\"\n})([\"width:20px;height:24px;margin-right:10px;\"]);\nvar FileNameTxt = styled.span.withConfig({\n  displayName: \"FileList__FileNameTxt\",\n  componentId: \"sc-1t3wh03-3\"\n})([\"line-height:24px;\"]);\nvar LinkStyle = {\n  lineHeight: '24px',\n  color: 'rgba(0, 0, 0, 0.65)',\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap',\n  textDecoration: 'none'\n}; // 相关人员栏\n\nvar AvatarWrapper = styled.div.withConfig({\n  displayName: \"FileList__AvatarWrapper\",\n  componentId: \"sc-1t3wh03-4\"\n})([\"height:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;\"]);\nvar AvatarImg = styled.img.withConfig({\n  displayName: \"FileList__AvatarImg\",\n  componentId: \"sc-1t3wh03-5\"\n})([\"width:28px;height:28px;margin-right:8px;vertical-align:top;border-radius:14px;\"]);\nvar AvatarTxt = styled.span.withConfig({\n  displayName: \"FileList__AvatarTxt\",\n  componentId: \"sc-1t3wh03-6\"\n})([\"line-height:28px;vertical-align:top;\"]);","map":null,"metadata":{},"sourceType":"module"}