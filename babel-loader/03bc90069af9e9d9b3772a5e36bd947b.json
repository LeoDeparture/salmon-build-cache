{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/cascader/style\";\nimport _Cascader from \"antd/lib/cascader\";\nimport \"antd/lib/tag/style\";\nimport _Tag from \"antd/lib/tag\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport uniq from 'lodash/uniq';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { toCascadarOptions } from '../../../../lib/commonJs';\nimport ClearSelectedCompanyPop from '../ClearSelectedCompanyPop';\nimport { byIndustry, companyAddable, emptyCascaderRender, groupAndFormat } from '../commonJs';\nimport { buttonStyle, ButtonWrapperStyle, ChildTitle, FormItemSubtitle, FormItemTitle, FormStyle, HiddenStyle, RequiredFormItemTitle, requiredMessage } from '../RootComponent';\n\nvar ModuleForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ModuleForm, _React$Component);\n\n  function ModuleForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ModuleForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ModuleForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      companyOptions: [],\n      companyLevelOptions: [],\n      businessLineOptions: [],\n      provinceAndCityOptions: [],\n      foreignCityOptions: [],\n      selectedCompanyLevel: null,\n      selectedCompanyArray: [],\n      selectedHomeCityArray: [],\n      selectedForeignCityArray: [],\n      description: '请先选择「目标公司所在行业和分类」',\n      removable: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var _this$props = _this.props,\n          agreementCompanyLevels = _this$props.agreementCompanyLevels,\n          businessLines = _this$props.businessLines,\n          foreignCities = _this$props.foreignCities;\n      var companyLevelOptions = groupAndFormat(agreementCompanyLevels, byIndustry);\n      var businessLineOptions = groupAndFormat(businessLines, byIndustry);\n      var foreignCityOptions = groupAndFormat(foreignCities, function (v) {\n        return v.country.name;\n      }); // 国内省市数据\n\n      var provinceAndCityList = JSON.parse(localStorage.getItem('zhiwen_province_city'));\n      var provinceAndCityOptions = toCascadarOptions(provinceAndCityList, 2);\n\n      _this.setState({\n        foreignCityOptions: foreignCityOptions,\n        businessLineOptions: businessLineOptions,\n        companyLevelOptions: companyLevelOptions,\n        provinceAndCityOptions: provinceAndCityOptions\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRefCompanyLevelCascader\", function (ref) {\n      _this.companyLevelCascader = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRefClearSelectedCompanyPop\", function (ref) {\n      _this.clearSelectedCompanyPop = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickLastStep\", function () {\n      _this.props.toLastStep();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickNextStep\", function () {\n      _this.props.form.validateFieldsAndScroll({\n        force: true\n      }, function (err, fieldsValue) {\n        if (!err) {\n          var businessLine = fieldsValue.businessLine;\n          var _this$state = _this.state,\n              _selectedCompanyLevel = _this$state.selectedCompanyLevel,\n              selectedCompanyArray = _this$state.selectedCompanyArray,\n              selectedHomeCityArray = _this$state.selectedHomeCityArray,\n              selectedForeignCityArray = _this$state.selectedForeignCityArray;\n          var companyLevelId = _selectedCompanyLevel.id;\n          var variables = {\n            companyLevelId: companyLevelId,\n            companyExcludedIds: selectedCompanyArray.map(function (v) {\n              return v.id;\n            }),\n            targetCityIds: selectedHomeCityArray.map(function (v) {\n              return v.id;\n            }),\n            targetForeignCityIds: selectedForeignCityArray.map(function (v) {\n              return v.id;\n            }),\n            businessLineId: businessLine[1]\n          };\n\n          _this.props.assignVariables(variables);\n\n          _this.props.toNextStep();\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectCompanyLevel\", function (_value, selectedOptions) {\n      // 重置剔除公司选项\n      var resetFields = _this.props.form.resetFields;\n      resetFields(['companyExcluded']);\n      var selectedCompanyLevel = selectedOptions[1];\n      var description = selectedCompanyLevel.description,\n          mainExclusionCount = selectedCompanyLevel.mainExclusionCount; // 是否可以剔除\n\n      var removable = mainExclusionCount !== 0;\n\n      _this.setState({\n        description: description,\n        removable: removable,\n        selectedCompanyLevel: selectedCompanyLevel\n      }); // 若可以剔除, 处理剔除公司数据\n\n\n      if (removable) {\n        var companyOptions = _this.props.renderCompanyOptions(selectedCompanyLevel);\n\n        _this.setState({\n          companyOptions: companyOptions\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectCompany\", function (_value, selectedOptions) {\n      var selectedCompany = selectedOptions[1];\n\n      var selectedCompanyArray = _toConsumableArray(_this.state.selectedCompanyArray);\n\n      var selectedCompanyLevel = _objectSpread({}, _this.state.selectedCompanyLevel); // 如果可加入\n\n\n      if (companyAddable(selectedCompany, selectedCompanyArray, selectedCompanyLevel)) {\n        // 加入数组\n        selectedCompanyArray.push(selectedCompany); // 数组去重\n\n        selectedCompanyArray = uniq(selectedCompanyArray);\n\n        _this.setState({\n          selectedCompanyArray: selectedCompanyArray\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectHomeCity\", function (_value, selectedOptions) {\n      var city = selectedOptions[1];\n\n      var arr = _toConsumableArray(_this.state.selectedHomeCityArray);\n\n      arr.push(city); // 数组去重\n\n      var selectedHomeCityArray = uniq(arr);\n\n      _this.setState({\n        selectedHomeCityArray: selectedHomeCityArray\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectForeignCity\", function (_value, selectedOptions) {\n      var city = selectedOptions[1];\n\n      var arr = _toConsumableArray(_this.state.selectedForeignCityArray);\n\n      arr.push(city); // 数组去重\n\n      var selectedForeignCityArray = uniq(arr);\n\n      _this.setState({\n        selectedForeignCityArray: selectedForeignCityArray\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderCompanyTags\", function (data) {\n      return data.map(function (v) {\n        var id = v.id,\n            industry = v.industry,\n            name = v.name;\n        return React.createElement(_Tag, {\n          key: id,\n          closable: true,\n          onClose: _this.onClickCloseIcon.bind(_assertThisInitialized(_this), id, 'company')\n        }, [industry, name].join(' / '));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderCityTags\", function (data, type) {\n      return data.map(function (v) {\n        var id = v.id,\n            name = v.name;\n        return React.createElement(_Tag, {\n          key: id,\n          closable: true,\n          onClose: _this.onClickCloseIcon.bind(_assertThisInitialized(_this), id, type)\n        }, name);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickCloseIcon\", function (id, type) {\n      var selectedArray = [];\n\n      if (type === 'company') {\n        selectedArray = _toConsumableArray(_this.state.selectedCompanyArray);\n      }\n\n      if (type === 'homeCity') {\n        selectedArray = _toConsumableArray(_this.state.selectedHomeCityArray);\n      }\n\n      if (type === 'foreignCity') {\n        selectedArray = _toConsumableArray(_this.state.selectedForeignCityArray);\n      }\n\n      selectedArray = selectedArray.filter(function (v) {\n        return v.id !== id;\n      });\n\n      if (type === 'company') {\n        _this.setState({\n          selectedCompanyArray: selectedArray\n        });\n      }\n\n      if (type === 'homeCity') {\n        _this.setState({\n          selectedHomeCityArray: selectedArray\n        });\n      }\n\n      if (type === 'foreignCity') {\n        _this.setState({\n          selectedForeignCityArray: selectedArray\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"validateHomeCity\", function (_rule, _value, callback) {\n      // setTimeout 使校验在 setState 之后执行, 否则取不到正确值\n      setTimeout(function () {\n        var _this$state2 = _this.state,\n            selectedHomeCityArray = _this$state2.selectedHomeCityArray,\n            selectedForeignCityArray = _this$state2.selectedForeignCityArray;\n\n        if (selectedHomeCityArray.length === 0 && selectedForeignCityArray.length === 0) {\n          callback('国内或国外至少选一项');\n        }\n\n        callback();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"validateForeignCity\", function (_rule, _value, callback) {\n      var validateFields = _this.props.form.validateFields;\n      validateFields(['targetHomeCity'], {\n        force: true\n      }, function () {\n        return;\n      });\n      callback();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPopupVisibleChange\", function (value) {\n      var selectedCompanyArray = _toConsumableArray(_this.state.selectedCompanyArray); // 如果已经选择剔除公司, 且为打开操作\n\n\n      if (value && selectedCompanyArray.length > 0) {\n        // 关闭默认打开的浮层\n        _this.companyLevelCascader.handlePopupVisibleChange(false); // 显示确认弹窗\n\n\n        _this.clearSelectedCompanyPop.showPop();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearSelectedCompany\", function () {\n      // 重置 companyLevel\n      var resetFields = _this.props.form.resetFields;\n      resetFields(['companyLevel']); // 清除数据\n\n      _this.setState({\n        selectedCompanyArray: [],\n        description: '请先选择「目标公司所在行业和分类」'\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ModuleForm, [{\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      var _this$state3 = this.state,\n          removable = _this$state3.removable,\n          description = _this$state3.description,\n          companyLevelOptions = _this$state3.companyLevelOptions,\n          companyOptions = _this$state3.companyOptions,\n          businessLineOptions = _this$state3.businessLineOptions,\n          provinceAndCityOptions = _this$state3.provinceAndCityOptions,\n          foreignCityOptions = _this$state3.foreignCityOptions,\n          selectedCompanyArray = _this$state3.selectedCompanyArray,\n          selectedHomeCityArray = _this$state3.selectedHomeCityArray,\n          selectedForeignCityArray = _this$state3.selectedForeignCityArray;\n      return React.createElement(_Form, {\n        style: this.props.hidden ? HiddenStyle : FormStyle\n      }, React.createElement(ChildTitle, null, \"\\u8BF7\\u8BBE\\u7F6E\\u76EE\\u6807\\u5C97\\u4F4D\\u8303\\u56F4\"), React.createElement(_Form.Item, {\n        label: \"\\u76EE\\u6807\\u516C\\u53F8\\u6240\\u5728\\u884C\\u4E1A\\u548C\\u5206\\u7C7B\",\n        required: true\n      }, getFieldDecorator('companyLevel', {\n        rules: [{\n          required: true,\n          message: requiredMessage\n        }]\n      })(React.createElement(_Cascader, {\n        onChange: this.onSelectCompanyLevel,\n        options: companyLevelOptions,\n        placeholder: \"\\u8BF7\\u9009\\u62E9\",\n        allowClear: false,\n        onPopupVisibleChange: this.onPopupVisibleChange,\n        ref: this.onRefCompanyLevelCascader\n      }))), React.createElement(FormItemTitle, null, \"\\u5254\\u9664\\u516C\\u53F8\"), React.createElement(_Form.Item, null, getFieldDecorator('companyExcluded')(React.createElement(_Cascader, {\n        displayRender: emptyCascaderRender.bind(this, description),\n        disabled: !removable,\n        allowClear: false,\n        onChange: this.onSelectCompany,\n        options: companyOptions,\n        placeholder: \"\"\n      })), React.createElement(ClearSelectedCompanyPop, {\n        onRef: this.onRefClearSelectedCompanyPop,\n        clearSelectedCompany: this.clearSelectedCompany\n      }), React.createElement(TagsWrapper, null, this.renderCompanyTags(selectedCompanyArray))), React.createElement(_Form.Item, {\n        label: \"\\u76EE\\u6807\\u804C\\u80FD\\u7EBF / \\u4E1A\\u52A1\\u7EBF\",\n        required: true\n      }, getFieldDecorator('businessLine', {\n        rules: [{\n          required: true,\n          message: requiredMessage\n        }]\n      })(React.createElement(_Cascader, {\n        allowClear: false,\n        options: businessLineOptions,\n        placeholder: \"\\u8BF7\\u9009\\u62E9\"\n      }))), React.createElement(RequiredFormItemTitle, null, \"\\u76EE\\u6807\\u5730\\u57DF\\u8303\\u56F4\"), React.createElement(FormItemSubtitle, null, \"\\u53EF\\u641C\\u7D22\\uFF0C\\u53EF\\u591A\\u9009\"), React.createElement(_Row, {\n        style: RowStyle\n      }, React.createElement(_Col, {\n        style: ColStyle,\n        span: 12\n      }, React.createElement(InputTitle, null, \"\\u56FD\\u5185\"), React.createElement(_Form.Item, {\n        style: NoMargin\n      }, getFieldDecorator('targetHomeCity', {\n        rules: [{\n          validator: this.validateHomeCity\n        }]\n      })(React.createElement(_Cascader, {\n        showSearch: true,\n        displayRender: emptyCascaderRender.bind(this, ''),\n        options: provinceAndCityOptions,\n        allowClear: false,\n        onChange: this.onSelectHomeCity,\n        placeholder: \"\",\n        notFoundContent: \"\\u65E0\\u7ED3\\u679C\"\n      })))), React.createElement(_Col, {\n        style: _objectSpread({}, ColStyle, {\n          marginLeft: '32px'\n        }),\n        span: 12\n      }, React.createElement(InputTitle, null, \"\\u56FD\\u5916\"), React.createElement(_Form.Item, {\n        style: NoMargin\n      }, getFieldDecorator('targetForeignCity', {\n        rules: [{\n          validator: this.validateForeignCity\n        }]\n      })(React.createElement(_Cascader, {\n        showSearch: true,\n        displayRender: emptyCascaderRender.bind(this, ''),\n        options: foreignCityOptions,\n        allowClear: false,\n        onChange: this.onSelectForeignCity,\n        placeholder: \"\",\n        notFoundContent: \"\\u65E0\\u7ED3\\u679C\"\n      }))))), React.createElement(_Row, {\n        style: RowStyle\n      }, React.createElement(_Col, {\n        style: ColStyle,\n        span: 12\n      }, React.createElement(TagsWrapper, null, this.renderCityTags(selectedHomeCityArray, 'homeCity'))), React.createElement(_Col, {\n        style: _objectSpread({}, ColStyle, {\n          paddingLeft: '32px'\n        }),\n        span: 12\n      }, React.createElement(TagsWrapper, null, this.renderCityTags(selectedForeignCityArray, 'foreignCity')))), React.createElement(_Form.Item, {\n        style: ButtonWrapperStyle\n      }, React.createElement(_Button, {\n        style: buttonStyle,\n        onClick: this.onClickLastStep\n      }, \"\\u4E0A\\u4E00\\u6B65\"), React.createElement(_Button, {\n        style: buttonStyle,\n        onClick: this.onClickNextStep,\n        type: \"primary\"\n      }, \"\\u4E0B\\u4E00\\u6B65\")));\n    }\n  }]);\n\n  return ModuleForm;\n}(React.Component);\n\nvar TargetPosition = _Form.create()(ModuleForm);\n\nexport default TargetPosition;\nexport var TagsWrapper = styled.div.withConfig({\n  displayName: \"TargetPosition__TagsWrapper\",\n  componentId: \"sc-1438ej6-0\"\n})([\"position:relative;\"]);\nvar InputTitle = styled.div.withConfig({\n  displayName: \"TargetPosition__InputTitle\",\n  componentId: \"sc-1438ej6-1\"\n})([\"width:50px;line-height:32px;vertical-align:top;\"]);\nvar ColStyle = {\n  display: 'flex',\n  alignItems: 'center',\n  width: '234px'\n};\nvar NoMargin = {\n  margin: 0\n};\nvar RowStyle = {\n  margin: '8px 0'\n};","map":null,"metadata":{},"sourceType":"module"}