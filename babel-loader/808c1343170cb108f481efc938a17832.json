{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/cascader/style\";\nimport _Cascader from \"antd/lib/cascader\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/date-picker/style\";\nimport _DatePicker from \"antd/lib/date-picker\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/radio/style\";\nimport _Radio from \"antd/lib/radio\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport RadioGroup from 'antd/lib/radio/group';\nimport moment from 'moment';\nimport React from 'react';\nimport { renderSelectOptions, toCascadarOptions } from '../../../../lib/commonJs';\nimport commonFunc from '../CommonFunc';\nimport { DatePlaceHolder, FormStyle, InputPlaceHolder, lengthLimit, noTxtRequireRule, RadioGroupStyle, RadioInputWrapper, RadioLabelStyle, RadioLabelWrapper, requireRule } from '../UserResumeComponent';\n\nvar ModuleForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ModuleForm, _React$Component);\n\n  function ModuleForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ModuleForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ModuleForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      selectedAddressType: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updating\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n\n                if (!_this.updating) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _this.updating = true;\n\n                _this.props.form.validateFieldsAndScroll({\n                  force: true\n                }, function (err, fieldsValue) {\n                  if (!err) {\n                    // 获取表单数据\n                    var name = fieldsValue.name,\n                        phoneNumberCountry = fieldsValue.phoneNumberCountry,\n                        phoneNumber = fieldsValue.phoneNumber,\n                        gender = fieldsValue.gender,\n                        wechat = fieldsValue.wechat,\n                        birthday = fieldsValue.birthday,\n                        email = fieldsValue.email,\n                        location = fieldsValue.location,\n                        foreignCountryId = fieldsValue.foreignCountryId;\n                    var phoneNumberCountryId;\n\n                    if (phoneNumberCountry && phoneNumberCountry.key && phoneNumberCountry.label) {\n                      phoneNumberCountryId = phoneNumberCountry.key.split('&')[0];\n                    } // 处理数据为接口所需类型\n\n\n                    var input = {\n                      birthday: birthday.toDate(),\n                      email: email,\n                      genderId: gender,\n                      id: _this.props.cvId,\n                      name: name,\n                      phoneNumber: phoneNumber,\n                      phoneNumberCountryId: phoneNumberCountryId,\n                      wechat: wechat\n                    }; // 地址信息\n\n                    var isForeign = _this.state.selectedAddressType === 1;\n                    var addressInput = {\n                      cityId: isForeign ? null : location[1],\n                      // 城市id\n                      countryId: isForeign ? foreignCountryId : localStorage.getItem('zhiwen_china_id'),\n                      // 如是中国城市, 获取中国id, 如不是则使用填写的国外id\n                      provinceId: isForeign ? null : location[0] // 省份id\n\n                    };\n\n                    _Object$assign(input, addressInput); // 执行 mutation\n\n\n                    _this.props.updateData(_this.props.updateMutation, input, _this.afterUpdate);\n                  } else {\n                    _this.updating = false;\n                  }\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"afterUpdate\", function () {\n      _this.props.closeEdit();\n\n      _this.updating = false;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      // 数据回填\n      var _this$props$data = _this.props.data,\n          birthday = _this$props$data.birthday,\n          email = _this$props$data.email,\n          gender = _this$props$data.gender,\n          name = _this$props$data.name,\n          phoneNumber = _this$props$data.phoneNumber,\n          wechat = _this$props$data.wechat,\n          country = _this$props$data.country,\n          province = _this$props$data.province,\n          city = _this$props$data.city; // 如果没有区号, 选择中国区号\n\n      var phoneNumberCountry = _this.props.data.phoneNumberCountry;\n\n      if (!phoneNumberCountry) {\n        phoneNumberCountry = JSON.parse(localStorage.getItem('zhiwen_china_country_data'));\n      }\n\n      var _phoneNumberCountry = phoneNumberCountry,\n          id = _phoneNumberCountry.id,\n          locale = _phoneNumberCountry.locale,\n          countryTelCode = _phoneNumberCountry.countryTelCode,\n          countryName = _phoneNumberCountry.name;\n      var data = {\n        birthday: birthday && moment(birthday),\n        email: email,\n        gender: gender && gender.id,\n        name: name,\n        phoneNumber: phoneNumber,\n        phoneNumberCountry: {\n          key: \"\".concat(id, \"&\").concat(locale),\n          label: \"(\".concat(countryTelCode, \")\").concat(countryName)\n        },\n        wechat: wechat\n      };\n\n      if (_JSON$stringify(_this.props.data) !== '{}') {\n        commonFunc.assignAddress(_assertThisInitialized(_this), [country, province, city], data); // 执行回填\n\n        _this.props.form.setFieldsValue(data);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getValue\", function (type, values) {\n      _this.props.form.setFieldsValue(_defineProperty({}, type, values));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"radioGroupChange\", function (disableName, e) {\n      _this.setState(_defineProperty({}, disableName, e.target.value), function () {\n        _this.props.form.validateFields(['location'], {\n          force: true\n        }, function () {\n          return;\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderAreaCodeOption\", function () {\n      var telData = JSON.parse(localStorage.getItem('zhiwen_all_country'));\n\n      if (telData && telData.length) {\n        return telData.map(function (item) {\n          var id = item.id,\n              locale = item.locale,\n              countryTelCode = item.countryTelCode,\n              name = item.name;\n          return React.createElement(_Select.Option, {\n            key: id,\n            value: id + '&' + locale\n          }, \"+\".concat(countryTelCode, \" \").concat(name));\n        });\n      }\n\n      return [];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkPhoneNumber\", function (_rule, _value, callback) {\n      var getFieldValue = _this.props.form.getFieldValue;\n      var phoneNumberCountry = getFieldValue('phoneNumberCountry');\n      var phoneNumber = getFieldValue('phoneNumber');\n\n      if (!phoneNumber) {\n        callback('请输入正确的手机号');\n      }\n\n      if (!phoneNumberCountry.key || !phoneNumberCountry.label) {\n        callback('请选择区号');\n        return;\n      }\n\n      callback();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkLocale\", function (_rule, value, callback) {\n      var _this$props$form = _this.props.form,\n          getFieldValue = _this$props$form.getFieldValue,\n          validateFields = _this$props$form.validateFields;\n\n      if (!value) {\n        return;\n      }\n\n      if (value && getFieldValue('phoneNumber')) {\n        validateFields(['phoneNumber'], {\n          force: true\n        }, function () {\n          return;\n        });\n      }\n\n      callback();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkHomeCity\", function (_rule, _value, callback) {\n      var getFieldValue = _this.props.form.getFieldValue;\n      var selectedAddressType = _this.state.selectedAddressType;\n      var location = getFieldValue('location');\n      var foreignCountryId = getFieldValue('foreignCountryId');\n\n      if (selectedAddressType === 0 && (!location || !location.length) || selectedAddressType === 1 && !foreignCountryId) {\n        callback('请选填国内或国外地址');\n      }\n\n      callback();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkForeignCountry\", function (_rule, _value, callback) {\n      _this.props.form.validateFieldsAndScroll(['location'], {\n        force: true\n      }, function () {\n        return;\n      });\n\n      callback();\n    });\n\n    return _this;\n  }\n\n  _createClass(ModuleForm, [{\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      var selectedAddressType = this.state.selectedAddressType; // 手机区号选择\n\n      var prefixSelector = getFieldDecorator('phoneNumberCountry', {\n        rules: [{\n          validator: this.checkLocale\n        }]\n      })(React.createElement(_Select, {\n        labelInValue: true,\n        style: {\n          width: 140\n        }\n      }, this.renderAreaCodeOption())); // 获取缓存信息, 并渲染性别 radios\n\n      var data = JSON.parse(localStorage.getItem('zhiwen_all_enum'));\n      var radios = data.listGenderEnum.map(function (v) {\n        return React.createElement(_Radio, {\n          key: v.id,\n          value: v.id\n        }, v.name);\n      });\n      return React.createElement(_Form, {\n        onSubmit: this.handleSubmit,\n        style: FormStyle,\n        colon: false\n      }, React.createElement(_Row, {\n        gutter: 24\n      }, React.createElement(_Col, {\n        span: 8\n      }, React.createElement(_Form.Item, {\n        label: \"\\u59D3\\u540D\"\n      }, getFieldDecorator('name', {\n        rules: requireRule\n      })(React.createElement(_Input, {\n        placeholder: InputPlaceHolder\n      })))), React.createElement(_Col, {\n        span: 8\n      }, React.createElement(_Form.Item, {\n        label: \"\\u6027\\u522B\"\n      }, getFieldDecorator('gender', {\n        rules: [{\n          message: '请选择性别',\n          required: true\n        }]\n      })(React.createElement(_Radio.Group, null, radios)))), React.createElement(_Col, {\n        span: 8\n      }, React.createElement(_Form.Item, {\n        label: \"\\u51FA\\u751F\\u65E5\\u671F\"\n      }, getFieldDecorator('birthday', {\n        rules: noTxtRequireRule\n      })(React.createElement(_DatePicker, {\n        placeholder: DatePlaceHolder,\n        style: {\n          width: '100%'\n        }\n      }))))), React.createElement(_Row, {\n        gutter: 24\n      }, React.createElement(_Col, {\n        span: 8\n      }, React.createElement(_Form.Item, {\n        label: \"\\u624B\\u673A\\u53F7\"\n      }, getFieldDecorator('phoneNumber', {\n        rules: [].concat(_toConsumableArray(requireRule), [lengthLimit, {\n          validator: this.checkPhoneNumber\n        }])\n      })(React.createElement(_Input, {\n        addonBefore: prefixSelector,\n        placeholder: '请输入手机号'\n      })))), React.createElement(_Col, {\n        span: 8\n      }, React.createElement(_Form.Item, {\n        label: \"\\u90AE\\u7BB1\"\n      }, getFieldDecorator('email', {\n        rules: [{\n          message: '邮箱格式不正确',\n          type: 'email'\n        }, {\n          message: '请输入您的邮箱',\n          required: true\n        }]\n      })(React.createElement(_Input, {\n        placeholder: InputPlaceHolder\n      })))), React.createElement(_Col, {\n        span: 8\n      }, React.createElement(_Form.Item, {\n        label: \"\\u5FAE\\u4FE1\\u53F7\"\n      }, getFieldDecorator('wechat', {\n        rules: [lengthLimit]\n      })(React.createElement(_Input, {\n        placeholder: InputPlaceHolder\n      }))))), React.createElement(_Row, {\n        gutter: 24\n      }, React.createElement(_Col, {\n        span: 16\n      }, React.createElement(_Form.Item, {\n        label: \"\\u5E38\\u9A7B\\u5730\\u70B9\",\n        required: true\n      }, React.createElement(RadioGroup, {\n        style: RadioGroupStyle,\n        value: selectedAddressType,\n        onChange: this.radioGroupChange.bind(this, 'selectedAddressType')\n      }, React.createElement(_Row, {\n        gutter: 24\n      }, React.createElement(_Col, {\n        span: 12\n      }, React.createElement(_Form.Item, {\n        label: \"\",\n        style: {\n          margin: 0\n        }\n      }, React.createElement(RadioInputWrapper, null, React.createElement(RadioLabelWrapper, null, React.createElement(_Radio, {\n        value: 0\n      }), React.createElement(\"span\", {\n        style: RadioLabelStyle\n      }, \"\\u56FD\\u5185\")), getFieldDecorator('location', {\n        rules: [{\n          required: Boolean(selectedAddressType === 0),\n          validator: this.checkHomeCity\n        }]\n      })(React.createElement(_Cascader, {\n        disabled: Boolean(selectedAddressType !== 0),\n        showSearch: true,\n        style: {\n          flex: 1\n        },\n        options: toCascadarOptions(JSON.parse(localStorage.getItem('zhiwen_province_city')), 2),\n        allowClear: false,\n        placeholder: \"\\u8BF7\\u9009\\u62E9\",\n        notFoundContent: \"\\u65E0\\u7ED3\\u679C\"\n      }))))), React.createElement(_Col, {\n        span: 12\n      }, React.createElement(_Form.Item, {\n        label: \"\",\n        style: {\n          margin: 0\n        }\n      }, React.createElement(RadioInputWrapper, null, React.createElement(RadioLabelWrapper, null, React.createElement(_Radio, {\n        value: 1\n      }), React.createElement(\"span\", {\n        style: RadioLabelStyle\n      }, \"\\u56FD\\u5916\")), getFieldDecorator('foreignCountryId', {\n        rules: [{\n          required: Boolean(selectedAddressType === 1),\n          validator: this.checkForeignCountry\n        }]\n      })(React.createElement(_Select, {\n        showSearch: true,\n        placeholder: \"\\u4EC5\\u652F\\u6301\\u641C\\u7D22\\u56FD\\u5BB6\",\n        filterOption: commonFunc.filterData,\n        disabled: Boolean(selectedAddressType !== 1),\n        style: {\n          flex: 1\n        }\n      }, renderSelectOptions(JSON.parse(localStorage.getItem('zhiwen_foreign_country'))))))))))))), React.createElement(_Form.Item, {\n        labelCol: {\n          span: 12\n        }\n      }, React.createElement(_Button, {\n        onClick: this.props.cancel\n      }, \"\\u53D6\\u6D88\"), React.createElement(_Button, {\n        disabled: this.updating,\n        style: {\n          marginLeft: 20\n        },\n        type: \"primary\",\n        htmlType: \"submit\"\n      }, \"\\u4FDD\\u5B58\")));\n    }\n  }]);\n\n  return ModuleForm;\n}(React.Component);\n\nvar EditBasicInfo = _Form.create()(ModuleForm);\n\nexport default EditBasicInfo;","map":null,"metadata":{},"sourceType":"module"}