{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport SelectCourse from '../../../../components/SelectComponents/SelectCourse';\nimport SelectCourseCategories from '../../../../components/SelectComponents/SelectCourseCategories';\n\nvar ModuleForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ModuleForm, _React$Component);\n\n  function ModuleForm(props) {\n    var _this;\n\n    _classCallCheck(this, ModuleForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ModuleForm).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      _this.props.onRef(_assertThisInitialized(_this));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showLoading\", function () {\n      _this.setState({\n        loading: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hideLoading\", function () {\n      _this.setState({\n        loading: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCancel\", function () {\n      _this.props.clearModifyId();\n\n      _this.hidePop();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showPop\", function () {\n      _this.setState({\n        visible: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hidePop\", function () {\n      _this.setState({\n        visible: false,\n        loading: false,\n        selectedCategory: null,\n        selectedCourse: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getCategory\", function (_categoryArray, option) {\n      _this.setState({\n        selectedCategory: option,\n        selectedCourse: undefined // 改变课程分类时清空已选择课程\n\n      }, function () {\n        _this.validateAction('category');\n\n        _this.validateAction('course');\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeCourse\", function (value) {\n      _this.setState({\n        selectedCourse: value\n      }, _this.validateAction.bind(_assertThisInitialized(_this), 'course'));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOk\", function () {\n      _this.props.form.validateFieldsAndScroll({\n        force: true\n      }, function (err) {\n        if (!err) {\n          var _this$state = _this.state,\n              selectedCategory = _this$state.selectedCategory,\n              selectedCourse = _this$state.selectedCourse;\n\n          _this.props.onConfirm(selectedCategory, selectedCourse);\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"validateAction\", function (field) {\n      _this.props.form.validateFields([field], {\n        force: true\n      }, function (_err) {\n        return;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"validateCategory\", function (_rule, _value, callback) {\n      var selectedCategory = _this.state.selectedCategory;\n\n      if (selectedCategory && selectedCategory.status && selectedCategory.status.key !== 'ONLINE') {\n        _this.setState({\n          disabled: true\n        });\n\n        callback('只可以选择已上线的分类');\n      } else {\n        _this.setState({\n          disabled: false\n        });\n      }\n\n      callback();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"validateCourse\", function (_rule, _value, callback) {\n      var _this$state2 = _this.state,\n          selectedCategory = _this$state2.selectedCategory,\n          selectedCourse = _this$state2.selectedCourse;\n\n      if (selectedCourse) {\n        var key = selectedCourse.status.key;\n\n        if (key !== 'ONLINE') {\n          if (selectedCategory.type.key === 'SUBSCRIPTION_COURSE') {\n            _this.setState({\n              disabled: true\n            });\n          }\n\n          callback('只可以选择已上线的课程');\n          return;\n        }\n\n        if (selectedCategory.type.key === 'SUBSCRIPTION_COURSE') {\n          var courses = _this.props.courses; // 筛选出列表中订阅课的id\n\n          var courseIds = courses.filter(function (course) {\n            return course.type.key === 'SUBSCRIPTION_COURSE';\n          }).map(function (course) {\n            return course.subscriptionCourse.id;\n          });\n\n          if (courseIds.includes(selectedCourse.id)) {\n            _this.setState({\n              disabled: true\n            });\n\n            callback(React.createElement(\"p\", {\n              style: {\n                margin: '1em 0 0 0'\n              }\n            }, \"\\u8FD9\\u4E2A\\u5B66\\u4E60\\u8BA1\\u5212\\u9636\\u6BB5\\u5185\\u5DF2\\u7ECF\\u6709\\u8BE5\\u8BFE\\u7A0B\\u4E86\\uFF0C\\u65E0\\u9700\\u91CD\\u590D\\u6DFB\\u52A0\"));\n            return;\n          }\n        }\n\n        _this.setState({\n          disabled: false\n        });\n      }\n\n      callback();\n    });\n\n    _this.state = {\n      visible: false,\n      loading: false,\n      disabled: false,\n      selectedCategory: null,\n      selectedCourse: null\n    };\n    return _this;\n  }\n\n  _createClass(ModuleForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          type = _this$props.type,\n          mode = _this$props.mode;\n      var _this$state3 = this.state,\n          selectedCategory = _this$state3.selectedCategory,\n          loading = _this$state3.loading,\n          selectedCourse = _this$state3.selectedCourse,\n          disabled = _this$state3.disabled,\n          visible = _this$state3.visible;\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      var typeName;\n\n      if (type === 'PRIVATE_COURSE') {\n        typeName = '1对1辅导';\n      }\n\n      if (type === 'GROUP_COURSE') {\n        typeName = '小班课';\n      }\n\n      if (type === 'SUBSCRIPTION_COURSE') {\n        typeName = '订阅课程';\n      }\n\n      if (visible) {\n        return React.createElement(_Modal, {\n          title: \"\".concat(mode === 'connect' ? '关联' : '修改').concat(typeName),\n          visible: visible,\n          onOk: this.handleOk,\n          onCancel: this.handleCancel,\n          closable: false,\n          okText: \"\\u5B8C\\u6210\",\n          cancelText: \"\\u53D6\\u6D88\",\n          bodyStyle: {\n            flexDirection: 'column'\n          },\n          destroyOnClose: true,\n          okButtonProps: {\n            disabled: !selectedCategory || type === 'SUBSCRIPTION_COURSE' && !selectedCourse || disabled,\n            loading: loading\n          },\n          maskClosable: false\n        }, React.createElement(_Form, null, React.createElement(_Form.Item, {\n          style: InlineStyle.FormItem,\n          label: \"\\u8BFE\\u7A0B\\u5206\\u7C7B\",\n          required: true,\n          colon: false\n        }, getFieldDecorator('category', {\n          rules: [{\n            validator: this.validateCategory\n          }]\n        })(React.createElement(SelectWrapper, null, visible && React.createElement(SelectCourseCategories, {\n          serviceTypeKey: type,\n          getValue: this.getCategory\n        })))), React.createElement(_Form.Item, {\n          style: InlineStyle.FormItem,\n          label: type === 'SUBSCRIPTION_COURSE' ? '课程' : '建议课程',\n          required: type === 'SUBSCRIPTION_COURSE',\n          colon: false\n        }, getFieldDecorator('course', {\n          rules: [{\n            validator: this.validateCourse\n          }]\n        })(React.createElement(SelectWrapper, null, selectedCategory && React.createElement(SelectCourse, {\n          type: type,\n          getValue: this.onChangeCourse,\n          categoryId: selectedCategory.id,\n          value: selectedCourse\n        }), !selectedCategory && React.createElement(_Select, {\n          disabled: true,\n          placeholder: \"\\u8BF7\\u5148\\u9009\\u62E9\\u8BFE\\u7A0B\\u5206\\u7C7B\",\n          style: {\n            flex: 1\n          }\n        }))))));\n      }\n\n      return null;\n    }\n  }]);\n\n  return ModuleForm;\n}(React.Component);\n\nvar ConnectPop = _Form.create()(ModuleForm);\n\nexport default ConnectPop;\nvar SelectWrapper = styled.div.withConfig({\n  displayName: \"ConnectPop__SelectWrapper\",\n  componentId: \"l3hdkw-0\"\n})([\"display:flex;\"]);\nvar InlineStyle = {\n  FormItem: {\n    width: '100%',\n    marginBottom: '24px'\n  }\n};","map":null,"metadata":{},"sourceType":"module"}