{"ast":null,"code":"import _Object$keys2 from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport React from \"react\";\nimport groupBy from 'lodash/groupBy'; // 把 groupBy 后的公司数据处理成级联的 options 结构\n\nexport var formatToOptions = function formatToOptions(data) {\n  var result = [];\n\n  for (var _i = 0, _Object$keys = _Object$keys2(data); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n\n    if (key) {\n      result.push({\n        value: key,\n        label: key,\n        children: data[key]\n      });\n    }\n  }\n\n  result.forEach(function (category) {\n    if (category.children) {\n      category.children = category.children.map(function (v) {\n        var id = v.id,\n            name = v.name;\n        return _objectSpread({\n          label: name,\n          value: id\n        }, v);\n      });\n    }\n  });\n  return result;\n}; // 分组数据并处理成 options\n\nexport var groupAndFormat = function groupAndFormat(data, groupFunction) {\n  var groupedData = groupBy(data, groupFunction);\n  return formatToOptions(groupedData);\n}; // 实现需求: 点击选项后, 不填充输入框, 只展示文案\n\nexport var emptyCascaderRender = function emptyCascaderRender(txt) {\n  var txtStyle = {\n    color: 'rgba(0, 0, 0, 0.25)'\n  };\n  return React.createElement(\"span\", {\n    style: txtStyle\n  }, txt);\n};\nexport var byIndustry = function byIndustry(v) {\n  return v.industry;\n}; // 传入已选择公司数组, 返回每种分类的个数\n\nexport var countCompany = function countCompany(selectedCompanyArray) {\n  var groupedData = groupBy(selectedCompanyArray, byIndustry);\n\n  for (var _i2 = 0, _Object$keys3 = _Object$keys2(groupedData); _i2 < _Object$keys3.length; _i2++) {\n    var key = _Object$keys3[_i2];\n\n    if (key) {\n      groupedData[key] = groupedData[key].length;\n    }\n  }\n\n  return groupedData;\n}; // 根据已选的 companyLevel 和 selectedCompanyArray 判断是否可以继续加入 company\n\nexport var companyAddable = function companyAddable(selectedCompany, selectedCompanyArray, selectedCompanyLevel) {\n  var mainExclusionCount = selectedCompanyLevel.mainExclusionCount,\n      subExclusions = selectedCompanyLevel.subExclusions;\n\n  if (subExclusions.length !== 0) {\n    // 有二级分类\n    // 如果是全分类限制\n    if (subExclusions[0].industry === '*') {\n      var maxCount = subExclusions[0].count; // 数量上限\n\n      var companyCounts = countCompany(selectedCompanyArray);\n\n      if (companyCounts[selectedCompany.industry] === maxCount) {\n        return false;\n      }\n    } else {\n      var toLimit = false;\n      subExclusions.forEach(function (subExclusion) {\n        var maxCount = subExclusion.count,\n            industry = subExclusion.industry; // 如果选择的公司, 在剔除分类中\n\n        if (selectedCompany.industry === industry) {\n          var _companyCounts = countCompany(selectedCompanyArray); // 判断是否达到上限\n\n\n          if (_companyCounts[selectedCompany.industry] === maxCount) {\n            toLimit = true;\n          }\n        }\n      });\n\n      if (toLimit) {\n        return false;\n      }\n    }\n  } else if (selectedCompanyArray.length === mainExclusionCount) {\n    // 如果没有二级分类, 且达到最大分类, 无法加入\n    return false;\n  }\n\n  return true;\n};","map":null,"metadata":{},"sourceType":"module"}