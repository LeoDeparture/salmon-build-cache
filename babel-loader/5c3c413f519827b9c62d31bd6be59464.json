{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/avatar/style\";\nimport _Avatar from \"antd/lib/avatar\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { FlexDisplay } from '../../../lib/commonCss';\nimport Footer from './Footer';\nvar Dropdown = styled.div.withConfig({\n  displayName: \"UserManagementTable__Dropdown\",\n  componentId: \"sc-14sd19t-0\"\n})([\"padding:8px;background:#fff;border-radius:6px;box-shadow:0 1px 6px rgba(0,0,0,0.2);\"]); // tslint:disable:no-var-requires\n\nvar CallReminderContainer = styled.div.withConfig({\n  displayName: \"UserManagementTable__CallReminderContainer\",\n  componentId: \"sc-14sd19t-1\"\n})([\"display:flex;align-items:center;flex-direction:column;height:667px;background-image:url('/static/call/callImage.png');background-size:100% 100%;\"]);\nvar CallReminderMessageContainer = styled.div.withConfig({\n  displayName: \"UserManagementTable__CallReminderMessageContainer\",\n  componentId: \"sc-14sd19t-2\"\n})([\"display:flex;align-items:center;flex:1;flex-direction:column;width:100%;\"]);\nvar CallReminderImageContainer = styled.img.withConfig({\n  displayName: \"UserManagementTable__CallReminderImageContainer\",\n  componentId: \"sc-14sd19t-3\"\n})([\"display:flex;width:109px;height:109px;margin-top:75px;background-color:red;border-radius:100px;\"]);\nvar AMName = styled.div.withConfig({\n  displayName: \"UserManagementTable__AMName\",\n  componentId: \"sc-14sd19t-4\"\n})([\"width:100%;height:28px;margin-top:31px;font-size:20px;font-weight:500;line-height:28px;color:rgba(0,0,0,1);text-align:center;\"]);\nvar Tip = styled.div.withConfig({\n  displayName: \"UserManagementTable__Tip\",\n  componentId: \"sc-14sd19t-5\"\n})([\"width:100%;height:20px;margin-top:10px;font-size:14px;font-weight:400;line-height:20px;color:rgba(136,136,136,1);text-align:center;\"]);\nvar CallReminderTouchContainer = styled.div.withConfig({\n  displayName: \"UserManagementTable__CallReminderTouchContainer\",\n  componentId: \"sc-14sd19t-6\"\n})([\"display:flex;align-items:center;flex-direction:row;justify-content:space-around;width:100%;height:191px;background-color:#fff;\"]);\nvar CallReminderAnswerContainer = styled.div.withConfig({\n  displayName: \"UserManagementTable__CallReminderAnswerContainer\",\n  componentId: \"sc-14sd19t-7\"\n})([\"display:flex;align-items:center;flex-direction:column;justify-content:center;width:56px;height:100%;\"]);\nvar CallReminderAnswer = styled.img.withConfig({\n  displayName: \"UserManagementTable__CallReminderAnswer\",\n  componentId: \"sc-14sd19t-8\"\n})([\"width:56px;height:56px;margin-bottom:14px;\"]);\nvar CallReminderAnswerText = styled.div.withConfig({\n  displayName: \"UserManagementTable__CallReminderAnswerText\",\n  componentId: \"sc-14sd19t-9\"\n})([\"width:100%;height:16px;font-size:14px;line-height:16px;color:rgba(136,136,136,1);text-align:center;\"]);\nvar VideoCallContainer = styled.div.withConfig({\n  displayName: \"UserManagementTable__VideoCallContainer\",\n  componentId: \"sc-14sd19t-10\"\n})([\"position:relative;height:667px;\"]);\nvar MyVideoContainer = styled.div.withConfig({\n  displayName: \"UserManagementTable__MyVideoContainer\",\n  componentId: \"sc-14sd19t-11\"\n})([\"position:absolute;top:0;right:0;z-index:20;width:92px;height:144px;\"]);\nvar OtherVideoContainer = styled.div.withConfig({\n  displayName: \"UserManagementTable__OtherVideoContainer\",\n  componentId: \"sc-14sd19t-12\"\n})([\"position:absolute;top:0;right:0;z-index:2;width:100%;height:100%;\"]);\nvar VideoCallOperation = styled.div.withConfig({\n  displayName: \"UserManagementTable__VideoCallOperation\",\n  componentId: \"sc-14sd19t-13\"\n})([\"position:absolute;bottom:0;z-index:60;display:flex;align-items:center;flex-direction:row;justify-content:space-around;width:100%;height:191px;\"]);\nvar NoneAudio = styled.div.withConfig({\n  displayName: \"UserManagementTable__NoneAudio\",\n  componentId: \"sc-14sd19t-14\"\n})([\"width:0;height:0;\"]); // Types\n\nvar AgoraRTC;\nvar client;\nvar localStreamVideo;\nvar localStreamAudio;\n\nvar UserManagementTable =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UserManagementTable, _React$Component);\n\n  function UserManagementTable() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, UserManagementTable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UserManagementTable)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      appId: '48c0cacefdee4efbbb38a343c3d9e647',\n      audioModal: false,\n      keywords: {\n        id: '',\n        name: '',\n        nickname: '',\n        studentNo: ''\n      },\n      talking: false,\n      videoModal: false,\n      videoing: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"creatAudio\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(recordId, JPushId) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!JPushId) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 3;\n                return _this.props.SendJPush4CallStudent({\n                  variables: {\n                    input: {\n                      studentJPushRegistrationID: JPushId,\n                      studentID: recordId,\n                      type: 'audio'\n                    }\n                  }\n                });\n\n              case 3:\n                _context.next = 7;\n                break;\n\n              case 5:\n                _Modal.info({\n                  title: '无推送ID'\n                });\n\n                return _context.abrupt(\"return\", null);\n\n              case 7:\n                // 初始化 Client 对象\n                client.init(_this.state.appId, function () {\n                  // 加入频道\n                  client.join(null, recordId, null, function (uid) {\n                    console.log('声网服务器自动分配Uid', uid); // 创建音频流\n\n                    localStreamAudio = AgoraRTC.createStream({\n                      audio: true,\n                      screen: false,\n                      streamID: uid,\n                      video: false\n                    }); // 初始化音频流\n\n                    localStreamAudio.init(function () {\n                      console.log('getUserMedia successfully');\n                      localStreamAudio.play('myAudio'); // 发布本地音频流\n\n                      client.publish(localStreamAudio, function (err) {\n                        console.log('发布本地音频流失败: ' + err);\n                      });\n                      client.on('stream-published', function () {\n                        console.log('发布本地音频流成功');\n                      });\n                    }, function (err) {\n                      console.log('getUserMedia failed', err);\n                    }); // 订阅远端音频流\n\n                    var stream;\n                    var ListenAudio = setTimeout(function () {\n                      client.leave(function () {\n                        _Modal.info({\n                          title: '对方未响应通话',\n                          onOk: function onOk() {\n                            localStreamAudio.close();\n\n                            _this.setState({\n                              videoModal: false\n                            }, function () {\n                              location.reload();\n                            });\n                          }\n                        });\n                      }, function (err) {\n                        console.log('离开频道失败', err);\n                      });\n                    }, 30000);\n                    client.on('stream-added', function (evt) {\n                      stream = evt.stream;\n                      console.log('新的远端音频流添加成功: ' + stream.getId());\n                      clearTimeout(ListenAudio);\n\n                      _this.setState({\n                        talking: true\n                      });\n\n                      client.subscribe(stream, function (err) {\n                        console.log('订阅远端音频流失败', err);\n                      });\n                    });\n                    client.on('peer-leave', function () {\n                      client.leave(function () {\n                        _Modal.info({\n                          title: '对方终止此次对话',\n                          onOk: function onOk() {\n                            _this.setState({\n                              videoModal: false\n                            }, function () {\n                              location.reload();\n                            });\n                          }\n                        });\n                      }, function (err) {\n                        console.log('离开频道失败', err);\n                      });\n                    });\n                    client.on('stream-subscribed', function (evt) {\n                      var remoteStream = evt.stream;\n                      console.log('Subscribe remote stream successfully: ' + stream.getId());\n                      remoteStream.play('otherAudio');\n                    });\n\n                    _this.setState({\n                      audioModal: true\n                    });\n                  }, function (err) {\n                    console.log('加入频道', err);\n                  });\n                }, function (err) {\n                  console.log('初始化 Client 失败 ', err);\n                });\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"stopAudio\", function () {\n      client.leave(function () {\n        console.log('离开频道成功');\n\n        _this.setState({\n          audioModal: false\n        }, function () {\n          location.reload();\n        });\n      }, function (err) {\n        console.log('离开频道失败', err);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"creatVideo\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(recordId, JPushId) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!JPushId) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                _context2.next = 3;\n                return _this.props.SendJPush4CallStudent({\n                  variables: {\n                    input: {\n                      studentJPushRegistrationID: JPushId,\n                      studentID: recordId,\n                      type: 'video'\n                    }\n                  }\n                });\n\n              case 3:\n                _context2.next = 7;\n                break;\n\n              case 5:\n                _Modal.info({\n                  title: '无推送ID'\n                });\n\n                return _context2.abrupt(\"return\", null);\n\n              case 7:\n                _this.setState({\n                  videoModal: true\n                }); // 初始化 Client 对象\n\n\n                client.init(_this.state.appId, function () {\n                  // 加入频道\n                  client.join(null, recordId, null, function (uid) {\n                    console.log('声网服务器自动分配Uid', uid); // 创建音频流\n\n                    localStreamVideo = AgoraRTC.createStream({\n                      audio: true,\n                      screen: false,\n                      streamID: uid,\n                      video: true\n                    }); // 初始化音频流\n\n                    localStreamVideo.init( // tslint:disable-next-line:no-identical-functions\n                    function () {\n                      _this.setState({\n                        videoing: true\n                      });\n\n                      console.log('getUserMedia successfully');\n                      localStreamVideo.play('myVideo'); // 发布本地音频流\n\n                      client.publish(localStreamVideo, function (err) {\n                        console.log('发布本地音频流失败: ' + err);\n                      });\n                      client.on('stream-published', function () {\n                        console.log('发布本地音频流成功');\n                      });\n                    }, function (err) {\n                      console.log('getUserMedia failed', err);\n                    }); // 订阅远端音频流\n\n                    var stream; // 30秒 没有人进入自动关闭\n\n                    var Listen = setTimeout(function () {\n                      client.leave(function () {\n                        _Modal.info({\n                          title: '对方未响应通话',\n                          onOk: function onOk() {\n                            localStreamVideo.close();\n\n                            _this.setState({\n                              videoModal: false\n                            }, function () {\n                              location.reload();\n                            });\n                          }\n                        });\n                      }, function (err) {\n                        console.log('离开频道失败', err);\n                      });\n                    }, 30000);\n                    client.on('stream-added', function (evt) {\n                      stream = evt.stream;\n                      console.log('新的远端频流添加成功');\n                      clearTimeout(Listen);\n                      client.subscribe(stream, function (err) {\n                        console.log('订阅远端音频流失败', err);\n                      });\n                    }); // tslint:disable-next-line:no-identical-functions\n\n                    client.on('stream-subscribed', function (evt) {\n                      var remoteStream = evt.stream;\n                      console.log('Subscribe remote stream successfully: ' + stream.getId());\n                      remoteStream.play('otherVideo');\n                    }); // tslint:disable:no-identical-functions\n\n                    client.on('peer-leave', function () {\n                      client.leave(function () {\n                        _Modal.info({\n                          title: '对方终止此次对话',\n                          onOk: function onOk() {\n                            localStreamVideo.close();\n\n                            _this.setState({\n                              videoModal: false\n                            }, function () {\n                              location.reload();\n                            });\n                          }\n                        });\n                      }, function (err) {\n                        console.log('离开频道失败', err);\n                      });\n                    });\n                  }, function (err) {\n                    console.log('加入频道', err);\n                  });\n                }, function (err) {\n                  console.log('初始化 Client 失败 ', err);\n                });\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"stopVideo\", function () {\n      client.leave(function () {\n        console.log('离开频道成功');\n        localStreamVideo.close();\n\n        _this.setState({\n          videoModal: false\n        }, function () {\n          location.reload();\n        });\n      }, function (err) {\n        console.log('离开频道失败', err);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSearch\", function (confirm) {\n      // close dropdown\n      confirm(); // refetch data\n\n      var keywords = _objectSpread({}, _this.state.keywords);\n\n      _this.props.refetch(keywords);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleReset\", function (dataIndex, clearFilters) {\n      // clear keywords and refetch data\n      var keywords = _objectSpread({}, _this.state.keywords);\n\n      keywords[dataIndex] = '';\n\n      _this.setState({\n        keywords: keywords\n      });\n\n      _this.props.refetch(keywords);\n\n      clearFilters();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (dataIndex, e) {\n      var keywords = _objectSpread({}, _this.state.keywords);\n\n      keywords[dataIndex] = e.target.value;\n\n      _this.setState({\n        keywords: keywords\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"filterDropdown\", function (dataIndex, title, funcs) {\n      var confirm = funcs.confirm,\n          clearFilters = funcs.clearFilters;\n      var placeholderText = \"\\u641C\\u7D22\".concat(title);\n      return React.createElement(Dropdown, null, React.createElement(_Input, {\n        style: {\n          width: 130,\n          marginRight: 8\n        },\n        placeholder: placeholderText,\n        value: _this.state.keywords[dataIndex],\n        onChange: _this.handleChange.bind(_assertThisInitialized(_this), dataIndex),\n        onPressEnter: _this.handleSearch.bind(_assertThisInitialized(_this), confirm)\n      }), React.createElement(_Button, {\n        type: \"primary\",\n        onClick: _this.handleSearch.bind(_assertThisInitialized(_this), confirm)\n      }, \"\\u641C\\u7D22\"), React.createElement(_Button, {\n        style: {\n          marginLeft: 8\n        },\n        onClick: _this.handleReset.bind(_assertThisInitialized(_this), dataIndex, clearFilters)\n      }, \"\\u91CD\\u7F6E\"));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderOperating\", function (_, record) {\n      return React.createElement(React.Fragment, null, React.createElement(\"a\", {\n        onClick: _this.creatAudio.bind(_assertThisInitialized(_this), record.id, record.jpushId)\n      }, \"\\u8BED\\u97F3\\u901A\\u8BDD\"));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderStudent\", function (_, record) {\n      return React.createElement(FlexDisplay, {\n        style: {\n          alignItems: 'center'\n        }\n      }, React.createElement(_Avatar, {\n        size: 28,\n        icon: \"user\",\n        src: record.avatar\n      }), React.createElement(\"div\", {\n        style: {\n          fontSize: '14px',\n          marginLeft: '8px'\n        }\n      }, record.nickname));\n    });\n\n    return _this;\n  }\n\n  _createClass(UserManagementTable, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return require('agora-rtc-sdk');\n\n              case 2:\n                AgoraRTC = _context3.sent;\n                client = AgoraRTC.createClient({\n                  mode: 'live',\n                  codec: 'h264'\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // return filter icon\n      var filterIconFunc = function filterIconFunc(dataIndex) {\n        return React.createElement(_Icon, {\n          type: \"search\" // if keyword exist, highlight icon\n          ,\n          style: {\n            color: _this2.state.keywords[dataIndex] ? '#108ee9' : '#aaa'\n          }\n        });\n      }; // header data of table\n\n\n      var headerData = [['studentNo', 'ID'], ['nickname', '学员'], ['name', '姓名'], ['createdAt', '注册日期'], ['operating', '操作']];\n      var columns = [];\n      headerData.forEach(function (v) {\n        var _v = _slicedToArray(v, 2),\n            dataIndex = _v[0],\n            title = _v[1];\n\n        var item = {\n          dataIndex: dataIndex,\n          key: dataIndex,\n          title: title\n        }; // row with keyword filter\n\n        if (dataIndex === 'studentNo' || dataIndex === 'name' || dataIndex === 'nickname') {\n          var searchObj = {\n            filterDropdown: _this2.filterDropdown.bind(_this2, dataIndex, title),\n            filterIcon: filterIconFunc.bind(_this2, dataIndex)\n          };\n\n          _Object$assign(item, searchObj);\n        } // 头像或者昵称\n\n\n        if (dataIndex === 'nickname') {\n          _Object$assign(item, {\n            render: _this2.renderStudent\n          });\n        } // row with operating\n\n\n        if (dataIndex === 'operating') {\n          _Object$assign(item, {\n            render: _this2.renderOperating\n          });\n        }\n\n        columns.push(item);\n      }); // dynamic footer\n\n      var renderFooter = function renderFooter() {\n        return React.createElement(Footer, {\n          onClickLink: _this2.props.onClick,\n          isLoading: _this2.props.loading\n        });\n      };\n\n      var dropBlock = React.createElement(CallReminderAnswerContainer, {\n        onClick: this.stopAudio\n      }, React.createElement(CallReminderAnswer, {\n        src: '/static/call/dropped.png'\n      }), React.createElement(CallReminderAnswerText, null, \"\\u6302\\u65AD\"));\n      return React.createElement(FlexDisplay, {\n        style: {\n          padding: '24px'\n        }\n      }, React.createElement(_Table, {\n        columns: columns,\n        dataSource: this.props.dataSource,\n        footer: this.props.footerIsShow ? renderFooter : undefined,\n        pagination: false,\n        locale: {\n          emptyText: '暂无用户数据'\n        },\n        style: {\n          flex: 1\n        }\n      }), React.createElement(_Modal, {\n        footer: null,\n        visible: this.state.audioModal,\n        closable: false\n      }, React.createElement(CallReminderContainer, null, React.createElement(CallReminderMessageContainer, null, React.createElement(CallReminderImageContainer, {\n        src: '/static/call/userImg.png'\n      }), React.createElement(AMName, null, \"\\u89C4\\u5212\\u5E08\"), !this.state.talking ? React.createElement(Tip, null, \"\\u6B63\\u5728\\u7B49\\u5F85\\u5BF9\\u65B9\\u63A5\\u53D7\\u9080\\u8BF7\\u2026\") : React.createElement(Tip, null, \"\\u901A\\u8BDD\\u4E2D\\u3002\\u3002\\u3002\"), React.createElement(NoneAudio, {\n        id: \"myAudio\"\n      }), React.createElement(NoneAudio, {\n        id: \"otherAudio\"\n      })), React.createElement(CallReminderTouchContainer, null, dropBlock))), React.createElement(_Modal, {\n        footer: null,\n        visible: this.state.videoModal,\n        closable: false\n      }, !this.state.videoing ? React.createElement(CallReminderContainer, null, React.createElement(CallReminderMessageContainer, null, React.createElement(CallReminderImageContainer, {\n        src: '/static/call/userImg.png'\n      }), React.createElement(AMName, null, \"\\u89C4\\u5212\\u5E08\"), React.createElement(Tip, {\n        id: \"videoId2\"\n      }, \"\\u6B63\\u5728\\u7B49\\u5F85\\u5BF9\\u65B9\\u63A5\\u53D7\\u9080\\u8BF7\\u2026\")), React.createElement(CallReminderTouchContainer, null, dropBlock)) : React.createElement(VideoCallContainer, null, React.createElement(MyVideoContainer, {\n        id: \"myVideo\"\n      }), React.createElement(OtherVideoContainer, {\n        id: \"otherVideo\"\n      }), React.createElement(VideoCallOperation, null, dropBlock))));\n    }\n  }]);\n\n  return UserManagementTable;\n}(React.Component);\n\nexport { UserManagementTable as default };","map":null,"metadata":{},"sourceType":"module"}