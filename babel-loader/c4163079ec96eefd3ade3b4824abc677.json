{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from 'react';\nimport Loading from '../../../components/Loading';\nimport FolderList from '../components/FolderList';\nimport ListAllFolders, { query as QueryListAllFolders } from './QueryListAllFolders';\n\nvar FolderListContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FolderListContainer, _React$Component);\n\n  function FolderListContainer() {\n    _classCallCheck(this, FolderListContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FolderListContainer).apply(this, arguments));\n  }\n\n  _createClass(FolderListContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.onRef(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          keyword = _this$props.keyword,\n          storeFolderId = _this$props.storeFolderId,\n          selectedFolderId = _this$props.selectedFolderId;\n      var ListAllFoldersInput = {\n        input: {}\n      };\n      return React.createElement(ListAllFolders, {\n        query: QueryListAllFolders,\n        variables: ListAllFoldersInput,\n        notifyOnNetworkStatusChange: true,\n        onCompleted: this.props.stopLoading\n      }, function (_ref) {\n        var data = _ref.data,\n            loading = _ref.loading,\n            error = _ref.error,\n            refetch = _ref.refetch,\n            networkStatus = _ref.networkStatus;\n\n        if (loading || networkStatus === 4) {\n          return React.createElement(Loading, null);\n        }\n\n        if (error) {\n          return null;\n        }\n\n        _this.refetch = refetch;\n        var folderData = data.folders.edges.map(function (v) {\n          return v.node;\n        });\n        return React.createElement(FolderList, {\n          keyword: keyword,\n          folderData: folderData,\n          storeFolderId: storeFolderId,\n          selectedFolderId: selectedFolderId\n        });\n      });\n    }\n  }]);\n\n  return FolderListContainer;\n}(React.Component);\n\nexport default FolderListContainer;","map":null,"metadata":{},"sourceType":"module"}