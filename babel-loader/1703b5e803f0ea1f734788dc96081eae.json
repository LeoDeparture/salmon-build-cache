{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport CONFIG from '../../lib/config';\nimport JumpLink from '../JumpLink';\n\nvar InlineAccountInfo =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(InlineAccountInfo, _Component);\n\n  function InlineAccountInfo() {\n    _classCallCheck(this, InlineAccountInfo);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(InlineAccountInfo).apply(this, arguments));\n  }\n\n  _createClass(InlineAccountInfo, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          url = _this$props.url,\n          account = _this$props.account,\n          size = _this$props.size;\n      if (!account) return null;\n      var _account$person = account.person,\n          name = _account$person.name,\n          nickname = _account$person.nickname,\n          avatar = _account$person.avatar;\n      var text = \"\".concat(name || '- -', \"\\u4E28\").concat(nickname || '- -'); // 增加 a 标签\n\n      var withAnchor = function withAnchor(children) {\n        return React.createElement(JumpLink, {\n          url: url,\n          text: children,\n          permission: \"\\u7528\\u6237\\u7BA1\\u7406\"\n        });\n      };\n\n      var avatarStyles;\n      var textStyles;\n\n      switch (size) {\n        case 'small':\n          avatarStyles = smallAvatarStyle;\n          textStyles = normalTextStyle;\n          break;\n\n        case 'large':\n          avatarStyles = largeAvatarStyle;\n          textStyles = largeTextStyle;\n          break;\n\n        default:\n          avatarStyles = normalAvatarStyle;\n          textStyles = normalTextStyle;\n          break;\n      }\n\n      return React.createElement(MainWrapper, null, React.createElement(\"img\", {\n        style: avatarStyles,\n        className: size,\n        src: avatar || CONFIG.default.newAvatar\n      }), React.createElement(\"span\", {\n        className: \"account-info-text\",\n        style: textStyles\n      }, url ? withAnchor(text) : text));\n    }\n  }]);\n\n  return InlineAccountInfo;\n}(Component);\n\n_defineProperty(InlineAccountInfo, \"defaultProps\", {\n  size: 'normal'\n});\n\nexport { InlineAccountInfo as default };\nvar MainWrapper = styled.div.withConfig({\n  displayName: \"InlineAccountInfo__MainWrapper\",\n  componentId: \"sc-4rhonj-0\"\n})([\"display:flex;align-items:center;\"]);\nvar avatarStyle = {\n  borderRadius: '50%'\n};\n\nvar smallAvatarStyle = _objectSpread({}, avatarStyle, {\n  width: '20px',\n  height: '20px',\n  lineHeight: '28px'\n});\n\nvar normalAvatarStyle = _objectSpread({}, avatarStyle, {\n  width: '28px',\n  height: '28px',\n  lineHeight: '28px'\n});\n\nvar largeAvatarStyle = {\n  width: '36px',\n  height: '36px',\n  lineHeight: '36px'\n};\nvar textStyle = {\n  display: 'block',\n  flex: 1,\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap',\n  marginLeft: '8px',\n  verticalAlign: 'middle'\n};\n\nvar normalTextStyle = _objectSpread({}, textStyle, {\n  fontSize: '14px',\n  lineHeight: '28px'\n});\n\nvar largeTextStyle = _objectSpread({}, textStyle, {\n  fontSize: '16px',\n  fontWeight: 'bold',\n  lineHeight: '36px'\n});","map":null,"metadata":{},"sourceType":"module"}