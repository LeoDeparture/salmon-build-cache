{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport Loading from '../../../../components/Loading';\nimport TableFooter from '../../../../components/Table/TableFooter';\nimport { FlexContentCenter } from '../../../../lib/commonCss';\nimport { parseErrorCode } from '../../../../lib/commonJs';\nimport { utc2Asia, yyyymmdd } from '../../../../lib/date';\nimport { handleCommonErr } from '../../commonErrFunc';\nimport { SubscriptionCourseSeriesTable } from '../components/SubscriptionCourseSeriesTable';\nimport ListSubscriptionCourseSeriesesWithPaginationQuery, { listSubscriptionCourseSeriesesWithPagination } from './ListSubscriptionCourseSeriesWithPaginationQuery';\nimport { disableSubscriptionCourseSeriesMutation, enableSubscriptionCourseSeriesMutation, removeSubscriptionCourseSeriesMutation } from './StatusMutation';\nvar getDataNumber = 20;\n\nvar ListSubscriptionCourseSeriesesContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ListSubscriptionCourseSeriesesContainer, _React$Component);\n\n  function ListSubscriptionCourseSeriesesContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ListSubscriptionCourseSeriesesContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ListSubscriptionCourseSeriesesContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loading: false,\n      pageInfo: {\n        endCursor: '',\n        hasNextPage: true,\n        startCursor: ''\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"enableSubscriptionCourseSeries\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(id) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.client.mutate({\n                  mutation: enableSubscriptionCourseSeriesMutation,\n                  update: function update(cache, _ref2) {\n                    var data = _ref2.data;\n                    var listCache = cache.readQuery({\n                      query: listSubscriptionCourseSeriesesWithPagination,\n                      variables: {\n                        input: {\n                          first: getDataNumber,\n                          orderBy: 'startAt_ASC',\n                          where: {\n                            courseProduct: {\n                              id: _this.props.subCourseId\n                            },\n                            status: {\n                              key_not: 'REMOVED'\n                            }\n                          }\n                        }\n                      }\n                    });\n                    var newData = listCache.listSubscriptionCourseSeriesesWithPagination.edges.map(function (record) {\n                      if (record.node.id === id) {\n                        record.node = data.enableSubscriptionCourseSeries;\n                      }\n\n                      return record;\n                    });\n                    listCache.listSubscriptionCourseSeriesesWithPagination.edges = newData;\n                    cache.writeQuery({\n                      data: {\n                        listSubscriptionCourseSeriesesWithPagination: listCache.listSubscriptionCourseSeriesesWithPagination\n                      },\n                      query: listSubscriptionCourseSeriesesWithPagination,\n                      variables: {\n                        input: {\n                          first: getDataNumber,\n                          orderBy: 'startAt_ASC',\n                          where: {\n                            courseProduct: {\n                              id: _this.props.subCourseId\n                            },\n                            status: {\n                              key_not: 'REMOVED'\n                            }\n                          }\n                        }\n                      }\n                    });\n                  },\n                  variables: {\n                    input: {\n                      id: id\n                    }\n                  }\n                }).then(function (_) {\n                  _message.success('已成功上线此课程周期');\n                }).catch(function (err) {\n                  handleCommonErr(err);\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"disableSubscriptionCourseSeriesMutation\",\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(id) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.client.mutate({\n                  mutation: disableSubscriptionCourseSeriesMutation,\n                  update: function update(cache, _ref4) {\n                    var data = _ref4.data;\n                    var listCache = cache.readQuery({\n                      query: listSubscriptionCourseSeriesesWithPagination,\n                      variables: {\n                        input: {\n                          first: getDataNumber,\n                          orderBy: 'startAt_ASC',\n                          where: {\n                            courseProduct: {\n                              id: _this.props.subCourseId\n                            },\n                            status: {\n                              key_not: 'REMOVED'\n                            }\n                          }\n                        }\n                      }\n                    });\n                    var newData = listCache.listSubscriptionCourseSeriesesWithPagination.edges.map(function (record) {\n                      if (record.node.id === id) {\n                        record.node = data.disableSubscriptionCourseSeries;\n                      }\n\n                      return record;\n                    });\n                    listCache.listSubscriptionCourseSeriesesWithPagination.edges = newData;\n                    cache.writeQuery({\n                      data: {\n                        listSubscriptionCourseSeriesesWithPagination: listCache.listSubscriptionCourseSeriesesWithPagination\n                      },\n                      query: listSubscriptionCourseSeriesesWithPagination,\n                      variables: {\n                        input: {\n                          first: getDataNumber,\n                          orderBy: 'startAt_ASC',\n                          where: {\n                            courseProduct: {\n                              id: _this.props.subCourseId\n                            },\n                            status: {\n                              key_not: 'REMOVED'\n                            }\n                          }\n                        }\n                      }\n                    });\n                  },\n                  variables: {\n                    input: {\n                      id: id\n                    }\n                  }\n                }).then(function (_) {\n                  _message.success('已成功下线此课程周期');\n                }).catch(function (err) {\n                  handleCommonErr(err);\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"removeSubscriptionCourseSeriesMutation\",\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(id) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _this.client.mutate({\n                  mutation: removeSubscriptionCourseSeriesMutation,\n                  update: function update(cache, _) {\n                    var listCache = cache.readQuery({\n                      query: listSubscriptionCourseSeriesesWithPagination,\n                      variables: {\n                        input: {\n                          first: getDataNumber,\n                          orderBy: 'startAt_ASC',\n                          where: {\n                            courseProduct: {\n                              id: _this.props.subCourseId\n                            },\n                            status: {\n                              key_not: 'REMOVED'\n                            }\n                          }\n                        }\n                      }\n                    });\n                    var newData = listCache.listSubscriptionCourseSeriesesWithPagination.edges.filter(function (record) {\n                      return record.node.id !== id;\n                    });\n                    listCache.listSubscriptionCourseSeriesesWithPagination.edges = newData;\n                    cache.writeQuery({\n                      data: {\n                        listSubscriptionCourseSeriesesWithPagination: listCache.listSubscriptionCourseSeriesesWithPagination\n                      },\n                      query: listSubscriptionCourseSeriesesWithPagination,\n                      variables: {\n                        input: {\n                          first: getDataNumber,\n                          orderBy: 'startAt_ASC',\n                          where: {\n                            courseProduct: {\n                              id: _this.props.subCourseId\n                            },\n                            status: {\n                              key_not: 'REMOVED'\n                            }\n                          }\n                        }\n                      }\n                    });\n                  },\n                  variables: {\n                    input: {\n                      id: id\n                    }\n                  }\n                }).then(function (_) {\n                  _message.success('已成功移除此课程周期');\n                }).catch(function (err) {\n                  if (parseErrorCode(err) === 'SubscriberExist') {\n                    _Modal.warning({\n                      icon: React.createElement(_Icon, {\n                        type: \"exclamation-circle\",\n                        style: {\n                          color: 'orange'\n                        },\n                        theme: \"filled\"\n                      }),\n                      content: '此周期已有订阅用户，暂时无法移除此周期。',\n                      okText: '我知道了',\n                      title: '无法移除此周期'\n                    });\n                  } else {\n                    handleCommonErr(err);\n                  }\n                });\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"flatDataAndStoreCursor\", function (data) {\n      var coreData = data.listSubscriptionCourseSeriesesWithPagination;\n      return coreData.edges.map(function (d) {\n        var row = d.node;\n        return {\n          id: row.id,\n          key: row.id,\n          name: row.name,\n          duration: \"\".concat(yyyymmdd(utc2Asia(row.startAt), 'YYYY/MM/DD'), \" ~ \").concat(yyyymmdd(utc2Asia(row.endAt), 'YYYY/MM/DD')),\n          subscribersAmount: row.records.filter(function (record) {\n            return !record.isDeleted;\n          }).length,\n          chaptersAmount: row.chapters.filter(function (chapter) {\n            return !chapter.isDeleted;\n          }).length,\n          status: row.status.name,\n          operation: '选择操作',\n          questionBank: row.questionBank,\n          startAt: row.startAt,\n          endAt: row.endAt,\n          courseProductId: row.courseProduct.id,\n          pictureUrl: row.pictureUrl,\n          videoUrl: row.videoUrl,\n          courseContentPicUrl: row.courseContentPicUrl,\n          courseHighlights: row.courseHighlights,\n          description: row.description,\n          suitableCrowd: row.suitableCrowd,\n          tutorIntroduction: row.tutorIntroduction,\n          tags: row.tags\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"countRecordAmount\", function (data) {\n      return data.listSubscriptionCourseSeriesesWithPagination.aggregate.count;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"requestCompleted\", function (data) {\n      var coreData = data.listSubscriptionCourseSeriesesWithPagination;\n\n      _this.setState({\n        pageInfo: {\n          endCursor: coreData.pageInfo.endCursor,\n          hasNextPage: coreData.pageInfo.hasNextPage,\n          startCursor: coreData.pageInfo.startCursor\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleQueryMore\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _this.setState({\n                loading: true\n              });\n\n              if (!_this.state.loading) {\n                _context4.next = 3;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 3:\n              if (!_this.state.pageInfo.hasNextPage) {\n                _context4.next = 6;\n                break;\n              }\n\n              _context4.next = 6;\n              return _this.fetchMore({\n                updateQuery: function updateQuery(prev, _ref7) {\n                  var fetchMoreResult = _ref7.fetchMoreResult;\n\n                  if (!fetchMoreResult) {\n                    return prev;\n                  }\n\n                  var prevData = prev.listSubscriptionCourseSeriesesWithPagination.edges;\n                  var fetchResult = fetchMoreResult.listSubscriptionCourseSeriesesWithPagination.edges;\n                  fetchMoreResult.listSubscriptionCourseSeriesesWithPagination.edges = [].concat(_toConsumableArray(prevData), _toConsumableArray(fetchResult));\n                  return fetchMoreResult;\n                },\n                variables: {\n                  input: {\n                    after: _this.state.pageInfo.endCursor,\n                    first: getDataNumber,\n                    orderBy: 'startAt_ASC',\n                    where: {\n                      courseProduct: {\n                        id: _this.props.subCourseId\n                      },\n                      status: {\n                        key_not: 'REMOVED'\n                      }\n                    }\n                  }\n                }\n              }).then(function (result) {\n                if (result.data && result.data.listSubscriptionCourseSeriesesWithPagination) {\n                  var pageInfo = result.data.listSubscriptionCourseSeriesesWithPagination.pageInfo;\n\n                  _this.setState({\n                    pageInfo: {\n                      endCursor: pageInfo.endCursor,\n                      hasNextPage: pageInfo.hasNextPage,\n                      startCursor: pageInfo.hasNextPage\n                    },\n                    loading: false\n                  });\n                }\n              }).catch(function () {\n                _message.error('加载失败');\n              });\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"renderFooter\", function () {\n      return _this.state.pageInfo.hasNextPage && React.createElement(TableFooter, {\n        isLoading: _this.state.loading,\n        onClickLink: _this.handleQueryMore\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"render\", function () {\n      return React.createElement(ListSubscriptionCourseSeriesesWithPaginationQuery, {\n        query: listSubscriptionCourseSeriesesWithPagination,\n        variables: {\n          input: {\n            first: getDataNumber,\n            orderBy: 'startAt_ASC',\n            where: {\n              courseProduct: {\n                id: _this.props.subCourseId\n              },\n              status: {\n                key_not: 'REMOVED'\n              }\n            }\n          }\n        },\n        onCompleted: _this.requestCompleted,\n        fetchPolicy: \"network-only\"\n      }, function (_ref8) {\n        var data = _ref8.data,\n            loading = _ref8.loading,\n            error = _ref8.error,\n            client = _ref8.client,\n            fetchMore = _ref8.fetchMore;\n\n        if (loading) {\n          return React.createElement(FlexContentCenter, null, React.createElement(Loading, null));\n        }\n\n        if (error) {\n          return null;\n        }\n\n        _this.client = client;\n        _this.fetchMore = fetchMore;\n        return React.createElement(SubscriptionCourseSeriesTable, {\n          enableMutation: _this.enableSubscriptionCourseSeries,\n          disableMutation: _this.disableSubscriptionCourseSeriesMutation,\n          removeMutation: _this.removeSubscriptionCourseSeriesMutation,\n          footer: _this.renderFooter,\n          listSubscriptionCourseSeriesData: _this.flatDataAndStoreCursor(data),\n          seriesAmount: _this.countRecordAmount(data),\n          subCourseId: _this.props.subCourseId,\n          switchPage: _this.props.switchPage,\n          setCurrentSeries: _this.props.setCurrentSeries\n        });\n      });\n    });\n\n    return _this;\n  }\n\n  return ListSubscriptionCourseSeriesesContainer;\n}(React.Component);\n\nexport { ListSubscriptionCourseSeriesesContainer };","map":null,"metadata":{},"sourceType":"module"}