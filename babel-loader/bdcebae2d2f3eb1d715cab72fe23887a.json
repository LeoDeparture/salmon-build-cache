{"ast":null,"code":"import \"antd/lib/cascader/style\";\nimport _Cascader from \"antd/lib/cascader\";\nimport \"antd/lib/spin/style\";\nimport _Spin from \"antd/lib/spin\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { format } from 'date-fns';\nimport ZnCn from 'date-fns/locale/zh_cn';\nimport React from 'react';\nimport { CommonPBlock, ContentP, FlexCenterColumn, FlexContent, FlexContentCenter, FlexDisplay } from '../../../lib/commonCss';\nimport QueryGetOperatorSlotsByStatus, { GetOperatorSlotsByStatus } from '../containers/QueryGetOperatorSlotsByStatus';\n\nvar optionsForDate = function optionsForDate(data, slotTime) {\n  var optionsArr = [];\n  data.getOperatorSlotsByStatus.forEach(function (v) {\n    var slotTimeValue = new Date(slotTime).valueOf();\n    var nextAbleTime = new Date().valueOf();\n    var vTimeValue = new Date(v.appointmentTime).valueOf(); // 判断v时间是不是大于当前时间\n    // 判断v是不是 = 卡片时间,\n\n    if (vTimeValue > nextAbleTime && vTimeValue !== slotTimeValue) {\n      var yymmddww = format(v.appointmentTime, 'YYYY/MM/DD ddd', {\n        locale: ZnCn\n      });\n      var hhmm = format(v.appointmentTime, 'HH:mm', {\n        locale: ZnCn\n      }); // 数组不为空，\n\n      if (optionsArr.length) {\n        var index = optionsArr.findIndex(function (m) {\n          return m.label === yymmddww;\n        }); // 当前时间已存在数组中，push数据\n\n        if (index >= 0) {\n          optionsArr[index].children.push({\n            label: hhmm,\n            value: v.appointmentTime\n          });\n          return;\n        } // 当前时间不在数组中， 创建一个新的根数据\n\n\n        optionsArr.push({\n          children: [{\n            label: hhmm,\n            value: v.appointmentTime\n          }],\n          label: yymmddww,\n          value: yymmddww\n        });\n        return;\n      } // 数组为空\n\n\n      optionsArr.push({\n        children: [{\n          label: hhmm,\n          value: v.appointmentTime\n        }],\n        label: yymmddww,\n        value: yymmddww\n      });\n    }\n  });\n  return optionsArr;\n};\n\nvar ModalAcceptAndChangeTime =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ModalAcceptAndChangeTime, _React$Component);\n\n  function ModalAcceptAndChangeTime() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ModalAcceptAndChangeTime);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ModalAcceptAndChangeTime)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (value) {\n      _this.props.getModalOperateData({\n        appointmentTime: value[1],\n        disableBut: !Boolean(value[1])\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ModalAcceptAndChangeTime, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // 重置数据\n      this.props.getModalOperateData({\n        cancellationMessage: null,\n        disableBut: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _JSON$parse = JSON.parse(localStorage.getItem('zhiwen_all_enum')),\n          listSlotStatusEnum = _JSON$parse.listSlotStatusEnum;\n\n      var availableId = listSlotStatusEnum.find(function (value) {\n        return value.name === '空闲';\n      });\n      var variables = {\n        input: {\n          statusId: availableId.id\n        }\n      };\n      var slotTime = this.props.slotTime;\n      return React.createElement(QueryGetOperatorSlotsByStatus, {\n        query: GetOperatorSlotsByStatus,\n        fetchPolicy: \"network-only\",\n        variables: variables\n      }, function (_ref) {\n        var loading = _ref.loading,\n            error = _ref.error,\n            data = _ref.data;\n\n        if (loading) {\n          return React.createElement(FlexContentCenter, null, React.createElement(_Spin, null));\n        }\n\n        if (error) {\n          return null;\n        }\n\n        optionsForDate(data, slotTime);\n        return React.createElement(FlexCenterColumn, {\n          style: {\n            height: '150px',\n            justifyContent: 'space-between'\n          }\n        }, React.createElement(FlexDisplay, {\n          style: {\n            flexDirection: 'column'\n          }\n        }, React.createElement(FlexContent, null, React.createElement(\"span\", {\n          style: {\n            color: 'red'\n          }\n        }, \"*\"), React.createElement(ContentP, {\n          style: {\n            margin: 0\n          }\n        }, \"\\u66F4\\u6539\\u9884\\u7EA6\\u65F6\\u95F4\")), React.createElement(_Cascader, {\n          style: {\n            maxWidth: '55%'\n          },\n          options: optionsForDate(data, slotTime),\n          onChange: _this2.onChange,\n          notFoundContent: \"\\u6682\\u65E0\\u6570\\u636E\",\n          placeholder: \"\\u8BF7\\u91CD\\u65B0\\u8BBE\\u7F6E\\u9884\\u7EA6\\u65F6\\u95F4\"\n        })), React.createElement(CommonPBlock, null, \"- \\u53D8\\u66F4\\u9884\\u7EA6\\u65F6\\u95F4\\u540E\\uFF0C\\u5C06\\u4F1A\\u901A\\u8FC7\\u90AE\\u4EF6\\u3001Push\\u7B49\\u5F62\\u5F0F\\u901A\\u77E5\\u5B66\\u5458\"));\n      });\n    }\n  }]);\n\n  return ModalAcceptAndChangeTime;\n}(React.Component);\n\nexport default ModalAcceptAndChangeTime;","map":null,"metadata":{},"sourceType":"module"}