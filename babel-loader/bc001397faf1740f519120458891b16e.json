{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/dropdown/style\";\nimport _Dropdown from \"antd/lib/dropdown\";\nimport \"antd/lib/menu/style\";\nimport _Menu from \"antd/lib/menu\";\nimport \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport Link from 'next/link';\nimport Router from 'next/router';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { FlexCenterColumn } from '../../../../lib/commonCss';\nvar FormattedRow = styled.div.withConfig({\n  displayName: \"ChapterTable__FormattedRow\",\n  componentId: \"sc-88sxz6-0\"\n})([\"display:flex;justify-content:space-between;padding:0 30px;margin:14px;\"]);\nvar Circle = styled.div.withConfig({\n  displayName: \"ChapterTable__Circle\",\n  componentId: \"sc-88sxz6-1\"\n})([\"display:inline-block;width:6px;height:6px;margin-right:5px;border-radius:50%;\"]);\nvar confirm = _Modal.confirm;\n\nvar ChapterTable =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ChapterTable, _React$Component);\n\n  function ChapterTable() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ChapterTable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ChapterTable)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      listChapterData: _this.props.listChapterData,\n      loading: false,\n      showHoverData: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showConfirm\", function (action, record) {\n      if (action === '上线') {\n        confirm({\n          cancelText: '取消',\n          centered: true,\n          icon: React.createElement(_Icon, {\n            type: \"question-circle\",\n            theme: \"filled\"\n          }),\n          okText: '确认上线',\n          okType: 'primary',\n          onOk: _this.props.enableMutation.bind(_assertThisInitialized(_this), record.id),\n          title: \"\\u786E\\u8BA4\\u4E0A\\u7EBF\\u6B64\\u7AE0\\u8282\\u5417\\uFF1F\"\n        });\n      } else if (action === '下线') {\n        confirm({\n          cancelText: '取消',\n          centered: true,\n          content: React.createElement(\"div\", {\n            style: {\n              fontSize: '13px'\n            }\n          }, React.createElement(\"p\", null, \"\\u4E0B\\u7EBF\\u6B64\\u7AE0\\u8282\\u540E\\uFF1A\"), React.createElement(\"p\", null, \"1\\u3001\\u6240\\u6709\\u7528\\u6237\\u5747\\u4E0D\\u53EF\\u518D\\u770B\\u5230\\u6B64\\u7AE0\\u8282\\u7684\\u5185\\u5BB9\\uFF1B\"), React.createElement(\"p\", null, \"2\\u3001\\u4E0B\\u7EBF\\u540E\\u7684\\u7AE0\\u8282\\u53EF\\u4EE5\\u91CD\\u65B0\\u4E0A\\u7EBF\\u3002\")),\n          icon: React.createElement(_Icon, {\n            type: \"question-circle\",\n            theme: \"filled\"\n          }),\n          okText: '确认下线',\n          okType: 'primary',\n          onOk: _this.props.disableMutation.bind(_assertThisInitialized(_this), record.id),\n          title: \"\\u786E\\u8BA4\\u4E0B\\u7EBF\\u6B64\\u7AE0\\u8282\\u5417\\uFF1F\"\n        });\n      } else if (action === '删除') {\n        confirm({\n          cancelText: '取消',\n          centered: true,\n          content: React.createElement(\"div\", {\n            style: {\n              fontSize: '13px'\n            }\n          }, React.createElement(\"p\", null, \"\\u5220\\u9664\\u540E\\uFF1A\"), React.createElement(\"p\", null, \"APP\\u7AEF\\u548CMIS\\u7528\\u6237\\u5C06\\u65E0\\u6CD5\\u770B\\u5230\\u6B64\\u7AE0\\u8282\\u3002\")),\n          icon: React.createElement(_Icon, {\n            type: \"question-circle\",\n            theme: \"filled\"\n          }),\n          okText: '确认删除',\n          okType: 'danger',\n          onOk: _this.props.removeMutation.bind(_assertThisInitialized(_this), record.id),\n          title: \"\\u786E\\u8BA4\\u5220\\u9664\\u6B64\\u7AE0\\u8282\\u5417\\uFF1F\"\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"switchChapterEdit\", function (data) {\n      var id = data.id,\n          name = data.name,\n          description = data.description;\n      var fillData = {\n        id: id,\n        name: name,\n        description: description\n      };\n\n      _this.props.setCurrentChapter(fillData);\n\n      _this.props.switchPage('chapter-edit');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"switchSectionEdit\", function (data) {\n      var id = data.id,\n          name = data.name,\n          description = data.description,\n          mediaFileDescription = data.mediaFileDescription,\n          attachment = data.attachment,\n          tutorDescriptions = data.tutorDescriptions;\n      var fillData = {\n        id: id,\n        name: name,\n        description: description,\n        mediaFileDescription: mediaFileDescription,\n        attachment: attachment,\n        tutorDescriptions: tutorDescriptions\n      };\n\n      _this.props.setCurrentSection(fillData);\n\n      _this.props.switchPage('section-edit');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"menuItem\", function (showHoverData, record) {\n      var toDetail = function toDetail() {\n        Router.push(\"\".concat(Router.asPath, \"/chapter-detail/\").concat(record.id));\n      };\n\n      return showHoverData.map(function (item, index) {\n        if (item === '查看详情') {\n          return React.createElement(_Menu.Item, {\n            key: index,\n            onClick: toDetail\n          }, React.createElement(\"span\", null, item));\n        }\n\n        if (item === '编辑') {\n          return React.createElement(_Menu.Item, {\n            key: index,\n            onClick: _this.switchChapterEdit.bind(_assertThisInitialized(_this), record)\n          }, React.createElement(\"span\", null, item));\n        }\n\n        if (item === '上线') {\n          return React.createElement(_Menu.Item, {\n            key: index,\n            onClick: _this.showConfirm.bind(_assertThisInitialized(_this), item, record)\n          }, React.createElement(\"a\", null, React.createElement(\"span\", null, item)));\n        }\n\n        if (item === '下线') {\n          return React.createElement(_Menu.Item, {\n            key: index,\n            onClick: _this.showConfirm.bind(_assertThisInitialized(_this), item, record)\n          }, React.createElement(\"a\", null, React.createElement(\"span\", null, item)));\n        }\n\n        if (item === '删除') {\n          return React.createElement(_Menu.Item, {\n            key: index\n          }, React.createElement(\"a\", {\n            style: {\n              color: 'red'\n            },\n            onClick: _this.showConfirm.bind(_assertThisInitialized(_this), item, record)\n          }, item));\n        }\n\n        return null;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"menu\", function (record) {\n      var showHoverData = /未[^\\x00-\\x7F]+/.test(record.status) ? ['查看详情', '编辑', '上线', '删除'] : record.status === '已上线' ? ['查看详情', '编辑', '下线', '删除'] : record.status === '已下线' ? ['查看详情', '编辑', '上线', '删除'] : [];\n      return React.createElement(_Menu, null, _this.menuItem(showHoverData, record));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showSectionConfirm\", function (action, record) {\n      if (action === '删除') {\n        confirm({\n          cancelText: '取消',\n          centered: true,\n          content: React.createElement(\"div\", {\n            style: {\n              fontSize: '13px'\n            }\n          }, React.createElement(\"p\", null, \"\\u5220\\u9664\\u6B64\\u5C0F\\u8282\\u540E\\uFF1A\"), React.createElement(\"p\", null, \"APP\\u7AEF\\u548CMIS\\u7528\\u6237\\u5C06\\u65E0\\u6CD5\\u770B\\u5230\\u6B64\\u5C0F\\u8282\\u3002\")),\n          icon: React.createElement(_Icon, {\n            type: \"question-circle\",\n            theme: \"filled\"\n          }),\n          okText: '确认删除',\n          okType: 'danger',\n          onOk: _this.props.removeSectionMutation.bind(_assertThisInitialized(_this), record.id),\n          title: \"\\u786E\\u8BA4\\u5220\\u9664\\u6B64\\u5C0F\\u8282\\u5417\\uFF1F\"\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"sectionMenu\", function (record) {\n      return React.createElement(_Menu, null, React.createElement(_Menu.Item, {\n        key: 0\n      }, React.createElement(Link, {\n        href: \"\".concat(Router.asPath, \"/chapter-detail/\").concat(record.id, \"/section-detail/\").concat(record.id)\n      }, React.createElement(\"span\", null, \"\\u67E5\\u770B\\u8BE6\\u60C5\"))), React.createElement(_Menu.Item, {\n        key: 1,\n        onClick: _this.switchSectionEdit.bind(_assertThisInitialized(_this), record)\n      }, React.createElement(\"span\", null, \"\\u7F16\\u8F91\")), React.createElement(_Menu.Item, {\n        key: 2\n      }, React.createElement(\"a\", {\n        style: {\n          color: 'red'\n        },\n        onClick: _this.showSectionConfirm.bind(_assertThisInitialized(_this), '删除', record)\n      }, \"\\u5220\\u9664\")));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"render\", function () {\n      var data = _this.props.listChapterData;\n      var columns = [{\n        dataIndex: 'name',\n        key: 'name',\n        title: '章节名称',\n        width: '50%',\n        onCell: function onCell() {\n          return {\n            style: {\n              whiteSpace: 'nowrap',\n              maxWidth: 150\n            }\n          };\n        },\n        render: function render(text) {\n          return React.createElement(\"div\", {\n            style: {\n              textOverflow: 'ellipsis',\n              overflow: 'hidden'\n            }\n          }, text);\n        }\n      }, {\n        dataIndex: 'sectionAmount',\n        key: 'sectionAmount',\n        title: '小节数',\n        width: '10%'\n      }, {\n        dataIndex: 'status',\n        key: 'status',\n        render: function render(text) {\n          var bgrColour = /未[^\\x00-\\x7F]+/.test(text) ? {\n            backgroundColor: '#F5A623'\n          } : text === '已上线' ? {\n            backgroundColor: '#36B37E'\n          } : text === '已下线' ? {\n            backgroundColor: '#CACACA'\n          } : {\n            backgroundColor: '#FFFFFF'\n          };\n          return React.createElement(\"div\", null, React.createElement(Circle, {\n            style: bgrColour\n          }), React.createElement(\"span\", {\n            style: {\n              marginBottom: 0\n            }\n          }, text));\n        },\n        title: '状态',\n        width: '10%'\n      }, {\n        dataIndex: 'createdAt',\n        key: 'createdAt',\n        title: '创建时间',\n        width: '20%'\n      }, {\n        dataIndex: 'operation',\n        key: 'operation',\n        render: function render(text, record) {\n          return React.createElement(_Dropdown, {\n            overlay: _this.menu(record)\n          }, React.createElement(\"span\", {\n            style: {\n              color: '#6285ff'\n            },\n            className: \"ant-dropdown-link\"\n          }, text, React.createElement(_Icon, {\n            type: \"down\"\n          })));\n        },\n        title: '操作',\n        width: '10%'\n      }];\n      var sectionColumns = [{\n        dataIndex: 'name',\n        key: 'name',\n        title: '小节名称',\n        width: '40%',\n        // tslint:disable-next-line:no-identical-functions\n        onCell: function onCell() {\n          return {\n            style: {\n              whiteSpace: 'nowrap',\n              maxWidth: 150\n            }\n          };\n        },\n        render: function render(text) {\n          return React.createElement(\"div\", {\n            style: {\n              textOverflow: 'ellipsis',\n              overflow: 'hidden'\n            }\n          }, text);\n        }\n      }, {\n        dataIndex: 'format',\n        key: 'format',\n        title: '类型',\n        width: '10%'\n      }, {\n        dataIndex: 'tutors',\n        key: 'tutors',\n        title: '导师',\n        width: '20%'\n      }, {\n        dataIndex: 'createdAt',\n        key: 'createdAt',\n        title: '创建时间',\n        width: '20%'\n      }, {\n        dataIndex: 'operation',\n        key: 'operation',\n        render: function render(text, record) {\n          return React.createElement(_Dropdown, {\n            overlay: _this.sectionMenu(record)\n          }, React.createElement(\"span\", {\n            style: {\n              color: '#6285ff'\n            },\n            className: \"ant-dropdown-link\"\n          }, text, React.createElement(_Icon, {\n            type: \"down\"\n          })));\n        },\n        title: '操作',\n        width: '10%'\n      }];\n\n      var expandedRowRender = function expandedRowRender(record) {\n        return record.sections.length > 0 ? React.createElement(_Table, {\n          columns: sectionColumns,\n          dataSource: record.sections,\n          pagination: false\n        }) : React.createElement(\"p\", {\n          style: {\n            textAlign: 'center',\n            color: '#BFBFBF'\n          }\n        }, \"\\u6B64\\u7AE0\\u8282\\u5185\\u6682\\u65E0\\u5C0F\\u8282\\uFF0C\\u8FDB\\u5165\\u7AE0\\u8282\\u8BE6\\u60C5\\u9875\\u53EF\\u521B\\u5EFA\\u5C0F\\u8282\");\n      };\n\n      return React.createElement(FlexCenterColumn, null, React.createElement(FormattedRow, null, React.createElement(_Col, {\n        span: 18\n      }, React.createElement(\"span\", {\n        style: {\n          fontWeight: 'bold'\n        }\n      }, \"\\u6B64\\u5468\\u671F\\u5185\\u7AE0\\u8282\\uFF08\", _this.props.chaptersAmount, \"\\uFF09\")), React.createElement(_Col, {\n        span: 6,\n        style: {\n          textAlign: 'right'\n        }\n      }, React.createElement(_Button, {\n        type: \"primary\",\n        onClick: _this.props.switchPage.bind(_assertThisInitialized(_this), 'chapter-create')\n      }, \"\\u521B\\u5EFA\\u7AE0\\u8282\"))), React.createElement(_Table, {\n        style: {\n          minWidth: 800\n        },\n        dataSource: data,\n        columns: columns,\n        pagination: false,\n        bordered: false,\n        expandedRowRender: expandedRowRender,\n        locale: {\n          emptyText: '暂无章节，点击右上角按钮开始创建章节'\n        }\n      }));\n    });\n\n    return _this;\n  }\n\n  return ChapterTable;\n}(React.Component);\n\nexport { ChapterTable };","map":null,"metadata":{},"sourceType":"module"}