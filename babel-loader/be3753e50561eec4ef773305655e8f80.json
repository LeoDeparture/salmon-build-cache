{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport Hls from 'hls.js';\nimport React, { Component } from 'react';\n\nvar HLSSource =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HLSSource, _Component);\n\n  function HLSSource(props, context) {\n    var _this;\n\n    _classCallCheck(this, HLSSource);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HLSSource).call(this, props, context));\n    _this.hls = new Hls();\n    return _this;\n  }\n\n  _createClass(HLSSource, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // `src` is the property get from this component\n      // `video` is the property insert from `Video` component\n      // `video` is the html5 video element\n      var _this$props = this.props,\n          src = _this$props.src,\n          video = _this$props.video; // load hls video source base on hls.js\n\n      if (Hls.isSupported()) {\n        this.hls.loadSource(src);\n        this.hls.attachMedia(video); // this.hls.on(Hls.Events.MANIFEST_PARSED, () => {\n        //   video.play();\n        // });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // destroy hls video source\n      if (this.hls) {\n        this.hls.destroy();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"source\", {\n        src: this.props.src,\n        type: this.props.type || 'application/x-mpegURL'\n      });\n    }\n  }]);\n\n  return HLSSource;\n}(Component);\n\nexport { HLSSource as default };","map":null,"metadata":{},"sourceType":"module"}