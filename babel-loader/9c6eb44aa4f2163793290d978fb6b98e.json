{"ast":null,"code":"import \"antd/lib/dropdown/style\";\nimport _Dropdown from \"antd/lib/dropdown\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport \"antd/lib/date-picker/style\";\nimport _DatePicker from \"antd/lib/date-picker\";\nimport \"antd/lib/badge/style\";\nimport _Badge from \"antd/lib/badge\";\nimport \"antd/lib/menu/style\";\nimport _Menu from \"antd/lib/menu\";\nimport \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { format } from 'date-fns';\nimport moment from 'moment';\nimport Link from 'next/link';\nimport numeral from 'numeral';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { FlexContent, FlexDisplay } from '../../../../lib/commonCss';\nimport { disablePast } from '../../../../lib/commonJs';\nimport SetTimePop from './SetTimePop';\nimport { TagRender } from './TagRender';\nvar dateFormat = 'YYYY/MM/DD';\n\nvar CourseList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CourseList, _React$Component);\n\n  function CourseList(props) {\n    var _this;\n\n    _classCallCheck(this, CourseList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CourseList).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onRefSetTimePop\", function (ref) {\n      _this.setTimePop = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickSetTime\", function (id, key) {\n      _this.setState({\n        setTimeCourseId: id,\n        setTimePopType: key\n      }, _this.setTimePop.showPop);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showAlert\", function () {\n      _Modal.warning({\n        icon: React.createElement(_Icon, {\n          type: \"exclamation-circle\"\n        }),\n        title: '取消失败',\n        content: '无法取消已预约或报名的辅导课程。',\n        okText: '我知道了'\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"selectTime\", function (id, dates) {\n      _this.props.setCourseProperty(id, 'setTime', {\n        bestStartAt: dates[0],\n        bestEndAt: dates[1]\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"selectTutorType\", function (id, select) {\n      _this.props.setCourseProperty(id, 'setTutorType', {\n        tutorType: select\n      });\n    });\n\n    _this.state = {\n      setTimePopType: undefined,\n      setTimeCourseId: ''\n    };\n    return _this;\n  }\n\n  _createClass(CourseList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          courses = _this$props.courses,\n          canEdit = _this$props.canEdit,\n          onClickDisconnect = _this$props.onClickDisconnect,\n          showNonEditAlert = _this$props.showNonEditAlert,\n          setCourseBestTime = _this$props.setCourseBestTime,\n          readOnly = _this$props.readOnly,\n          onClickModify = _this$props.onClickModify;\n      var _this$state = this.state,\n          setTimePopType = _this$state.setTimePopType,\n          setTimeCourseId = _this$state.setTimeCourseId;\n\n      if (courses.length) {\n        return React.createElement(MainWrapper, null, React.createElement(SetTimePop, {\n          type: setTimePopType,\n          onRef: this.onRefSetTimePop,\n          setTimeCourseId: setTimeCourseId,\n          setCourseBestTime: setCourseBestTime\n        }), courses.map(function (course, index) {\n          var id = course.id,\n              _course$type = course.type,\n              key = _course$type.key,\n              name = _course$type.name,\n              subscriptionCourse = course.subscriptionCourse,\n              subscriptionCourseSeriesAppointment = course.subscriptionCourseSeriesAppointment,\n              courseCategory = course.courseCategory,\n              appointmentGroupCourseSlot = course.appointmentGroupCourseSlot,\n              privateCourseAppointment = course.privateCourseAppointment,\n              suggestionCourse = course.suggestionCourse,\n              tutorType = course.tutorType,\n              bestStartAt = course.bestStartAt,\n              bestEndAt = course.bestEndAt; // 已经选择了最佳开始时间和最佳结束时间\n\n          var timeSelected = bestStartAt && bestEndAt;\n\n          var _TagRender = TagRender(course),\n              active = _TagRender.active,\n              tag = _TagRender.tag,\n              url = _TagRender.url;\n\n          var confirmDate;\n\n          if (key === 'PRIVATE_COURSE') {\n            confirmDate = privateCourseAppointment && privateCourseAppointment.confirmAt;\n          }\n\n          if (key === 'GROUP_COURSE') {\n            confirmDate = appointmentGroupCourseSlot && appointmentGroupCourseSlot.slot.time;\n          }\n\n          var menu = React.createElement(_Menu, null, React.createElement(_Menu.Item, {\n            onClick: !canEdit ? showNonEditAlert : active ? _this2.showAlert : onClickModify.bind(_this2, id, key)\n          }, React.createElement(\"a\", null, \"\\u4FEE\\u6539\")), React.createElement(_Menu.Item, {\n            onClick: !canEdit ? showNonEditAlert : active ? _this2.showAlert : onClickDisconnect.bind(_this2, id)\n          }, React.createElement(\"a\", {\n            style: {\n              color: '#ff5230'\n            }\n          }, \"\\u53D6\\u6D88\\u5173\\u8054\"))); // 小于 10 的序号前加 0\n\n          var indexText = (index + 1).toString();\n\n          if (index + 1 < 10) {\n            indexText = '0' + indexText;\n          }\n\n          return React.createElement(CourseWrapper, {\n            key: 'course' + index\n          }, React.createElement(No, null, indexText), React.createElement(Info, null, React.createElement(InfoItem, null, key !== 'SUBSCRIPTION_COURSE' ? courseCategory.name : subscriptionCourse.name, tag, !timeSelected && React.createElement(_Badge, {\n            style: {\n              marginLeft: '30px'\n            },\n            color: \"orange\",\n            text: \"\\u8BF7\\u8BBE\\u7F6E\\u6700\\u4F73\\u5B66\\u4E60\\u65F6\\u95F4\"\n          })), React.createElement(FlexDisplay, {\n            style: {\n              margin: '8px 0'\n            }\n          }, React.createElement(InfoItem, {\n            style: {\n              minWidth: '50%'\n            }\n          }, React.createElement(ItemTitle, null, \"\\u6388\\u8BFE\\u65B9\\u5F0F\\uFF1A\"), name), key === 'PRIVATE_COURSE' && active && React.createElement(InfoItem, {\n            style: {\n              minWidth: '50%'\n            }\n          }, React.createElement(ItemTitle, null, \"\\u5BFC\\u5E08\\u7C7B\\u578B\\uFF1A\"), tutorType ? tutorType.name : '--'), key === 'SUBSCRIPTION_COURSE' && subscriptionCourseSeriesAppointment && React.createElement(InfoItem, {\n            style: {\n              minWidth: '50%'\n            }\n          }, React.createElement(ItemTitle, null, \"\\u5B66\\u4E60\\u8FDB\\u5EA6\\uFF1A\"), subscriptionCourseSeriesAppointment.progress ? numeral(subscriptionCourseSeriesAppointment.progress).format('0%') : '0%')), confirmDate ? React.createElement(InfoItem, {\n            style: {\n              minWidth: '50%'\n            }\n          }, React.createElement(ItemTitle, null, \"\\u8F85\\u5BFC\\u65F6\\u95F4\\uFF1A\"), format(confirmDate, 'YYYY/MM/DD HH:mm')) : React.createElement(\"div\", null, key !== 'SUBSCRIPTION_COURSE' && React.createElement(InfoItem, {\n            style: {\n              minWidth: '50%',\n              margin: '8px 0'\n            }\n          }, React.createElement(ItemTitle, null, \"\\u5EFA\\u8BAE\\u8BFE\\u7A0B\\uFF1A\"), suggestionCourse || '--'), React.createElement(FlexContent, null, React.createElement(InfoItemTimeSelect, {\n            style: {\n              display: 'flex',\n              flex: 0.5\n            }\n          }, React.createElement(ItemTitle, null, \"\\u6700\\u4F73\\u5B66\\u4E60\\u65F6\\u95F4\\uFF1A\"), active ? \"\".concat(format(bestStartAt, dateFormat), \" ~ \").concat(format(bestEndAt, dateFormat)) : React.createElement(_DatePicker.RangePicker, {\n            size: \"small\",\n            key: id + index,\n            style: {\n              flex: 1\n            },\n            format: dateFormat,\n            placeholder: ['开始时间', '结束时间'],\n            defaultValue: timeSelected ? [moment(format(bestStartAt, dateFormat), dateFormat), moment(format(bestEndAt, dateFormat), dateFormat)] : undefined,\n            onChange: _this2.selectTime.bind(_this2, id),\n            disabledDate: disablePast\n          })), key === 'PRIVATE_COURSE' && !active && React.createElement(InfoItem, {\n            style: {\n              flex: 0.5\n            }\n          }, React.createElement(ItemTitle, null, \"\\u5BFC\\u5E08\\u7C7B\\u578B\\uFF1A\"), React.createElement(_Select, {\n            key: index + id,\n            placeholder: \"\\u8BF7\\u9009\\u62E9\\u5BFC\\u5E08\\u7C7B\\u578B\",\n            defaultValue: tutorType ? [tutorType.name] : undefined,\n            onSelect: _this2.selectTutorType.bind(_this2, id),\n            style: {\n              width: '50%'\n            }\n          }, JSON.parse(localStorage.getItem('zhiwen_all_enum')).listZhiwenLevelEnum.map(function (v) {\n            var tutorTypeId = v.id,\n                tutorTypeName = v.name;\n            return React.createElement(_Select.Option, {\n              key: tutorTypeId,\n              value: _JSON$stringify(v)\n            }, tutorTypeName);\n          })))))), React.createElement(Operation, null, !readOnly && !active && React.createElement(_Dropdown, {\n            overlay: menu,\n            placement: \"bottomLeft\"\n          }, React.createElement(\"a\", null, \"\\u9009\\u62E9\\u64CD\\u4F5C\", React.createElement(_Icon, {\n            style: {\n              marginLeft: '4px'\n            },\n            type: \"down\"\n          }))), active && React.createElement(Link, {\n            href: url\n          }, React.createElement(\"a\", {\n            style: {\n              marginRight: '12px'\n            }\n          }, \"\\u67E5\\u770B\\u6388\\u8BFE\"))));\n        }));\n      } else {\n        return React.createElement(NoCourseHint, null, \"\\u6B64\\u9636\\u6BB5\\u5185\\u6682\\u65E0\\u6388\\u8BFE\");\n      }\n    }\n  }]);\n\n  return CourseList;\n}(React.Component);\n\nexport default CourseList;\nvar MainWrapper = styled.div.withConfig({\n  displayName: \"CourseList__MainWrapper\",\n  componentId: \"gcpugf-0\"\n})([\"padding:0 31px;margin-bottom:24px;\"]);\nvar CourseWrapper = styled.div.withConfig({\n  displayName: \"CourseList__CourseWrapper\",\n  componentId: \"gcpugf-1\"\n})([\"display:flex;padding:12px;margin-bottom:16px;background-color:#fff;border:solid 1px #979797;border-radius:4px;&:last-child{margin-bottom:0;}\"]);\nvar NoCourseHint = styled.p.withConfig({\n  displayName: \"CourseList__NoCourseHint\",\n  componentId: \"gcpugf-2\"\n})([\"display:flex;align-items:center;flex:1;justify-content:center;margin:0;font-size:16px;color:#bfbfbf;text-align:center;\"]);\nvar No = styled.div.withConfig({\n  displayName: \"CourseList__No\",\n  componentId: \"gcpugf-3\"\n})([\"width:26px;\"]);\nvar Info = styled.div.withConfig({\n  displayName: \"CourseList__Info\",\n  componentId: \"gcpugf-4\"\n})([\"flex:1;overflow:hidden;\"]);\nvar InfoItem = styled.div.withConfig({\n  displayName: \"CourseList__InfoItem\",\n  componentId: \"gcpugf-5\"\n})([\"margin:0;overflow:hidden;line-height:22px;text-overflow:ellipsis;white-space:nowrap;\"]);\nvar InfoItemTimeSelect = styled.div.withConfig({\n  displayName: \"CourseList__InfoItemTimeSelect\",\n  componentId: \"gcpugf-6\"\n})([\"display:flex;align-items:center;flex:0.5;padding-right:10px;margin:0;overflow:hidden;line-height:22px;text-overflow:ellipsis;white-space:nowrap;\"]);\nvar ItemTitle = styled.span.withConfig({\n  displayName: \"CourseList__ItemTitle\",\n  componentId: \"gcpugf-7\"\n})([\"color:rgba(0,0,0,0.25);\"]);\nvar Operation = styled.div.withConfig({\n  displayName: \"CourseList__Operation\",\n  componentId: \"gcpugf-8\"\n})([\"width:100px;text-align:right;\"]);","map":null,"metadata":{},"sourceType":"module"}