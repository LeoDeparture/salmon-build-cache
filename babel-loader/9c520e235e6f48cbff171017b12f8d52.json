{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport Router from 'next/router';\nimport React from 'react';\nimport Loading from '../../../../components/Loading';\nimport { agreedPlan, disagreePlan } from '../../../../components/ServiceAudit';\nimport TableFooter from '../../../../components/Table/TableFooter';\nimport FilterHeader from '../components/FilterHeader';\nimport ServiceTicketsTable from '../components/ServiceTicketsTable';\nimport ListServiceTicketsCheckedByMe, { QueryListServiceTicketsCheckedByMe } from './QueryTicketsCheckedByMe';\nvar ItemsPerPage = 20;\n\nvar CheckedByMeContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CheckedByMeContainer, _React$Component);\n\n  function CheckedByMeContainer(props) {\n    var _this;\n\n    _classCallCheck(this, CheckedByMeContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CheckedByMeContainer).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"bindTableRef\", function (ref) {\n      _this.tableRef = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"storePageInfo\", function (data) {\n      var pageInfo = data.serviceTickets.pageInfo;\n\n      _this.setState({\n        pageInfo: pageInfo\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"queryMore\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$state, loading, pageInfo;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$state = _this.state, loading = _this$state.loading, pageInfo = _this$state.pageInfo;\n\n              if (!(loading || !pageInfo.hasNextPage)) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _this.setState({\n                loading: true\n              });\n\n              _context.next = 6;\n              return _this.fetchMore({\n                updateQuery: function updateQuery(prevData, _ref2) {\n                  var newData = _ref2.fetchMoreResult;\n\n                  if (!newData) {\n                    return prevData;\n                  }\n\n                  newData.serviceTickets.edges = [].concat(_toConsumableArray(prevData.serviceTickets.edges), _toConsumableArray(newData.serviceTickets.edges));\n                  return newData;\n                },\n                variables: {\n                  input: _objectSpread({}, _this.variables.input, {\n                    after: pageInfo.endCursor,\n                    first: ItemsPerPage\n                  })\n                }\n              });\n\n            case 6:\n              _this.setState({\n                loading: false\n              }); // 记录翻页数据\n\n\n              _this.variables.input.first += ItemsPerPage;\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"changeInput\", function (value, type) {\n      if (_this.tableRef) {\n        _this.tableRef.changeLoading(true);\n      }\n\n      if (type === 'industryId') {\n        _this.variables.input.industryId = value;\n      }\n\n      if (type === 'something_contains') {\n        _this.variables.input.something_contains = value;\n      }\n\n      _this.refetch(_this.variables).then(function () {\n        if (_this.tableRef) {\n          _this.tableRef.changeLoading(false);\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"footer\", function () {\n      if (_this.state.pageInfo.hasNextPage) {\n        return React.createElement(TableFooter, {\n          isLoading: _this.state.loading,\n          onClickLink: _this.queryMore\n        });\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"agreeServiceTicket\", function (id) {\n      agreedPlan(id, QueryListServiceTicketsCheckedByMe, _this.variables, _this.client);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"disagreeServiceTicket\", function (id) {\n      disagreePlan(id, QueryListServiceTicketsCheckedByMe, _this.variables, _this.client);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toServiceTicketDetail\", function (id) {\n      localStorage.setItem('serviceTicket', 'myChecked');\n      Router.push(\"/service/ticket-detail/\".concat(id));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"render\", function () {\n      return React.createElement(React.Fragment, null, React.createElement(FilterHeader, {\n        type: \"audit\",\n        changeInput: _this.changeInput\n      }), React.createElement(ListServiceTicketsCheckedByMe, {\n        query: QueryListServiceTicketsCheckedByMe,\n        variables: _this.variables,\n        onCompleted: _this.storePageInfo,\n        fetchPolicy: \"network-only\"\n      }, function (_ref3) {\n        var data = _ref3.data,\n            loading = _ref3.loading,\n            error = _ref3.error,\n            refetch = _ref3.refetch,\n            client = _ref3.client,\n            fetchMore = _ref3.fetchMore;\n        _this.fetchMore = fetchMore;\n        _this.client = client;\n        _this.refetch = refetch;\n\n        if (loading) {\n          return React.createElement(Loading, {\n            type: \"flex\"\n          });\n        }\n\n        if (error) {\n          return null;\n        }\n\n        var dataSource = [];\n\n        if (data && data.serviceTickets) {\n          dataSource = data.serviceTickets.edges.map(function (v) {\n            return v.node;\n          });\n        }\n\n        return React.createElement(ServiceTicketsTable, {\n          type: \"audit\",\n          ref: _this.bindTableRef,\n          serviceListData: dataSource,\n          footer: _this.footer,\n          agreeServiceTicket: _this.agreeServiceTicket,\n          disagreeServiceTicket: _this.disagreeServiceTicket,\n          toServiceTicketDetail: _this.toServiceTicketDetail\n        });\n      }));\n    });\n\n    _this.state = {\n      loading: false,\n      pageInfo: undefined\n    };\n    _this.variables = {\n      input: {\n        industryId: '',\n        reviewStatus: '',\n        payStatus: '',\n        createdAt: '',\n        something_contains: '',\n        first: ItemsPerPage\n      }\n    };\n    return _this;\n  }\n\n  return CheckedByMeContainer;\n}(React.Component);\n\nexport { CheckedByMeContainer as default };","map":null,"metadata":{},"sourceType":"module"}