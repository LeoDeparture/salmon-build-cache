{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport Router from 'next/router';\nimport React from 'react';\nimport Loading from '../../../../components/Loading';\nimport { TableFooter, TableHeader } from '../../../../components/Table';\nimport { allEnum } from '../../../../lib/commonJs';\nimport ListServiceCatalogs, { QueryListServiceCatalogs } from '../../catalogs/containers/QueryListServiceCatalogs';\nimport ServicePlanTable from '../components/ServicePlanTable';\nimport { MutationChangeServicePlanStatus, MutationDeleteServicePlan } from './Mutations';\nimport ListServicePlans, { QueryListServicePlans } from './QueryListServicePlans';\nvar Option = _Select.Option;\nvar ItemsPerPage = 20;\n\nvar ServicePlanTableContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ServicePlanTableContainer, _React$Component);\n\n  function ServicePlanTableContainer(props) {\n    var _this;\n\n    _classCallCheck(this, ServicePlanTableContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ServicePlanTableContainer).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"bindTableRef\", function (e) {\n      _this.tableRef = e;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickCreate\", function () {\n      Router.push('/service/create-plan');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deletePlan\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(id) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", _this.client.mutate({\n                  mutation: MutationDeleteServicePlan,\n                  variables: {\n                    id: id\n                  },\n                  refetchQueries: [{\n                    query: QueryListServicePlans,\n                    variables: _this.variables\n                  }]\n                }).then(function () {\n                  _message.success('已成功删除此方案。');\n                }));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickDelete\", function (id) {\n      _Modal.confirm({\n        title: '确认删除此方案吗？',\n        icon: React.createElement(_Icon, {\n          type: \"question-circle\",\n          theme: \"filled\"\n        }),\n        okText: '确认删除',\n        onOk: _this.deletePlan.bind(_assertThisInitialized(_this), id),\n        cancelText: '取消',\n        okButtonProps: {\n          type: 'danger',\n          ghost: true\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeStatus\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(id, status) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", _this.client.mutate({\n                  mutation: MutationChangeServicePlanStatus,\n                  variables: {\n                    id: id,\n                    status: status\n                  },\n                  refetchQueries: [{\n                    query: QueryListServicePlans,\n                    variables: _this.variables\n                  }]\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2, _x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"footer\", function () {\n      return _this.state.pageInfo.hasNextPage && React.createElement(TableFooter, {\n        isLoading: _this.state.loading,\n        onClickLink: _this.queryMore\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"queryMore\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var _this$state, loading, pageInfo;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _this$state = _this.state, loading = _this$state.loading, pageInfo = _this$state.pageInfo;\n\n              if (!(loading || !pageInfo.hasNextPage)) {\n                _context3.next = 3;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 3:\n              _this.setState({\n                loading: true\n              });\n\n              _context3.next = 6;\n              return _this.fetchMore({\n                updateQuery: function updateQuery(prevData, _ref4) {\n                  var newData = _ref4.fetchMoreResult;\n\n                  if (!newData) {\n                    return prevData;\n                  }\n\n                  newData.servicePlans.edges = [].concat(_toConsumableArray(prevData.servicePlans.edges), _toConsumableArray(newData.servicePlans.edges));\n                  return newData;\n                },\n                variables: {\n                  input: _objectSpread({}, _this.variables.input, {\n                    after: pageInfo.endCursor,\n                    first: ItemsPerPage\n                  })\n                }\n              });\n\n            case 6:\n              _this.setState({\n                loading: false\n              }); // 记录翻页数据\n\n\n              _this.variables.input.first += ItemsPerPage;\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeSelect\", function (type, v) {\n      if (_this.tableRef) {\n        _this.tableRef.changeLoading(true);\n      }\n\n      _this.variables.input.where[type].id = v;\n\n      _this.refetch().then(function () {\n        if (_this.tableRef) {\n          _this.tableRef.changeLoading(false);\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"selectGroup\", function () {\n      return React.createElement(React.Fragment, null, React.createElement(_Select, {\n        placeholder: \"\\u4E0D\\u9650\\u884C\\u4E1A\",\n        style: SelectStyle,\n        onChange: _this.onChangeSelect.bind(_assertThisInitialized(_this), 'industry'),\n        allowClear: true\n      }, allEnum().listZhiWenProfessionEnum.map(function (i) {\n        return React.createElement(Option, {\n          key: i.id\n        }, i.name);\n      })), React.createElement(ListServiceCatalogs, {\n        query: QueryListServiceCatalogs,\n        variables: {\n          input: {}\n        }\n      }, function (_ref5) {\n        var loading = _ref5.loading,\n            error = _ref5.error,\n            data = _ref5.data;\n\n        if (loading || error) {\n          return null;\n        }\n\n        return React.createElement(_Select, {\n          placeholder: \"\\u4E0D\\u9650\\u76EE\\u5F55\",\n          style: {\n            width: 200\n          },\n          onChange: _this.onChangeSelect.bind(_assertThisInitialized(_this), 'serviceCatalog'),\n          allowClear: true\n        }, data.serviceCatalogs.edges.map(function (edge) {\n          var _edge$node = edge.node,\n              id = _edge$node.id,\n              name = _edge$node.name;\n          return React.createElement(Option, {\n            key: id\n          }, name);\n        }));\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"storePageInfo\", function (data) {\n      if (!data.servicePlans) return;\n      var pageInfo = data.servicePlans.pageInfo;\n\n      _this.setState({\n        pageInfo: pageInfo\n      });\n    });\n\n    _this.state = {\n      loading: false,\n      pageInfo: undefined\n    };\n    _this.variables = {\n      input: {\n        first: ItemsPerPage,\n        where: {\n          industry: {\n            id: undefined\n          },\n          serviceCatalog: {\n            id: undefined\n          }\n        }\n      }\n    };\n    return _this;\n  }\n\n  _createClass(ServicePlanTableContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(ListServicePlans, {\n        query: QueryListServicePlans,\n        onCompleted: this.storePageInfo,\n        variables: this.variables,\n        fetchPolicy: \"network-only\"\n      }, function (_ref6) {\n        var data = _ref6.data,\n            loading = _ref6.loading,\n            fetchMore = _ref6.fetchMore,\n            refetch = _ref6.refetch,\n            error = _ref6.error,\n            client = _ref6.client;\n        _this2.client = client;\n        _this2.refetch = refetch;\n        _this2.fetchMore = fetchMore;\n\n        if (loading) {\n          return React.createElement(Loading, null);\n        }\n\n        if (error) {\n          return null;\n        }\n\n        var servicePlans = data.servicePlans.edges.map(function (edge, i) {\n          return _objectSpread({}, edge.node, {\n            key: i\n          });\n        });\n        return React.createElement(React.Fragment, null, React.createElement(TableHeader, {\n          buttonText: \"\\u521B\\u5EFA\\u670D\\u52A1\\u65B9\\u6848\",\n          onClickButton: _this2.onClickCreate,\n          moduleGroup: _this2.selectGroup()\n        }), React.createElement(ServicePlanTable, {\n          ref: _this2.bindTableRef,\n          servicePlans: servicePlans,\n          footer: _this2.footer,\n          changeStatus: _this2.changeStatus,\n          deletePlan: _this2.onClickDelete\n        }));\n      });\n    }\n  }]);\n\n  return ServicePlanTableContainer;\n}(React.Component);\n\nexport { ServicePlanTableContainer as default };\nvar SelectStyle = {\n  width: 200,\n  marginRight: 16\n};","map":null,"metadata":{},"sourceType":"module"}