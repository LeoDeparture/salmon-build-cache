{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport debounce from 'lodash/debounce';\nimport React, { useState } from 'react';\nimport { ApolloConsumer } from 'react-apollo';\nimport InlineAccountInfo from '../../InlineAccountInfo';\nimport { QueryListStudentAccounts } from './containers/QueryListStudents';\n\nvar StudentSelect = function StudentSelect(props, _ref) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      studentAccounts = _useState2[0],\n      setStudentAccounts = _useState2[1];\n\n  var apolloClient; // 搜索功能\n\n  var search =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(value) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (value) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              _context.next = 4;\n              return apolloClient.query({\n                query: QueryListStudentAccounts,\n                variables: {\n                  input: {\n                    first: 200,\n                    where: {\n                      OR: [{\n                        studentNo: value\n                      }, {\n                        account: {\n                          person: {\n                            name_contains: value\n                          }\n                        }\n                      }, {\n                        account: {\n                          person: {\n                            nickname_contains: value\n                          }\n                        }\n                      }, {\n                        account: {\n                          person: {\n                            email: value\n                          }\n                        }\n                      }, {\n                        account: {\n                          person: {\n                            phoneNumber_contains: value\n                          }\n                        }\n                      }]\n                    }\n                  }\n                },\n                fetchPolicy: 'network-only'\n              });\n\n            case 4:\n              result = _context.sent;\n\n              if (result && result.data) {\n                setStudentAccounts(result.data.studentAccounts);\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function search(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onSearch = debounce(search, 500);\n  return React.createElement(ApolloConsumer, null, function (client) {\n    apolloClient = client;\n    return React.createElement(_Select, _extends({\n      onSearch: onSearch,\n      showSearch: true,\n      placeholder: \"\\u8BF7\\u641C\\u7D22\"\n    }, props, {\n      filterOption: false,\n      defaultActiveFirstOption: false\n    }), studentAccounts.map(function (v) {\n      return React.createElement(_Select.Option, {\n        key: v.id,\n        value: v.id\n      }, React.createElement(InlineAccountInfo, {\n        account: v.account,\n        size: \"small\"\n      }));\n    }));\n  });\n};\n\nexport default React.forwardRef(StudentSelect);","map":null,"metadata":{},"sourceType":"module"}