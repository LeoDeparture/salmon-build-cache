{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport libphonenumber from 'google-libphonenumber';\nimport React from 'react';\nimport { parseErrorCode } from '../../../lib/commonJs';\nimport { NoEmptyInputRule } from '../../../lib/commonRule';\nimport { TitleDiv, WarpContent } from '../../subscriptionCourse/commonCss';\nvar Option = _Select.Option;\nvar phoneUtil = libphonenumber.PhoneNumberUtil.getInstance();\n\nvar ModuleForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ModuleForm, _React$Component);\n\n  function ModuleForm(props) {\n    var _this;\n\n    _classCallCheck(this, ModuleForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ModuleForm).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"setFieldsValue\", _this.props.form.setFieldsValue);\n\n    _defineProperty(_assertThisInitialized(_this), \"allCountry\", JSON.parse(localStorage.getItem('zhiwen_all_country')));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var propsData, telCode, phoneNumber, pNumber, prefix, regionCode, countries, trueTelCode, fieldsValue;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.props.getData();\n\n            case 2:\n              propsData = _context.sent;\n\n              _this.setState({\n                personEmail: propsData.email\n              });\n\n              if (propsData.phoneNumber) {\n                pNumber = phoneUtil.parseAndKeepRawInput(propsData.phoneNumber);\n                prefix = pNumber.getCountryCode().toString();\n                regionCode = phoneUtil.getRegionCodeForNumber(pNumber);\n                countries = _this.allCountry.filter(function (data) {\n                  return data.countryTelCode === prefix && data.abbreviation === regionCode;\n                });\n\n                if (countries.length > 0) {\n                  telCode = \"+\".concat(countries[0].countryTelCode, \" \").concat(countries[0].name);\n                  phoneNumber = pNumber.getNationalNumber().toString();\n                }\n              }\n\n              trueTelCode = telCode ? telCode : '+86 中国';\n              fieldsValue = {\n                name: propsData.name,\n                nickname: propsData.nickname,\n                telCode: trueTelCode,\n                phoneNumber: phoneNumber\n              };\n\n              _this.setState({\n                telCode: trueTelCode\n              });\n\n              _this.props.form.setFieldsValue(fieldsValue);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFieldsAndScroll(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2(err, fieldsValue) {\n          var prefix, input;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!err) {\n                    _this.setState({\n                      loading: true\n                    });\n\n                    prefix = fieldsValue.telCode.split(' ')[0];\n                    input = {\n                      name: fieldsValue.name,\n                      nickname: fieldsValue.nickname,\n                      phoneNumber: \"\".concat(prefix).concat(fieldsValue.phoneNumber)\n                    };\n\n                    _this.props.editData({\n                      input: input\n                    }).then(function (error) {\n                      _this.setState({\n                        loading: false\n                      });\n\n                      if (parseErrorCode(error)) {\n                        _this.setState({\n                          editError: parseErrorCode(error)\n                        }, function () {\n                          _this.forceValidation(null);\n                        });\n\n                        _this.setState({\n                          editError: ''\n                        });\n                      } else {\n                        _message.success('已成功更新账户信息。');\n\n                        _this.props.goBack();\n                      }\n                    }).catch(function (_) {\n                      _this.setState({\n                        loading: false\n                      });\n                    });\n                  } else {\n                    _this.setState({\n                      loading: false\n                    });\n                  }\n\n                case 1:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x, _x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"forceValidation\",\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(value) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!value) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                _context3.next = 3;\n                return _this.setState({\n                  telCode: value\n                });\n\n              case 3:\n                // tslint:enable\n                _this.props.form.validateFieldsAndScroll(['phoneNumber'], {\n                  force: true\n                }, function () {\n                  return;\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"checkPhoneValid\", function (_r, value, callback) {\n      if (!/^[0-9]{6,11}$/.test(value)) {\n        callback('请输入有效的手机号');\n      } else {\n        var prefix = _this.state.telCode.split(' ')[0];\n\n        var phoneNumber = \"\".concat(prefix).concat(value);\n        var pNumber = phoneUtil.parseAndKeepRawInput(phoneNumber);\n\n        if (!phoneUtil.isValidNumber(pNumber)) {\n          callback('请输入有效的手机号');\n        }\n      }\n\n      callback();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkPhoneExist\", function (_r, _v, callback) {\n      if (_this.state.editError === 'PersonExist') {\n        callback('此手机号已被占用');\n      }\n\n      callback();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"render\", function () {\n      var getFieldDecorator = _this.props.form.getFieldDecorator;\n\n      var telCodeOpts = _this.allCountry.map(function (data) {\n        return React.createElement(Option, {\n          key: data.id,\n          value: \"+\".concat(data.countryTelCode, \" \").concat(data.name)\n        }, \"+\".concat(data.countryTelCode, \" \").concat(data.name));\n      });\n\n      var prefixSelector = getFieldDecorator('telCode')(React.createElement(_Select, {\n        showSearch: true,\n        style: {\n          width: 135\n        },\n        onChange: _this.forceValidation\n      }, telCodeOpts));\n      return React.createElement(\"div\", null, React.createElement(TitleDiv, null, \"\\u8D26\\u6237\\u8BBE\\u7F6E\"), React.createElement(WarpContent, null, React.createElement(_Form, {\n        onSubmit: _this.handleSubmit,\n        style: {\n          width: '50%',\n          backgroundColor: '#fff',\n          padding: 40\n        }\n      }, React.createElement(_Form.Item, {\n        colon: false,\n        label: React.createElement(\"span\", null, \"MIS \\u8D26\\u53F7\")\n      }, React.createElement(\"div\", null, _this.state.personEmail)), React.createElement(_Form.Item, {\n        colon: false,\n        label: React.createElement(\"span\", null, \"\\u59D3\\u540D\")\n      }, getFieldDecorator('name', {\n        rules: NoEmptyInputRule\n      })(React.createElement(_Input, {\n        placeholder: \"\\u8BF7\\u8F93\\u5165\"\n      }))), React.createElement(_Form.Item, {\n        colon: false,\n        label: \"\\u6635\\u79F0\"\n      }, getFieldDecorator('nickname', {\n        rules: NoEmptyInputRule\n      })(React.createElement(_Input, {\n        placeholder: \"\\u8BF7\\u8F93\\u5165\"\n      }))), React.createElement(_Form.Item, {\n        colon: false,\n        label: \"\\u624B\\u673A\\u53F7\"\n      }, getFieldDecorator('phoneNumber', {\n        rules: [{\n          message: ' ',\n          required: true,\n          whitespace: true\n        }, {\n          validator: _this.checkPhoneValid\n        }, {\n          validator: _this.checkPhoneExist\n        }] // validateTrigger: 'onBlur',\n\n      })(React.createElement(_Input, {\n        addonBefore: prefixSelector,\n        placeholder: \"\\u8BF7\\u8F93\\u5165\"\n      }))), React.createElement(_Form.Item, {\n        colon: false,\n        labelCol: {\n          span: 12\n        }\n      }, React.createElement(_Button, {\n        onClick: _this.props.goBack\n      }, \"\\u53D6\\u6D88\"), React.createElement(_Button, {\n        style: {\n          marginLeft: 20\n        },\n        type: \"primary\",\n        htmlType: \"submit\",\n        loading: _this.state.loading\n      }, \"\\u4FDD\\u5B58\")))));\n    });\n\n    _this.state = {\n      personEmail: '',\n      loading: false,\n      editError: '',\n      telCode: ''\n    };\n    return _this;\n  }\n\n  return ModuleForm;\n}(React.Component);\n\nvar EditAccountInfo = _Form.create()(ModuleForm);\n\nexport { EditAccountInfo };","map":null,"metadata":{},"sourceType":"module"}