{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport \"antd/lib/badge/style\";\nimport _Badge from \"antd/lib/badge\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport React from \"react\";\nimport { format as formatDate } from 'date-fns';\nimport libphonenumber from 'google-libphonenumber';\nimport moment from 'moment';\nimport Router from 'next/router';\nimport numeral from 'numeral';\nimport CONFIG from './config';\nimport { handleConfirmOtherError } from './handleError';\nimport { positiveIntegerReg } from './regexp'; // 图片错误时, 使用默认头像替换\n\nexport var handleImgError = function handleImgError(e) {\n  e.target.onerror = null;\n  e.target.src = CONFIG.default.avatar;\n}; // 将接口字符串转换成换行段落\n\nexport var breakLine = function breakLine(str) {\n  if (!str) {\n    return null;\n  }\n\n  return str.split('\\n').map(function (v, i) {\n    return React.createElement(\"p\", {\n      style: {\n        whiteSpace: 'pre-wrap'\n      },\n      key: i\n    }, v);\n  });\n}; // 验证合适大小的正整数\n\nexport var checkPositive = function checkPositive(_rule, value, callback) {\n  if (!positiveIntegerReg.test(value)) {\n    callback('请输入正整数');\n  }\n\n  if (Number(value) >= Math.pow(2, 32)) {\n    callback('请输入合理的正整数');\n  }\n\n  callback();\n}; // 从 error 中解析出 errorCode\n\nexport var parseErrorCode = function parseErrorCode(error) {\n  if (error.graphQLErrors && error.graphQLErrors[0] && error.graphQLErrors[0].data && error.graphQLErrors[0].data.code) {\n    return error.graphQLErrors[0].data.code;\n  }\n\n  return null;\n}; // 错误处理函数\n\nexport var errMessage = function errMessage(error) {\n  if (!handleConfirmOtherError(error)) {\n    return;\n  }\n\n  _message.destroy(); // 学习计划，点击卡片后弹出框操作错误处理\n\n\n  if (parseErrorCode(error) === 'StatusChangeError' || parseErrorCode(error) === 'NonExistent') {\n    _message.error(CONFIG.txt.error);\n\n    return;\n  } // 无法删除简历最后一条必填项目\n\n\n  if (parseErrorCode(error) === 'DeleteRequiredError') {\n    _message.error(CONFIG.txt.deletedRequired);\n\n    return;\n  } // 记录已被删除\n\n\n  if (parseErrorCode(error) === 'RecordDeleted') {\n    _message.error(CONFIG.txt.recordDeleted);\n\n    return;\n  } // 文件夹不存在\n\n\n  if (parseErrorCode(error) === 'NonExistent') {\n    _message.error(CONFIG.txt.folder.notFound);\n\n    return;\n  }\n\n  _message.error(CONFIG.txt.error);\n}; // 把静态数据处理为 Cascadar 的 options 结构\n\nexport var toCascadarOptions = function toCascadarOptions(data, depth) {\n  if (!depth) {\n    return null;\n  }\n\n  return data.map(function (item) {\n    var id = item.id,\n        name = item.name,\n        children = item.children;\n\n    var obj = _objectSpread({\n      value: id,\n      label: name\n    }, item);\n\n    if (children) {\n      _Object$assign(obj, {\n        children: toCascadarOptions(children, depth - 1)\n      });\n    }\n\n    return obj;\n  });\n}; // 静态数据生成 options\n\nexport var renderSelectOptions = function renderSelectOptions(data) {\n  if (!data.length) {\n    return;\n  }\n\n  return data.map(function (item, index) {\n    return React.createElement(_Select.Option, {\n      value: item.id,\n      key: index\n    }, item.name);\n  });\n}; // 传入 account, 返回 名字 或 名字(昵称)\n\nvar nameNicknameType = 'name-nickname';\nexport var getPersonName = function getPersonName(account) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : nameNicknameType;\n  var text = '';\n\n  if (account && account.person) {\n    var _account$person = account.person,\n        name = _account$person.name,\n        nickname = _account$person.nickname;\n\n    if (name) {\n      text += name;\n    }\n\n    if (nickname && type === nameNicknameType) {\n      // 如果 name 不为空, nickname 加括号\n      if (text) {\n        text += '(' + nickname + ')';\n      } else {\n        text += nickname;\n      }\n    }\n  }\n\n  return text;\n}; // 拼接行业字段\n\nexport var getIndustryText = function getIndustryText(industries) {\n  if (industries && industries.length) {\n    return industries.map(function (industry) {\n      return industry.name;\n    }).join('、');\n  }\n\n  return '';\n}; // 渲染状态 badge\n\nexport var renderValidBadge = function renderValidBadge(valid) {\n  if (valid) {\n    return React.createElement(_Badge, {\n      color: \"green\",\n      text: \"\\u6709\\u6548\"\n    });\n  }\n\n  return React.createElement(_Badge, {\n    color: \"#ccc\",\n    text: \"\\u65E0\\u6548\"\n  });\n}; // 表格中文字溢出显示...的render\n\nexport var overflowRender = function overflowRender(value) {\n  return React.createElement(\"div\", {\n    style: {\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      wordBreak: 'break-all',\n      whiteSpace: 'nowrap'\n    }\n  }, React.createElement(\"span\", null, value));\n}; // 过去时间不可选择\n\nexport var disablePast = function disablePast(current) {\n  return current.isBefore(moment(), 'day');\n}; // 处理后的数据结构\n\n// 处理权限数据结构为双层数组\nexport var handlePermissions = function handlePermissions(permissions) {\n  var result = [];\n  permissions.forEach(function (permission) {\n    // 如果是一级权限\n    if (!permission.upperPermission) {\n      var id = permission.id,\n          name = permission.name;\n      result.push({\n        id: id,\n        name: name,\n        children: []\n      });\n    } else {\n      // 查找是否存在一级权限\n      var _permission$upperPerm = permission.upperPermission,\n          _id = _permission$upperPerm.id,\n          _name = _permission$upperPerm.name;\n      var filtered = result.filter(function (v) {\n        return v.id === _id;\n      });\n\n      if (!filtered.length) {\n        result.push({\n          id: _id,\n          name: _name,\n          children: [{\n            id: permission.id,\n            name: permission.name\n          }]\n        });\n      } else {\n        result.forEach(function (v) {\n          if (v.id === _id) {\n            v.children.push({\n              id: permission.id,\n              name: permission.name\n            });\n          }\n        });\n      }\n    }\n  });\n  return result;\n}; // 获取缓存中的字段\n\nexport var getCache = function getCache(key) {\n  return JSON.parse(localStorage.getItem(key));\n}; // 获取全部枚举\n\nexport var allEnum = function allEnum() {\n  var cache = localStorage.getItem('zhiwen_all_enum');\n\n  if (cache) {\n    return JSON.parse(cache);\n  } else {\n    _message.error('本地数据异常，请重新登录');\n\n    Router.push('/login');\n  }\n}; // 电话号码的区号和号码之间加空格\n\nexport var phoneNumberFormat = function phoneNumberFormat(phoneNumber) {\n  var country = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'CN';\n\n  if (!phoneNumber) {\n    return '- -';\n  }\n\n  var phoneUtil = libphonenumber.PhoneNumberUtil.getInstance();\n  var numberObj = phoneUtil.parseAndKeepRawInput(phoneNumber, country);\n  var countryCode = numberObj.getCountryCode();\n  var numberCode = numberObj.getNationalNumber();\n  return \"+\".concat(countryCode, \" \").concat(numberCode);\n}; // 格式化时间\n\nexport var dateText = function dateText(date) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'day';\n  if (!date) return '- -';\n  var formats = {\n    day: 'YYYY/MM/DD',\n    min: 'YYYY/MM/DD HH:mm',\n    sec: 'YYYY/MM/DD HH:mm:ss'\n  };\n  return formatDate(date, formats[type]);\n}; // 判断展示性字段是否为空\n\nexport var checkEmpty = function checkEmpty(value) {\n  return value ? value : '- -';\n}; // 判断枚举类型是否为空\n\nexport var checkEnumEmpty = function checkEnumEmpty(value) {\n  return value ? value.name : '- -';\n}; // 格式化价格\n\nexport var formatPrice = function formatPrice(value) {\n  return numeral(value / 100).format('0,0.00');\n}; // 价格文案\n\nexport var priceText = function priceText(value) {\n  return checkEmpty(formatPrice(value));\n}; // 解析 LocationSelect 的返回值为 { cityIds: string[], foreignCityIds: string[]}\n\nexport var parseCityIds = function parseCityIds(ids) {\n  var result = {\n    cityIds: [],\n    foreignCityIds: []\n  };\n\n  if (_Array$isArray(ids)) {\n    ids.forEach(function (v) {\n      var _v$split = v.split('+'),\n          _v$split2 = _slicedToArray(_v$split, 2),\n          type = _v$split2[0],\n          id = _v$split2[1];\n\n      if (type === 'DOMESTIC') {\n        result.cityIds.push(id);\n      }\n\n      if (type === 'FOREIGN') {\n        result.foreignCityIds.push(id);\n      }\n    });\n  } else {\n    var _ids$split = ids.split('+'),\n        _ids$split2 = _slicedToArray(_ids$split, 2),\n        type = _ids$split2[0],\n        id = _ids$split2[1];\n\n    if (type === 'DOMESTIC') {\n      result.cityIds.push(id);\n    }\n\n    if (type === 'FOREIGN') {\n      result.foreignCityIds.push(id);\n    }\n  }\n\n  return result;\n}; // 地区选择器回填数据\n\nexport var genFillBackCityIds = function genFillBackCityIds(cities, foreignCities) {\n  return [].concat(_toConsumableArray(cities.map(function (v) {\n    return \"DOMESTIC+\".concat(v.id);\n  })), _toConsumableArray(foreignCities.map(function (v) {\n    return \"FOREIGN+\".concat(v.id);\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}