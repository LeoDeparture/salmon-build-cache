{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport LimitedInput from '../../../../components/Input/LimitedInput';\nimport { parseErrorCode } from '../../../../lib/commonJs';\n\nvar NameModal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NameModal, _React$Component);\n\n  function NameModal(props) {\n    var _this;\n\n    _classCallCheck(this, NameModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NameModal).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"showPop\", function () {\n      _this.setState({\n        visible: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hidePop\", function () {\n      _this.setState({\n        visible: false,\n        value: '' // 清空输入框内容\n\n      }); // 清空提示文案\n\n\n      _this.controlAlert(false);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"controlAlert\", function (isShow) {\n      _this.setState({\n        validateStatus: isShow ? 'error' : '',\n        help: isShow ? '用户名已存在' : ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOk\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var value, name, _this$props, mutateCatalog, type, id, action, successMsg;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              value = _this.state.value;\n              name = value && value.trim();\n              _this$props = _this.props, mutateCatalog = _this$props.mutateCatalog, type = _this$props.type, id = _this$props.updateParams.id;\n\n              if (type === 'create' && name) {\n                action = mutateCatalog.bind(_assertThisInitialized(_this), 'create', {\n                  name: name\n                });\n                successMsg = '已成功创建目录。';\n              }\n\n              if (type === 'update' && name && id) {\n                action = mutateCatalog.bind(_assertThisInitialized(_this), 'update', {\n                  name: name,\n                  id: id\n                });\n                successMsg = '已成功修改目录名称。';\n              }\n\n              if (action) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _this.setState({\n                loading: true\n              });\n\n              action().then(function (result) {\n                if (result) {\n                  _this.setState({\n                    visible: false,\n                    value: '' // 清空输入框内容\n\n                  });\n\n                  _message.success(successMsg);\n                }\n              }).catch(function (error) {\n                // 用户名已存在\n                if (parseErrorCode(error) === 'serviceCatalogExist') {\n                  _this.controlAlert(true);\n                }\n              }).finally(function () {\n                _this.setState({\n                  loading: false\n                });\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeInput\", function (e) {\n      _this.setState({\n        value: e.target.value\n      });\n\n      _this.controlAlert(false);\n    });\n\n    _this.state = {\n      visible: false,\n      loading: false,\n      value: '',\n      validateStatus: '',\n      help: ''\n    };\n    return _this;\n  }\n\n  _createClass(NameModal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.onRef(this);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.updateParams !== this.props.updateParams) {\n        this.setState({\n          value: this.props.updateParams.name\n        });\n      }\n    } // 显示弹窗\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var type = this.props.type;\n      var _this$state = this.state,\n          visible = _this$state.visible,\n          loading = _this$state.loading,\n          value = _this$state.value,\n          validateStatus = _this$state.validateStatus,\n          help = _this$state.help;\n      return React.createElement(_Modal, {\n        title: type === 'create' ? '创建目录' : '修改目录名称',\n        visible: visible,\n        closable: false,\n        maskClosable: false,\n        okButtonProps: {\n          disabled: !value.trim()\n        },\n        onOk: this.handleOk,\n        onCancel: this.hidePop,\n        okText: \"\\u786E\\u8BA4\".concat(type === 'create' ? '创建' : '修改'),\n        cancelText: \"\\u53D6\\u6D88\",\n        confirmLoading: loading,\n        width: 360,\n        destroyOnClose: true\n      }, React.createElement(ContentWrapper, null, React.createElement(_Form.Item, {\n        validateStatus: validateStatus,\n        help: help\n      }, React.createElement(LimitedInput, {\n        autoFocus: true,\n        placeholder: \"\\u8BF7\\u8F93\\u5165\\u76EE\\u5F55\\u540D\\u79F0\",\n        limit: 16,\n        onChange: this.onChangeInput,\n        value: value\n      }))));\n    }\n  }]);\n\n  return NameModal;\n}(React.Component);\n\nexport default NameModal;\nvar ContentWrapper = styled.div.withConfig({\n  displayName: \"NameModal__ContentWrapper\",\n  componentId: \"sc-19w2m2-0\"\n})([\"height:84px;\"]);","map":null,"metadata":{},"sourceType":"module"}