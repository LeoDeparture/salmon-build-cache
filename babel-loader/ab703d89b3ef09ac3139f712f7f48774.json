{"ast":null,"code":"import _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport moment from 'moment';\nvar commonFunc = {\n  /**\n   * @description: 合并地址信息到数据对象, 用于数据回填\n   * @param componentObj 组件对象, 即组件的 this\n   * @param addressArr 地址数组:[国家, 省, 市]\n   * @param targetObj 目标对象 (数据回填的 data 对象)\n   */\n  assignAddress: function assignAddress(componentObj, addressArr, targetObj) {\n    /**\n     * 与接口约定, 国内地址不会有 countryId, 国外地址才会有\n     * 但数据并不全部按照这个规则, 防止接口出现两种情况, 做两种判断\n     */\n    if (addressArr[0] && addressArr[0].name === '中国' || !addressArr[0]) {\n      var locationArr = [];\n\n      if (addressArr[1] && addressArr[1].id) {\n        locationArr.push(addressArr[1].id);\n      }\n\n      if (addressArr[2] && addressArr[2].id) {\n        locationArr.push(addressArr[2].id);\n      }\n\n      _Object$assign(targetObj, {\n        location: locationArr\n      });\n\n      componentObj.setState({\n        selectedAddressType: 0\n      });\n    } else if (addressArr[0] && addressArr[0].id) {\n      _Object$assign(targetObj, {\n        foreignCountryId: addressArr[0].id\n      });\n\n      componentObj.setState({\n        selectedAddressType: 1\n      });\n    }\n  },\n\n  /**\n   * @description: 处理数据中的基础类型, 变成可回填数据\n   * @param data 数据对象\n   */\n  formatData: function formatData(data) {\n    if (_JSON$stringify(data) !== '{}') {\n      return;\n    }\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(data), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var e = _step.value;\n\n        if (e && e instanceof Date) {\n          e = moment(e);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  },\n  filterData: function filterData(input, option) {\n    return option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n  }\n};\nexport default commonFunc;","map":null,"metadata":{},"sourceType":"module"}