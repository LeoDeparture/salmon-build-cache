{"ast":null,"code":"import \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport Router from 'next/router';\nimport React, { Component } from 'react';\nimport Loading from '../../../../components/Loading';\nimport { MutationDeleteQuestionBank } from '../../questionBanks/containers/Mutations';\nimport Header from '../components/Header';\nimport RootContent from '../components/RootContent';\nimport { MutationChangeQuestionBankStatus } from './Mutations';\nimport GetQuestionBankById, { QueryGetQuestionBankById } from './QueryGetQuestionBankById';\n\nvar QuestionBankDetail =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuestionBankDetail, _Component);\n\n  function QuestionBankDetail() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, QuestionBankDetail);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(QuestionBankDetail)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"deleteQuestionBank\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", _this.client.mutate({\n                mutation: MutationDeleteQuestionBank,\n                variables: {\n                  id: Router.query.id\n                }\n              }).then(function () {\n                _message.success('已成功删除套题。', 1.5, function () {\n                  Router.push('/question-bank/question-banks');\n                });\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickDeleteBtn\", function () {\n      _Modal.confirm({\n        title: '确认删除此套题吗？',\n        icon: React.createElement(_Icon, {\n          type: \"question-circle\",\n          theme: \"filled\"\n        }),\n        okText: '确认删除',\n        onOk: _this.deleteQuestionBank,\n        cancelText: '取消',\n        okButtonProps: {\n          type: 'danger',\n          ghost: true\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeQuestionBankStatus\", function (isValid) {\n      _this.client.mutate({\n        mutation: MutationChangeQuestionBankStatus,\n        variables: {\n          input: {\n            id: Router.query.id,\n            isValid: isValid\n          }\n        },\n        refetchQueries: [{\n          query: QueryGetQuestionBankById,\n          variables: {\n            id: Router.query.id\n          }\n        }]\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(QuestionBankDetail, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(GetQuestionBankById, {\n        query: QueryGetQuestionBankById,\n        variables: {\n          id: Router.query.id\n        },\n        fetchPolicy: \"network-only\"\n      }, function (_ref2) {\n        var data = _ref2.data,\n            error = _ref2.error,\n            loading = _ref2.loading,\n            client = _ref2.client,\n            refetch = _ref2.refetch;\n        _this2.client = client;\n        _this2.refetch = refetch;\n\n        if (loading) {\n          return React.createElement(Loading, null);\n        }\n\n        if (error) {\n          return null;\n        }\n\n        var getQuestionBankById = data.getQuestionBankById;\n        return React.createElement(React.Fragment, null, React.createElement(Header, {\n          getQuestionBankById: getQuestionBankById,\n          deleteQuestionBank: _this2.onClickDeleteBtn,\n          changeQuestionBankStatus: _this2.changeQuestionBankStatus\n        }), React.createElement(RootContent, {\n          getQuestionBankById: getQuestionBankById\n        }));\n      });\n    }\n  }]);\n\n  return QuestionBankDetail;\n}(Component);\n\nexport { QuestionBankDetail as default };","map":null,"metadata":{},"sourceType":"module"}