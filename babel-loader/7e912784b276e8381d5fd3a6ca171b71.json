{"ast":null,"code":"import \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport Router from 'next/router';\nimport React from 'react';\nimport Loading from '../../../../components/Loading';\nimport { parseErrorCode } from '../../../../lib/commonJs';\nimport ListRoles, { QueryListRoles } from '../../../role/roles/containers/QueryListRoles';\nimport CreateAccount from '../components/CreateAccount';\nimport { MutationCreateAccount, MutationCreateAccountByPerson } from './Mutations';\n\nvar CreateAccountContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CreateAccountContainer, _React$Component);\n\n  function CreateAccountContainer(props) {\n    var _this;\n\n    _classCallCheck(this, CreateAccountContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateAccountContainer).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"createAccountByPerson\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(id, email) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", _this.client.mutate({\n                  mutation: MutationCreateAccountByPerson,\n                  variables: {\n                    input: {\n                      email: email,\n                      roleId: id\n                    }\n                  }\n                }).then(function (result) {\n                  if (result.data) {\n                    _message.success('已成功开通账号', function () {\n                      Router.push({\n                        pathname: '/accounts'\n                      });\n                    });\n                  }\n                }));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"createAccount\",\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(_ref2) {\n        var id, email;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                id = _ref2.id, email = _ref2.email;\n\n                _this.setState({\n                  loading: true\n                });\n\n                _this.client.mutate({\n                  mutation: MutationCreateAccount,\n                  variables: {\n                    input: {\n                      email: email,\n                      roleId: id\n                    }\n                  }\n                }).then(function (result) {\n                  if (result.data.accountRole) {\n                    _message.success('已成功创建账号并发送邀请链接邮件', function () {\n                      Router.back();\n                    });\n                  }\n                }).catch(function (err) {\n                  var errorCode = parseErrorCode(err);\n\n                  if (errorCode === 'AlreadyExist') {\n                    _Modal.warning({\n                      content: '您输入的邮箱账号已存在于此团队中。',\n                      okText: '我知道了',\n                      title: '账号已存在此团队中'\n                    });\n                  }\n\n                  if (errorCode === 'PersonExist') {\n                    _this.showConfirm(id, email);\n                  }\n                }).finally(function () {\n                  _this.setState({\n                    loading: false\n                  });\n                });\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"showConfirm\", function (id, email) {\n      _Modal.confirm({\n        cancelText: '取消',\n        centered: true,\n        content: '你输入的邮箱账号已存在当前组织中，但不在当前团队中。是否直接开通此账号并用于当前团队中？',\n        icon: React.createElement(_Icon, {\n          type: \"exclamation-circle\",\n          theme: \"filled\"\n        }),\n        okText: '直接开通',\n        okType: 'primary',\n        onOk: _this.createAccountByPerson.bind(_assertThisInitialized(_this), id, email),\n        title: \"\\u8D26\\u53F7\\u5DF2\\u5B58\\u5728\\u4E8E\\u5F53\\u524D\\u7EC4\\u7EC7\\u4E2D\"\n      });\n    });\n\n    _this.state = {\n      loading: false\n    };\n    return _this;\n  } // 根据 person 创建账号\n\n\n  _createClass(CreateAccountContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(ListRoles, {\n        query: QueryListRoles,\n        variables: {\n          input: {\n            where: {\n              isDeleted: false\n            }\n          }\n        }\n      }, function (_ref4) {\n        var data = _ref4.data,\n            loading = _ref4.loading,\n            error = _ref4.error,\n            client = _ref4.client;\n        _this2.client = client;\n\n        if (loading) {\n          return React.createElement(Loading, null);\n        }\n\n        if (error) return null;\n        var roles = data.roles;\n        return React.createElement(CreateAccount, {\n          roles: roles,\n          loading: _this2.state.loading,\n          createAccount: _this2.createAccount\n        });\n      });\n    }\n  }]);\n\n  return CreateAccountContainer;\n}(React.Component);\n\nexport { CreateAccountContainer as default };","map":null,"metadata":{},"sourceType":"module"}