{"ast":null,"code":"import \"antd/lib/config-provider/style\";\nimport _ConfigProvider from \"antd/lib/config-provider\";\nimport \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"antd/lib/popover/style\";\nimport _Popover from \"antd/lib/popover\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { format } from 'date-fns';\nimport React from 'react';\nimport EmptyComponent from '../../../../components/Empty';\nimport TableHeader from '../../../../components/Table/TableHeader';\nimport TableOperation from '../../../../components/Table/TableOperation';\nimport { parseErrorCode } from '../../../../lib/commonJs';\nimport NameModal from './NameModal';\n\nvar ServiceCatelogTable =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ServiceCatelogTable, _React$Component);\n\n  function ServiceCatelogTable(props) {\n    var _this;\n\n    _classCallCheck(this, ServiceCatelogTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ServiceCatelogTable).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onRefNameModal\", function (ref) {\n      _this.nameModal = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openNameModal\", function (type) {\n      _this.setState({\n        nameModalType: type\n      }, _this.nameModal.showPop);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickCreate\", function () {\n      _this.openNameModal('create');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickUpdateName\", function (id, name) {\n      _this.setState({\n        updateParams: {\n          id: id,\n          name: name\n        }\n      });\n\n      _this.openNameModal('update');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickDelete\", function (id) {\n      var loading = _this.state.loading;\n\n      _Modal.confirm({\n        title: '确认删除此目录吗？',\n        icon: React.createElement(_Icon, {\n          type: \"question-circle\",\n          theme: \"filled\"\n        }),\n        content: React.createElement(\"div\", {\n          style: {\n            height: '60px'\n          }\n        }),\n        okText: '确认删除',\n        cancelText: '取消',\n        okButtonProps: {\n          type: 'danger',\n          ghost: true,\n          loading: loading\n        },\n        onOk: _this.excuteDelete.bind(_assertThisInitialized(_this), id)\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"excuteDelete\", function (id) {\n      if (!id) return;\n\n      _this.setState({\n        loading: true\n      });\n\n      _this.props.mutateCatalog('delete', {\n        id: id\n      }).then(function (result) {\n        if (result) {\n          _message.success('已成功删除目录。');\n        }\n      }).catch(function (error) {\n        // 已有关联方案, 无法删除\n        if (parseErrorCode(error) === 'serviceCatalogHasBeenUsed') {\n          _this.showDeleteFailAlert();\n        }\n      }).finally(function () {\n        _this.setState({\n          loading: false\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showDeleteFailAlert\", function () {\n      _Modal.info({\n        title: '暂时无法删除此目录',\n        content: '已有咨询方案关联该目录，解除关联关系后，再尝试删除。',\n        icon: React.createElement(_Icon, {\n          type: \"exclamation-circle\",\n          style: {\n            color: '#FF991F'\n          },\n          theme: \"filled\"\n        }),\n        okText: '我知道了',\n        onOk: _this.props.pressOkBtnOnDeleteFailAlter\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTableChange\", function (_pagination, _filters, sorter) {\n      _this.props.onChangeSorter(sorter);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderPopover\", function () {\n      var content = React.createElement(React.Fragment, null, React.createElement(\"div\", null, \"\\u5DF2\\u6709\\u54A8\\u8BE2\\u65B9\\u6848\\u5173\\u8054\\u8BE5\\u76EE\"), React.createElement(\"div\", null, \"\\u5F55\\uFF0C\\u65E0\\u6CD5\\u5220\\u9664\\u3002\"));\n      return React.createElement(_Popover, {\n        content: content,\n        trigger: \"hover\",\n        placement: \"topRight\"\n      }, React.createElement(\"a\", {\n        style: {\n          color: '#FFD4CB'\n        }\n      }, \"\\u5220\\u9664\"));\n    });\n\n    _this.state = {\n      nameModalType: 'create',\n      updateParams: {\n        id: '',\n        name: ''\n      },\n      loading: false\n    };\n    return _this;\n  }\n\n  _createClass(ServiceCatelogTable, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          serviceCatalogs = _this$props.serviceCatalogs,\n          mutateCatalog = _this$props.mutateCatalog,\n          footer = _this$props.footer;\n      var _this$state = this.state,\n          nameModalType = _this$state.nameModalType,\n          updateParams = _this$state.updateParams; // 处理数据源\n\n      var dataSource = serviceCatalogs.map(function (catalog) {\n        return _objectSpread({\n          key: catalog.id\n        }, catalog);\n      }); // 生成表格 column\n\n      var columnsData = [{\n        title: '目录名称',\n        key: 'name',\n        width: '51%'\n      }, {\n        title: '已关联咨询方案数',\n        key: 'relatedServicePlanCount',\n        width: '17%'\n      }, {\n        title: '创建时间',\n        key: 'createdAt',\n        width: '17%',\n        sorter: true,\n        render: function render(createdAt) {\n          return format(createdAt, 'YYYY/MM/DD HH:mm');\n        }\n      }, {\n        title: '操作',\n        key: 'operation',\n        width: '15%',\n        render: function render(_text, record) {\n          var id = record.id,\n              name = record.name,\n              relatedServicePlanCount = record.relatedServicePlanCount; // 是否关联方案\n\n          var noPlan = !relatedServicePlanCount; // 操作列表\n\n          var operations = [{\n            title: '修改名称',\n            onClick: _this2.onClickUpdateName.bind(_this2, id, name)\n          }, {\n            title: '删除',\n            color: '#FF5230',\n            onClick: _this2.onClickDelete.bind(_this2, id),\n            render: !noPlan && _this2.renderPopover\n          }];\n          return React.createElement(TableOperation, {\n            operations: operations\n          });\n        }\n      }];\n      var columns = columnsData.map(function (column) {\n        return _objectSpread({}, column, {\n          dataIndex: column.key,\n          ellipsis: true\n        });\n      });\n\n      var renderEmpty = function renderEmpty() {\n        return React.createElement(EmptyComponent, {\n          description: \"\\u6682\\u65E0\\u6570\\u636E\"\n        });\n      };\n\n      return React.createElement(React.Fragment, null, React.createElement(TableHeader, {\n        buttonText: \"\\u521B\\u5EFA\\u76EE\\u5F55\",\n        onClickButton: this.onClickCreate\n      }), React.createElement(_ConfigProvider, {\n        renderEmpty: renderEmpty\n      }, React.createElement(_Table, {\n        style: {\n          flex: 1,\n          marginTop: '24px'\n        },\n        pagination: false,\n        dataSource: dataSource,\n        columns: columns,\n        footer: footer,\n        onChange: this.onTableChange\n      })), React.createElement(NameModal, {\n        onRef: this.onRefNameModal,\n        type: nameModalType,\n        mutateCatalog: mutateCatalog,\n        updateParams: updateParams\n      }));\n    }\n  }]);\n\n  return ServiceCatelogTable;\n}(React.Component);\n\nexport { ServiceCatelogTable as default };","map":null,"metadata":{},"sourceType":"module"}