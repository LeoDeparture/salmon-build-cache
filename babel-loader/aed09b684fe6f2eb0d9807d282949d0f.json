{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport React, { Component } from 'react';\nimport { ApolloConsumer } from 'react-apollo';\nimport { parseErrorCode } from '../../../lib/commonJs';\nimport { MutationChangeJobStatus } from '../jobs/containers/Mutations';\n// 显示失败提示\nexport var showInvalidModal = function showInvalidModal(title, alertText) {\n  _Modal.warning({\n    centered: true,\n    content: React.createElement(\"p\", {\n      style: {\n        minWidth: '302px'\n      }\n    }, alertText),\n    icon: React.createElement(_Icon, {\n      type: \"exclamation-circle\",\n      theme: \"filled\"\n    }),\n    okText: '我知道了',\n    getContainer: '#service-module',\n    title: title\n  });\n};\n\nvar ActionButton =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ActionButton, _Component);\n\n  function ActionButton() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ActionButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ActionButton)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"updateJob\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(status) {\n        var id;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                id = _this.props.id;\n                return _context.abrupt(\"return\", _this.client.mutate({\n                  mutation: MutationChangeJobStatus,\n                  variables: {\n                    id: id,\n                    status: status\n                  }\n                }).then(function () {\n                  _message.success(\"\\u5DF2\\u6210\\u529F\".concat(status === 'PUBLISHED' ? '上线' : '下线'));\n                }).catch(function (error) {\n                  var errorCode = parseErrorCode(error);\n\n                  if (errorCode === 'JobValidDateInvalid') {\n                    showInvalidModal('无法上线', '有效期已过，请修改有效期后，再尝试上线。');\n                  }\n\n                  if (errorCode === 'OperatorAccountNotExist') {\n                    showInvalidModal('无法上线', '该岗位负责人已被删除或停用，请重新选择后，再尝试上线。');\n                  }\n                }));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickChange\", function (statusKey) {\n      var actionText = statusKey === 'PUBLISHED' ? '下线' : '上线';\n      var actionKey = statusKey === 'PUBLISHED' ? 'INVALID' : 'PUBLISHED';\n\n      _Modal.confirm({\n        centered: true,\n        content: React.createElement(\"p\", {\n          style: {\n            minWidth: '302px'\n          }\n        }, \"\".concat(actionText, \"\\u540E\\uFF0C\\u5B66\\u5458\").concat(actionText === '上线' ? '可' : '将无法', \"\\u5728App\\u4E2D\\u67E5\\u770B\\u5E76\\u6295\\u9012\\u6B64\\u5C97\\u4F4D\\u3002\")),\n        getContainer: '#service-module',\n        icon: React.createElement(_Icon, {\n          type: \"question-circle\",\n          theme: \"filled\"\n        }),\n        okText: \"\\u786E\\u8BA4\".concat(actionText),\n        onOk: _this.updateJob.bind(_assertThisInitialized(_this), actionKey),\n        title: \"\\u786E\\u8BA4\".concat(actionText, \"\\u6B64\\u5C97\\u4F4D\\u5417\\uFF1F\")\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ActionButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          mode = _this$props.mode,\n          status = _this$props.status;\n      return React.createElement(ApolloConsumer, null, function (client) {\n        _this2.client = client;\n        var actionText = status.key === 'PUBLISHED' ? '下线' : '上线';\n\n        var onClick = _this2.onClickChange.bind(_this2, status.key);\n\n        if (mode === 'button') {\n          return React.createElement(_Button, {\n            id: \"toggle\",\n            type: status.key === 'PUBLISHED' ? 'ghost' : 'primary',\n            onClick: onClick\n          }, actionText);\n        }\n\n        if (mode === 'link') {\n          return React.createElement(\"a\", {\n            id: \"toggle\",\n            onClick: onClick\n          }, actionText);\n        }\n\n        return null;\n      });\n    }\n  }]);\n\n  return ActionButton;\n}(Component);\n\n_defineProperty(ActionButton, \"defaultProps\", {\n  mode: 'button'\n});\n\nexport { ActionButton as default };","map":null,"metadata":{},"sourceType":"module"}