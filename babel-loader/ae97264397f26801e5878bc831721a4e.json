{"ast":null,"code":"import \"antd/lib/spin/style\";\nimport _Spin from \"antd/lib/spin\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport Router from 'next/router';\nimport { errMessage } from '../../../lib/commonJs';\nimport CONFIG from '../../../lib/config';\nimport { loadingStyle } from '../components/FileCenterComponent';\nimport FileList from '../components/FileList';\nimport { ListAllFoldersInput } from './FolderListContainer';\nimport { MutationAddFileLinksToFolder } from './folders/MutationAddFileLinksToFolder';\nimport { QuerySearchAccount } from './folders/QuerySearchAccount';\nimport { MutationCreateFolder } from './MutationCreateFolder';\nimport { MutationRemoveFileLinks } from './MutationRemoveFileLinks';\nimport { MutationSendFileLinks } from './MutationSendFileLinks';\nimport ListAllFolders, { query as QueryListAllFolders } from './QueryListAllFolders';\nimport ListFileLinks, { QueryListFolderFileLinks, QueryListReceivedFileLinks, QueryListSentFileLinks } from './QueryListFileLinks'; // 每次加载多少条数据\n\nexport var itemsPerPage = 20;\n\nvar ListAllFoldersContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ListAllFoldersContainer, _React$Component);\n\n  function ListAllFoldersContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ListAllFoldersContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ListAllFoldersContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loadingMore: false,\n      pageInfo: {\n        hasPreviousPage: false,\n        hasNextPage: false,\n        startCursor: '',\n        endCursor: ''\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"ListFolderFileLinksInput\", {\n      input: {\n        first: itemsPerPage,\n        where: {\n          folder: {\n            id: Router.query.id\n          }\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"ListFileLinksInput\", {\n      input: {\n        first: itemsPerPage,\n        where: {}\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deleteFile\", function (fileLinkIds, success, complete) {\n      var type = _this.props.type;\n      var refetchQueries;\n\n      if (type === 'folder') {\n        refetchQueries = {\n          query: QueryListFolderFileLinks,\n          variables: _this.ListFolderFileLinksInput\n        };\n      }\n\n      if (type === 'received') {\n        refetchQueries = {\n          query: QueryListReceivedFileLinks,\n          variables: _this.ListFileLinksInput\n        };\n      }\n\n      if (type === 'sent') {\n        refetchQueries = {\n          query: QueryListSentFileLinks,\n          variables: _this.ListFileLinksInput\n        };\n      }\n\n      return _this.client.mutate({\n        mutation: MutationRemoveFileLinks,\n        variables: {\n          input: {\n            fileLinkIds: fileLinkIds\n          }\n        },\n        // 更新文件夹数据\n        refetchQueries: [refetchQueries]\n      }).then(function (result) {\n        if (result.data) {\n          _message.success(CONFIG.txt.file.delete.success);\n\n          success();\n          complete();\n        }\n      }).catch(function (error) {\n        errMessage(error);\n        complete();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"sendFile\", function (accountIds, fileLinkIds, success, complete) {\n      _this.client.mutate({\n        mutation: MutationSendFileLinks,\n        variables: {\n          input: {\n            accountIds: accountIds,\n            fileLinkIds: fileLinkIds\n          }\n        },\n        refetchQueries: [{\n          query: QueryListSentFileLinks,\n          variables: _this.ListFileLinksInput\n        }]\n      }).then(function (result) {\n        if (result.data) {\n          _message.success(CONFIG.txt.file.send.success);\n\n          success();\n          complete();\n        }\n      }).catch(function (error) {\n        errMessage(error);\n        complete();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createFolder\", function (variables, success, complete) {\n      _this.client.mutate({\n        mutation: MutationCreateFolder,\n        variables: {\n          input: variables\n        },\n        // 创建文件夹后刷新列表\n        refetchQueries: [{\n          query: QueryListAllFolders,\n          variables: ListAllFoldersInput\n        }, {\n          query: QueryListAllFolders,\n          variables: {\n            input: {\n              where: {\n                owner: {\n                  person: {\n                    id: localStorage.getItem('zhiwen_person_id')\n                  }\n                }\n              }\n            }\n          }\n        }]\n      }).then(function (result) {\n        if (result.data) {\n          _message.destroy();\n\n          _message.success(CONFIG.txt.folder.create.success);\n\n          success();\n          complete();\n        }\n      }).catch(function (error) {\n        _message.destroy();\n\n        errMessage(error);\n        complete();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"copyFile\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(variables, targetFolderId, success, complete) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.client.mutate({\n                  mutation: MutationAddFileLinksToFolder,\n                  variables: {\n                    input: variables\n                  },\n                  // 复制文件成功后, 更新目标文件夹中的文件\n                  refetchQueries: [{\n                    query: QueryListFolderFileLinks,\n                    variables: {\n                      input: {\n                        first: itemsPerPage,\n                        where: {\n                          folder: {\n                            id: targetFolderId\n                          }\n                        }\n                      }\n                    }\n                  }]\n                }).then(function (result) {\n                  if (result.data) {\n                    _message.success(CONFIG.txt.file.copy.success);\n\n                    success();\n                    complete();\n                  }\n                }).catch(function (error) {\n                  errMessage(error);\n                  complete();\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3, _x4) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"searchAccount\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(email) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (email) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", null);\n\n              case 2:\n                _context2.prev = 2;\n                _context2.next = 5;\n                return _this.client.query({\n                  query: QuerySearchAccount,\n                  variables: {\n                    input: {\n                      email: email\n                    }\n                  }\n                });\n\n              case 5:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](2);\n                return _context2.abrupt(\"return\", errMessage(_context2.t0));\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[2, 8]]);\n      }));\n\n      return function (_x5) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"storePageInfo\", function (data) {\n      var pageInfo = data.folderFileLinks.pageInfo;\n\n      _this.setState({\n        pageInfo: pageInfo\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"queryMore\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var type, result;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              type = _this.props.type;\n\n              _this.setState({\n                loadingMore: true\n              });\n\n              _context3.next = 4;\n              return _this.fetchMore({\n                updateQuery: function updateQuery(previousResult, _ref4) {\n                  var fetchMoreResult = _ref4.fetchMoreResult;\n\n                  if (!fetchMoreResult) {\n                    return previousResult;\n                  }\n\n                  var prevData = previousResult.folderFileLinks.edges;\n                  var fetchResult = fetchMoreResult.folderFileLinks.edges;\n                  fetchMoreResult.folderFileLinks.edges = [].concat(_toConsumableArray(prevData), _toConsumableArray(fetchResult));\n                  return fetchMoreResult;\n                },\n                variables: {\n                  input: {\n                    after: _this.state.pageInfo.endCursor,\n                    first: itemsPerPage,\n                    where: type === 'folder' ? {\n                      folder: {\n                        id: Router.query.id\n                      }\n                    } : {}\n                  }\n                }\n              });\n\n            case 4:\n              result = _context3.sent;\n\n              if (!result.loading) {\n                _this.setState({\n                  loadingMore: false\n                });\n              }\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    })));\n\n    return _this;\n  }\n\n  _createClass(ListAllFoldersContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var type = this.props.type; // 根据不同 type 使用不同 query 和变量\n\n      var query;\n\n      if (type === 'folder') {\n        query = QueryListFolderFileLinks;\n      }\n\n      if (type === 'received') {\n        query = QueryListReceivedFileLinks;\n      }\n\n      if (type === 'sent') {\n        query = QueryListSentFileLinks;\n      }\n\n      var variables = type === 'folder' ? this.ListFolderFileLinksInput : this.ListFileLinksInput; // 搜索[** 自己创建的 **]文件夹\n\n      var searchMyFolderVariables = {\n        input: {\n          where: {\n            owner: {\n              person: {\n                id: localStorage.getItem('zhiwen_person_id')\n              }\n            }\n          }\n        }\n      };\n      return React.createElement(ListAllFolders, {\n        query: QueryListAllFolders,\n        variables: searchMyFolderVariables\n      }, function (_ref5) {\n        var myFolderData = _ref5.data,\n            myFolderLoading = _ref5.loading,\n            myFolderError = _ref5.error;\n\n        if (myFolderLoading) {\n          return React.createElement(_Spin, {\n            style: loadingStyle,\n            tip: \"Loading...\",\n            size: \"large\"\n          });\n        }\n\n        if (myFolderError) {\n          errMessage(myFolderError);\n          return null;\n        }\n\n        var myFoldersEdges = myFolderData.listAllFoldersWithPagination.edges; // 去掉 node 节点\n\n        var myFolders = myFoldersEdges.map(function (v) {\n          return v.node;\n        });\n        return React.createElement(ListFileLinks, {\n          query: query,\n          variables: variables,\n          onCompleted: _this2.storePageInfo\n        }, function (_ref6) {\n          var data = _ref6.data,\n              loading = _ref6.loading,\n              error = _ref6.error,\n              client = _ref6.client,\n              fetchMore = _ref6.fetchMore;\n          _this2.client = client;\n          _this2.fetchMore = fetchMore;\n\n          if (loading) {\n            return React.createElement(_Spin, {\n              style: loadingStyle,\n              tip: \"Loading...\",\n              size: \"large\"\n            });\n          }\n\n          if (error) {\n            errMessage(error);\n            return null;\n          }\n\n          var edges = data.folderFileLinks.edges; // 去掉 node 节点\n\n          var fileListData = edges.map(function (v) {\n            return v.node;\n          });\n          return React.createElement(FileList, {\n            fileListData: fileListData,\n            searchAccount: _this2.searchAccount,\n            deleteFile: _this2.deleteFile,\n            sendFile: _this2.sendFile,\n            createFolder: _this2.createFolder,\n            copyFile: _this2.copyFile,\n            type: _this2.props.type,\n            queryMore: _this2.queryMore,\n            isShowFooter: _this2.state.pageInfo.hasNextPage,\n            loading: _this2.state.loadingMore,\n            myFolders: myFolders\n          });\n        });\n      });\n    }\n  }]);\n\n  return ListAllFoldersContainer;\n}(React.Component);\n\nexport default ListAllFoldersContainer;","map":null,"metadata":{},"sourceType":"module"}