{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { format, isSameDay } from 'date-fns';\nimport ZnCn from 'date-fns/locale/zh_cn';\nimport React from 'react';\nimport Loading from '../../../components/Loading';\nimport { FlexContent } from '../../../lib/commonCss';\nimport { yyyymmdd } from '../../../lib/date';\nimport AppointmentManagementComponents from '../components/AppointmentManagementComponents';\nimport TemplateModal from '../components/TemplateModal';\nimport { CancelStudentOperatorReservation, ChangeStudentOperatorReservationOperator, ChangeStudentOperatorReservationTime, CompleteStudentOperatorReservation, ConfirmStudentOperatorReservation, CreateUnplannedPathway, DeleteOperatorSlot, PublishOperatorSlot } from './MutationForModal';\nimport { GetOperatorSlotById } from './QueryGetOperatorSlotsById';\nimport { getOperatorSlotsByReservationStatus } from './QueryGetOperatorSlotsByReservationStatus';\nimport QueryGetOperatorSlotsByTime, { getOperatorSlotsByTime } from './QueryGetOperatorSlotsByTime';\nvar dataType = 'dddd MM月DD日';\n\nvar AppointmentManagementContainers =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AppointmentManagementContainers, _React$Component);\n\n  function AppointmentManagementContainers() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AppointmentManagementContainers);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AppointmentManagementContainers)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"firstLoad\", true);\n\n    _defineProperty(_assertThisInitialized(_this), \"slotsDataArr\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"cancelAndReassignDate\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"variables\", {\n      input: {\n        endTime: _this.props.lastDate && _this.props.lastDate.toISOString(),\n        startTime: _this.props.firstDate && _this.props.firstDate.toISOString()\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      action: '',\n      allDateLength: 0,\n      confirmedId: '',\n      end: null,\n      fistTime: false,\n      item: null,\n      loading: false,\n      modalVisible: false,\n      slotsDataArr: [],\n      start: null,\n      todayDate: '',\n      type: '',\n      dateArr: _this.props.dateArr,\n      unAcceptedDataLoading: true,\n      unAcceptedLength: 0,\n      weekDateLength: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      _this.props.onRef(_assertThisInitialized(_this));\n\n      _this.refetchDate('week', _this.variables.input);\n\n      var AllEnum = JSON.parse(localStorage.getItem('zhiwen_all_enum'));\n\n      if (!AllEnum) {\n        _message.error('没有从本地获取到待接受的ID');\n\n        return;\n      }\n\n      var recordStatus = AllEnum.listRecordStatusEnum;\n      recordStatus.map(function (item) {\n        if (item.name === '未确认') {\n          _this.setState({\n            confirmedId: item.id\n          });\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"filterDateData\", function (arr) {\n      var newArr = [];\n      arr.forEach(function (item) {\n        var week = format(item.appointmentTime, dataType, {\n          locale: ZnCn\n        });\n\n        if (newArr.length) {\n          var index = newArr.findIndex(function (m) {\n            return m.week === week;\n          });\n\n          if (index < 0) {\n            newArr.push({\n              date: item.appointmentTime,\n              week: week\n            });\n          }\n        } else {\n          newArr.push({\n            date: item.appointmentTime,\n            week: week\n          });\n        }\n      });\n\n      _this.setState({\n        dateArr: newArr\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"modalMutation\", function (mutations, type) {\n      var mutates = {\n        CancelStudentOperatorReservation: CancelStudentOperatorReservation,\n        ChangeStudentOperatorReservationOperator: ChangeStudentOperatorReservationOperator,\n        ChangeStudentOperatorReservationTime: ChangeStudentOperatorReservationTime,\n        CompleteStudentOperatorReservation: CompleteStudentOperatorReservation,\n        ConfirmStudentOperatorReservation: ConfirmStudentOperatorReservation,\n        DeleteOperatorSlot: DeleteOperatorSlot,\n        PublishOperatorSlot: PublishOperatorSlot,\n        CreateUnplannedPathway: CreateUnplannedPathway\n      };\n      return _this.client.mutate({\n        mutation: mutates[mutations],\n        variables: {\n          input: type\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getUnAcceptedData\", function () {\n      _this.setState({\n        unAcceptedDataLoading: false\n      });\n\n      _this.client.query({\n        fetchPolicy: 'network-only',\n        query: getOperatorSlotsByReservationStatus,\n        variables: {\n          input: {\n            reservationStatusId: _this.state.confirmedId\n          }\n        }\n      }).then(function (result) {\n        var data = result.data.getOperatorSlotsByReservationStatus;\n\n        _this.filterDateData(data);\n\n        _this.slotsDataArr = data;\n\n        _this.setState({\n          todayDate: yyyymmdd(new Date()),\n          type: 'unAccepted',\n          unAcceptedDataLoading: true,\n          unAcceptedLength: data.length\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"refetchDate\", function (type, input) {\n      _this.variables.input.endTime = input.endTime;\n      _this.variables.input.startTime = input.startTime;\n\n      if (type === 'all') {\n        _this.refetch().then(function (result) {\n          _this.filterDateData(result.data.getOperatorSlotsByTime);\n\n          _this.slotsDataArr = result.data.getOperatorSlotsByTime;\n          setTimeout(function () {\n            _this.setState({\n              allDateLength: result.data.getOperatorSlotsByTime.length,\n              type: type,\n              todayDate: yyyymmdd(new Date())\n            });\n          }, 500);\n        });\n\n        return;\n      }\n\n      _this.refetch().then(function (result) {\n        if (result.data && result.data.getOperatorSlotsByTime) {\n          if (!_this.state.fistTime) {\n            _this.slotsDataArr = result.data.getOperatorSlotsByTime;\n\n            _this.setState({\n              type: type,\n              weekDateLength: result.data.getOperatorSlotsByTime.length\n            });\n          }\n\n          if (type === 'today') {\n            _this.slotsDataArr = result.data.getOperatorSlotsByTime;\n\n            _this.setState({\n              type: type,\n              todayDate: yyyymmdd(new Date()),\n              weekDateLength: result.data.getOperatorSlotsByTime.length\n            });\n          }\n\n          if (type === 'week') {\n            _this.slotsDataArr = result.data.getOperatorSlotsByTime;\n\n            _this.setState({\n              type: type,\n              todayDate: yyyymmdd(new Date())\n            });\n          }\n\n          _this.setState({\n            fistTime: true\n          });\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"UpdateAfterCloseModal\", function () {\n      var type = _this.state.type;\n      var _this$variables$input = _this.variables.input,\n          startTime = _this$variables$input.startTime,\n          endTime = _this$variables$input.endTime;\n\n      if (type !== 'unAccepted') {\n        _this.refetchDate(type, {\n          startTime: startTime,\n          endTime: endTime\n        });\n\n        return;\n      }\n\n      _this.getUnAcceptedData();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getCancelAndReassignDate\", function (str) {\n      var setArr = new _Set([].concat(_toConsumableArray(_this.cancelAndReassignDate), [str]));\n      _this.cancelAndReassignDate = _toConsumableArray(setArr);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setAction\", function (data) {\n      var status = data.status; // 已公开 - 可预约\n\n      if (status.name === '空闲') {\n        return 'publiclyAvailable';\n      } // 未公开\n\n\n      if (status.name === '未公开') {\n        return 'publiclyUnavailable';\n      } // 已失效      -------------\n\n\n      if (status.name === '已失效') {\n        if (data.reservation !== null) {\n          return 'expired';\n        }\n\n        return 'expiredNoReservation';\n      }\n\n      if (status.name === '已预约') {\n        var nextStatus = data.reservation.status.name;\n        var _data$reservation = data.reservation,\n            isOverdue = _data$reservation.isOverdue,\n            isDelegated = _data$reservation.isDelegated,\n            isRescheduled = _data$reservation.isRescheduled; // 当全部都为第四层条件全 false\n\n        if (!isOverdue && !isDelegated && !isRescheduled) {\n          // 学员已预约 - 待接受\n          if (nextStatus === '未确认') {\n            return 'appointedUnAccepted';\n          } // 已接受 - 带履约\n\n\n          if (nextStatus === '待履约') {\n            return 'acceptedUnPerformance';\n          }\n\n          if (nextStatus === '已完成') {\n            return 'performanceFormulate';\n          }\n        } // 更改预约时间\n\n\n        if (!isOverdue && !isDelegated && isRescheduled) {\n          // 已接受并变更预约时间 - 待学员确认\n          if (nextStatus === '变更待确认') {\n            return 'acceptedChange';\n          } // 学员已确认服务时间变更 - 待履约\n\n\n          if (nextStatus === '待履约') {\n            return 'timeChangeUnPerformance';\n          } //  已履约\n\n\n          if (nextStatus === '已完成') {\n            return 'performanceFormulate';\n          }\n        } // 转派情况\n\n\n        if (!isOverdue && isDelegated && !isRescheduled) {\n          // 其他Am 转派过来的学员点击接受后 -> 已接受 - 带履约\n          if (nextStatus === '待履约') {\n            return 'acceptedUnPerformance';\n          } //  已履约\n\n\n          if (nextStatus === '已完成') {\n            return 'performanceFormulate';\n          } // 其他Am 转派过来的学员 未做任何操作时 学员已预约 - 待接受 (改派任务）\n\n\n          return 'availableUnAccepted';\n        } // 其他Am 转派过来的学员 并且 变更预约时间\n\n\n        if (!isOverdue && isDelegated && isRescheduled) {\n          // 已接受并变更预约时间 - 待学员确认\n          if (nextStatus === '变更待确认') {\n            return 'acceptedChange';\n          } // 学员已确认服务时间变更 - 待履约\n\n\n          if (nextStatus === '待履约') {\n            return 'timeChangeUnPerformance';\n          } //  已履约\n\n\n          if (nextStatus === '已完成') {\n            return 'performanceFormulate';\n          }\n        } // 超时未接受\n\n\n        if (isOverdue && !isDelegated && !isRescheduled) {\n          // 超时后卡片点击接受后\n          if (nextStatus === '待履约') {\n            return 'acceptedUnPerformance';\n          } // 超时未接受\n\n\n          if (nextStatus === '未确认') {\n            return 'timeOut';\n          }\n        } // 超时 + 变更预约时间\n\n\n        if (isOverdue && !isDelegated && isRescheduled) {\n          // 已接受并变更预约时间 - 待学员确认\n          if (nextStatus === '变更待确认') {\n            return 'acceptedChange';\n          } // 学员已确认服务时间变更 - 待履约\n\n\n          if (nextStatus === '待履约') {\n            return 'timeChangeUnPerformance';\n          } //  已履约\n\n\n          if (nextStatus === '已完成') {\n            return 'performanceFormulate';\n          }\n        } // 超时 + 转派\n\n\n        if (isOverdue && isDelegated && !isRescheduled) {\n          // 其他Am 转派过来的学员点击接受后 -> 已接受 - 带履约\n          if (nextStatus === '待履约') {\n            return 'acceptedUnPerformance';\n          } //  已履约\n\n\n          if (nextStatus === '已完成') {\n            return 'performanceFormulate';\n          } // 其他Am 转派过来的学员 未做任何操作时 学员已预约 - 待接受 (改派任务）\n\n\n          return 'availableUnAccepted';\n        }\n      } // 已释放\n\n\n      if (status.key === 'RELEASED' && data.reservation && data.reservation.status.name === '已取消') {\n        var _data$reservation2 = data.reservation,\n            _isOverdue = _data$reservation2.isOverdue,\n            _isDelegated = _data$reservation2.isDelegated,\n            _isRescheduled = _data$reservation2.isRescheduled,\n            delegateeName = _data$reservation2.delegateeName; // 已改派至其他AM  -----------\n\n        if (!_isOverdue && _isDelegated && !_isRescheduled && delegateeName) {\n          return 'reassign';\n        } // 已取消   ----------\n        // if (\n        //   (!isOverdue && !isRescheduled && !delegateeName) ||\n        //   (isOverdue && isDelegated && !isRescheduled)\n        // ) {\n        //   return 'cancel';\n        // }\n        // 学员已拒绝服务时间变更 - 已取消    ------------\n\n\n        if (!_isOverdue && _isRescheduled && !delegateeName) {\n          return 'refuseChange';\n        }\n\n        return 'cancel';\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderSlotsContents\", function (item, slotsData, renderSlotsContent) {\n      return slotsData.map(function (items) {\n        if (yyyymmdd(item.date) === yyyymmdd(items.appointmentTime)) {\n          var status = items.status;\n          var canCelAndReassignDate = format(items.appointmentTime, dataType, {\n            locale: ZnCn\n          }); // 已公开 - 可预约\n\n          if (status.name === '空闲') {\n            return renderSlotsContent(items, 'publiclyAvailable');\n          } // 未公开\n\n\n          if (status.name === '未公开') {\n            return renderSlotsContent(items, 'publiclyUnavailable');\n          } // 已失效      -------------\n\n\n          if (status.name === '已失效') {\n            if (items.reservation !== null) {\n              return renderSlotsContent(items, 'expired');\n            }\n\n            return renderSlotsContent(items, 'expiredNoReservation');\n          }\n\n          if (status.name === '已预约') {\n            var nextStatus = items.reservation.status.name;\n            var _items$reservation = items.reservation,\n                isOverdue = _items$reservation.isOverdue,\n                isDelegated = _items$reservation.isDelegated,\n                isRescheduled = _items$reservation.isRescheduled; // 当全部都为第四层条件全 false\n\n            if (!isOverdue && !isDelegated && !isRescheduled) {\n              // 学员已预约 - 待接受\n              if (nextStatus === '未确认') {\n                return renderSlotsContent(items, 'appointedUnAccepted');\n              } // 已接受 - 带履约\n\n\n              if (nextStatus === '待履约') {\n                return renderSlotsContent(items, 'acceptedUnPerformance');\n              } //  已履约\n\n\n              if (nextStatus === '已完成') {\n                return renderSlotsContent(items, 'performanceFormulate');\n              }\n            } // 更改预约时间\n\n\n            if (!isOverdue && !isDelegated && isRescheduled) {\n              // 已接受并变更预约时间 - 待学员确认\n              if (nextStatus === '变更待确认') {\n                return renderSlotsContent(items, 'acceptedChange');\n              } // 学员已确认服务时间变更 - 待履约\n\n\n              if (nextStatus === '待履约') {\n                return renderSlotsContent(items, 'timeChangeUnPerformance');\n              } //  已履约\n\n\n              if (nextStatus === '已完成') {\n                return renderSlotsContent(items, 'performanceFormulate');\n              }\n            } // 其他Am 转派过来的学员\n\n\n            if (!isOverdue && isDelegated && !isRescheduled) {\n              // 其他Am 转派过来的学员点击接受后 -> 已接受 - 带履约\n              if (nextStatus === '待履约') {\n                return renderSlotsContent(items, 'acceptedUnPerformance');\n              } //  已履约\n\n\n              if (nextStatus === '已完成') {\n                return renderSlotsContent(items, 'performanceFormulate');\n              } // 其他Am 转派过来的学员 未做任何操作时 学员已预约 - 待接受 (改派任务）\n\n\n              return renderSlotsContent(items, 'availableUnAccepted');\n            } // 其他Am 转派过来的学员 并且 变更预约时间\n\n\n            if (!isOverdue && isDelegated && isRescheduled) {\n              // 已接受并变更预约时间 - 待学员确认\n              if (nextStatus === '变更待确认') {\n                return renderSlotsContent(items, 'acceptedChange');\n              } // 学员已确认服务时间变更 - 待履约\n\n\n              if (nextStatus === '待履约') {\n                return renderSlotsContent(items, 'timeChangeUnPerformance');\n              } //  已履约\n\n\n              if (nextStatus === '已完成') {\n                return renderSlotsContent(items, 'performanceFormulate');\n              }\n            } // 超时\n\n\n            if (isOverdue && !isDelegated && !isRescheduled) {\n              // 超时未接受\n              if (nextStatus === '未确认') {\n                return renderSlotsContent(items, 'timeOut');\n              } // 超时后卡片点击接受后\n\n\n              if (nextStatus === '待履约') {\n                return renderSlotsContent(items, 'acceptedUnPerformance');\n              }\n            } // 超时 + 变更预约时间\n\n\n            if (isOverdue && !isDelegated && isRescheduled) {\n              // 已接受并变更预约时间 - 待学员确认\n              if (nextStatus === '变更待确认') {\n                return renderSlotsContent(items, 'acceptedChange');\n              } // 学员已确认服务时间变更 - 待履约\n\n\n              if (nextStatus === '待履约') {\n                return renderSlotsContent(items, 'timeChangeUnPerformance');\n              } //  已履约\n\n\n              if (nextStatus === '已完成') {\n                return renderSlotsContent(items, 'performanceFormulate');\n              }\n            } // 超时 + 转派\n\n\n            if (isOverdue && isDelegated && !isRescheduled) {\n              // 其他Am 转派过来的学员点击接受后 -> 已接受 - 带履约\n              if (nextStatus === '待履约') {\n                return renderSlotsContent(items, 'acceptedUnPerformance');\n              } //  已履约\n\n\n              if (nextStatus === '已完成') {\n                return renderSlotsContent(items, 'performanceFormulate');\n              } // 其他Am 转派过来的学员 未做任何操作时 学员已预约 - 待接受 (改派任务）\n\n\n              return renderSlotsContent(items, 'availableUnAccepted');\n            }\n          } // 已释放\n\n\n          if (status.key === 'RELEASED' && items.reservation && items.reservation.status.name === '已取消') {\n            _this.getCancelAndReassignDate(canCelAndReassignDate);\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderHideSlots\", function (item, slotsData, renderSlotsContent) {\n      return slotsData.map(function (items) {\n        if (yyyymmdd(item.date) === yyyymmdd(items.appointmentTime)) {\n          var status = items.status; // 已释放\n\n          if (status.key === 'RELEASED' && items.reservation && items.reservation.status.name === '已取消') {\n            var _items$reservation2 = items.reservation,\n                isOverdue = _items$reservation2.isOverdue,\n                isDelegated = _items$reservation2.isDelegated,\n                isRescheduled = _items$reservation2.isRescheduled,\n                delegateeName = _items$reservation2.delegateeName; // 已改派至其他AM  -----------\n\n            if (!isOverdue && isDelegated && !isRescheduled && delegateeName) {\n              return renderSlotsContent(items, 'reassign');\n            } // 已取消   ----------\n            // 转派+ 超时\n\n\n            if (!isOverdue && !isRescheduled && !delegateeName || isOverdue && isDelegated && !isRescheduled || isOverdue && !isDelegated && !isRescheduled) {\n              return renderSlotsContent(items, 'cancel');\n            } // 学员已拒绝服务时间变更 - 已取消    ------------\n\n\n            if (!isOverdue && isRescheduled && !delegateeName) {\n              return renderSlotsContent(items, 'refuseChange');\n            }\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getSlotsDetails\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(id, action, modalVisible) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!id) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _this.setState({\n                  modalVisible: modalVisible\n                });\n\n                _this.client.query({\n                  query: GetOperatorSlotById,\n                  fetchPolicy: 'network-only',\n                  variables: {\n                    input: {\n                      id: id\n                    }\n                  }\n                }).then(function (result) {\n                  if (result.data.getOperatorSlotById) {\n                    _this.setState({\n                      action: _this.setAction(result.data.getOperatorSlotById),\n                      item: result.data.getOperatorSlotById\n                    });\n                  }\n                });\n\n                return _context.abrupt(\"return\");\n\n              case 4:\n                _this.setState({\n                  action: action,\n                  modalVisible: modalVisible\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"onCompleted\", function (data) {\n      if (data.getOperatorSlotsByTime.length) {\n        _this.firstLoad = false;\n        _this.slotsDataArr = data.getOperatorSlotsByTime;\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(AppointmentManagementContainers, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var firstDate = this.props.firstDate;\n\n      if (!isSameDay(firstDate, nextProps.firstDate)) {\n        this.setState({\n          dateArr: nextProps.dateArr,\n          type: nextProps.type\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          modalVisible = _this$state.modalVisible,\n          item = _this$state.item,\n          action = _this$state.action,\n          dateArr = _this$state.dateArr,\n          todayDate = _this$state.todayDate,\n          type = _this$state.type;\n      return React.createElement(FlexContent, null, React.createElement(QueryGetOperatorSlotsByTime, {\n        query: getOperatorSlotsByTime,\n        notifyOnNetworkStatusChange: true,\n        variables: this.variables,\n        onCompleted: this.onCompleted,\n        fetchPolicy: \"network-only\"\n      }, function (_ref2) {\n        var loading = _ref2.loading,\n            error = _ref2.error,\n            refetch = _ref2.refetch,\n            client = _ref2.client;\n        _this2.refetch = refetch;\n        _this2.client = client;\n\n        if (loading) {\n          return React.createElement(Loading, null);\n        }\n\n        if (error) {\n          return null;\n        }\n\n        return React.createElement(AppointmentManagementComponents, {\n          type: type,\n          slotsData: _this2.slotsDataArr,\n          cancelAndReassignDate: _this2.cancelAndReassignDate,\n          dateArr: dateArr,\n          renderSlotsContents: _this2.renderSlotsContents,\n          renderHideSlots: _this2.renderHideSlots,\n          getSlotsDetails: _this2.getSlotsDetails,\n          todayDate: todayDate\n        });\n      }), React.createElement(TemplateModal, {\n        modalVisible: modalVisible,\n        modalMutation: this.modalMutation,\n        UpdateAfterCloseModal: this.UpdateAfterCloseModal,\n        itemData: item // 点击后当前item 获取后的数据\n        ,\n        actionData: action,\n        getSlotsDetails: this.getSlotsDetails\n      }));\n    }\n  }]);\n\n  return AppointmentManagementContainers;\n}(React.Component);\n\nexport default AppointmentManagementContainers;","map":null,"metadata":{},"sourceType":"module"}