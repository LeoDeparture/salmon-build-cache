{"ast":null,"code":"import \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/cascader/style\";\nimport _Cascader from \"antd/lib/cascader\";\nimport \"antd/lib/spin/style\";\nimport _Spin from \"antd/lib/spin\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport { ContentP, FlexCenterColumn, FlexContent, FlexContentCenter, FlexDisplay, FlexDisplayBetween, TextContent } from '../../../lib/commonCss';\nimport QueryGetAvailableOperatorsByTime, { GetAvailableOperatorsByTime } from '../containers/QueryGetAvailableOperatorsByTime';\n\nvar optionsForAM = function optionsForAM(data) {\n  var optionsArr = [];\n  var noIndustry = [];\n  data.getAvailableOperatorsByTime.forEach(function (v) {\n    var id = v.id;\n    var name = v.account.person.nickname ? v.account.person.nickname : v.account.person.name; // 有职业类型，\n\n    if (v.types.length) {\n      v.types.forEach(function (e) {\n        // 数组中有数据\n        if (optionsArr.length) {\n          var index = optionsArr.findIndex(function (m) {\n            return m.label === e.name;\n          }); // 当前职位类型已存在数组中，push AM数据\n\n          if (index >= 0) {\n            optionsArr[index].children.push({\n              label: name,\n              value: id\n            });\n            return;\n          } // 当前职位类型不在数组中， 创建一个新的根数据\n\n\n          optionsArr.push({\n            children: [{\n              label: name,\n              value: id\n            }],\n            label: e.name,\n            value: e.name\n          });\n        } else {\n          // 数组中无数据\n          optionsArr.push({\n            children: [{\n              label: name,\n              value: id\n            }],\n            label: e.name,\n            value: e.name\n          });\n        }\n      });\n      return;\n    } // 无职业类型\n    // 数组中有数据时\n\n\n    if (noIndustry.length) {\n      noIndustry[0].children.push({\n        label: name,\n        value: id\n      });\n    } else {\n      noIndustry.push({\n        children: [{\n          label: name,\n          value: id\n        }],\n        label: '未关联行业',\n        value: '未关联行业'\n      });\n    }\n  });\n  return [].concat(optionsArr, noIndustry);\n};\n\nvar ModalReassign =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ModalReassign, _React$Component);\n\n  function ModalReassign() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ModalReassign);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ModalReassign)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      amName: '',\n      delegationMessage: '',\n      targetOperatorId: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (value, selectedOptions) {\n      var delegationMessage = _this.state.delegationMessage;\n      var getModalOperateData = _this.props.getModalOperateData;\n\n      if (selectedOptions.length) {\n        _this.setState({\n          amName: selectedOptions[1].label,\n          targetOperatorId: value[1]\n        });\n\n        getModalOperateData({\n          targetOperatorId: value[0],\n          delegationMessage: delegationMessage,\n          amName: selectedOptions[1].label,\n          disableBut: delegationMessage === ''\n        });\n        return;\n      }\n\n      _this.setState({\n        targetOperatorId: null\n      });\n\n      getModalOperateData({\n        targetOperatorId: null,\n        disableBut: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeInput\", function (e) {\n      var _this$state = _this.state,\n          targetOperatorId = _this$state.targetOperatorId,\n          amName = _this$state.amName;\n      var value = e.target.value;\n      var disabled = value !== '' && Boolean(targetOperatorId);\n\n      _this.setState({\n        delegationMessage: value\n      });\n\n      _this.props.getModalOperateData({\n        targetOperatorId: targetOperatorId,\n        delegationMessage: value,\n        amName: amName,\n        disableBut: !disabled\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ModalReassign, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getModalOperateData({\n        targetOperatorId: null,\n        disableBut: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var variables = {\n        input: {\n          appointmentTime: this.props.time\n        }\n      };\n      return React.createElement(QueryGetAvailableOperatorsByTime, {\n        query: GetAvailableOperatorsByTime,\n        fetchPolicy: \"network-only\",\n        variables: variables\n      }, function (_ref) {\n        var loading = _ref.loading,\n            error = _ref.error,\n            data = _ref.data;\n\n        if (loading) {\n          return React.createElement(FlexContentCenter, {\n            style: {\n              height: 200\n            }\n          }, React.createElement(_Spin, null));\n        }\n\n        if (error) {\n          return null;\n        }\n\n        var optionsData = optionsForAM(data);\n        return React.createElement(FlexCenterColumn, {\n          style: {\n            minHeight: '210px',\n            justifyContent: 'space-between'\n          }\n        }, React.createElement(FlexDisplay, {\n          style: {\n            flexDirection: 'column'\n          }\n        }, React.createElement(FlexDisplayBetween, null, React.createElement(FlexDisplay, null, React.createElement(\"span\", {\n          style: {\n            color: 'red'\n          }\n        }, \"*\"), React.createElement(ContentP, {\n          style: {\n            margin: 0\n          }\n        }, \"\\u6539\\u6D3E\\u81F3\")), React.createElement(TextContent, {\n          color: \"#bfbfbf\",\n          fontSize: \"12px\",\n          style: {\n            alignSelf: 'center'\n          }\n        }, \"\\u53EA\\u53EF\\u6539\\u6D3E\\u81F3\\u5F53\\u524D\\u9884\\u7EA6\\u65F6\\u6BB5\\u5185\\u6709\\u7A7A\\u95F2\\u7684\\u5DE5\\u4F5C\\u4F19\\u4F34\")), React.createElement(_Cascader, {\n          style: {\n            width: '100%'\n          },\n          options: optionsData,\n          onChange: _this2.onChange // notFoundContent=\"未找到已关联行业的工作伙伴\"\n          ,\n          placeholder: optionsData.length ? '请选择工作伙伴' : '未找到合适的工作伙伴'\n        }), React.createElement(FlexContent, {\n          style: {\n            marginTop: 24\n          }\n        }, React.createElement(\"span\", {\n          style: {\n            color: 'red'\n          }\n        }, \"*\"), React.createElement(ContentP, {\n          style: {\n            margin: 0\n          }\n        }, \"\\u6539\\u6D3E\\u7406\\u7531\")), React.createElement(_Input.TextArea, {\n          rows: 2,\n          onChange: _this2.onChangeInput,\n          placeholder: \"\\u8BF7\\u586B\\u5199\\u6539\\u6D3E\\u7406\\u7531\"\n        })));\n      });\n    }\n  }]);\n\n  return ModalReassign;\n}(React.Component);\n\nexport default ModalReassign;","map":null,"metadata":{},"sourceType":"module"}