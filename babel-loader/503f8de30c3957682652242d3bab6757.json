{"ast":null,"code":"import \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport compareVersions from 'compare-versions';\nimport gql from 'graphql-tag';\nimport getConfig from 'next/config';\nimport React from 'react';\nimport { QueryGetCountries } from '../../../common/queries/QueryGetCountries';\nimport { QueryListAllEnum } from '../../../common/queries/QueryListAllEnum';\nimport { QueryListCountries } from '../../../common/queries/QueryListCountries';\nimport { QueryProvinces } from '../../../common/queries/QueryListProvinces';\nimport MisViewer, { QueryMisViewer } from '../../../common/queries/QueryMisViewer';\nimport LayoutComponent from '../components/LayoutComponent';\nimport { GetNIMAuthInfo } from './GetNIMAuthInfoMutation';\n\nvar _getConfig = getConfig(),\n    publicRuntimeConfig = _getConfig.publicRuntimeConfig;\n\nvar networkOnly = 'network-only'; // MIS 版本号\n\nvar version = '1.1.2';\n\nvar LayoutContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LayoutContainer, _React$Component);\n\n  function LayoutContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LayoutContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LayoutContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var oldVersion;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // 比较版本号\n              oldVersion = localStorage.getItem('zhiwen_mis_version'); // 若缓存中无版本号, 或当前版本较新, 刷新静态数据缓存\n\n              if (!oldVersion || compareVersions(version, oldVersion) > 0) {\n                _this.getCountries();\n\n                _this.getAllEnum();\n\n                _this.getProvinceAndCity(); // this.getForeignCountries();\n\n\n                localStorage.setItem('zhiwen_mis_version', version);\n              } else {\n                _this.init();\n              }\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"init\", function () {\n      if (!localStorage.getItem('zhiwen_china_country_data') || !localStorage.getItem('zhiwen_all_country')) {\n        _this.getCountries();\n      }\n\n      if (!localStorage.getItem('zhiwen_all_enum')) {\n        _this.getAllEnum();\n      }\n\n      if (!localStorage.getItem('zhiwen_province_city')) {\n        _this.getProvinceAndCity();\n      } // if (!localStorage.getItem('zhiwen_foreign_country_city')) {\n      //   this.getForeignCountries();\n      // }\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getCountries\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var result, countries, foreignCountries;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _this.client.query({\n                query: QueryGetCountries,\n                variables: {\n                  input: {}\n                },\n                fetchPolicy: networkOnly\n              });\n\n            case 2:\n              result = _context2.sent;\n              countries = result.data.getCountries.countries; // 保存国外国家\n\n              foreignCountries = countries.filter(function (country) {\n                var id = country.id,\n                    name = country.name;\n\n                if (name === '中国') {\n                  localStorage.setItem('zhiwen_china_id', id);\n                  localStorage.setItem('zhiwen_china_country_data', _JSON$stringify(country));\n                }\n\n                return !['中国', '香港', '澳门', '台湾省'].includes(name);\n              });\n              localStorage.setItem('zhiwen_foreign_country', _JSON$stringify(foreignCountries)); // 保存所有国家\n\n              localStorage.setItem('zhiwen_all_country', _JSON$stringify(countries));\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"getForeignCountries\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var result, countries;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _this.client.query({\n                query: QueryListCountries,\n                variables: {},\n                fetchPolicy: networkOnly\n              });\n\n            case 2:\n              result = _context3.sent;\n              countries = result.data.countries;\n              return _context3.abrupt(\"return\", countries);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"getAllEnum\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _this.client.query({\n                query: QueryListAllEnum,\n                fetchPolicy: networkOnly\n              });\n\n            case 2:\n              result = _context4.sent;\n              localStorage.setItem('zhiwen_all_enum', _JSON$stringify(result.data.listAllEnum));\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"getProvinceAndCity\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5() {\n      var provincesData, provinces, queryStr, result, provinceAndCityList;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _this.client.query({\n                query: QueryProvinces,\n                variables: {\n                  input: {}\n                },\n                fetchPolicy: networkOnly\n              });\n\n            case 2:\n              provincesData = _context5.sent;\n              provinces = provincesData.data.getProvinces.provinces; // 使用省份 id 拼接 query 语句\n\n              queryStr = '';\n              provinces.forEach(function (v) {\n                var id = v.id;\n                queryStr = queryStr.concat(\"\".concat(id, \": getCities(data: { provinceId: \\\"\").concat(id, \"\\\" }) {\\n                cities {\\n                  id\\n                  name\\n                }\\n              }\"));\n              });\n              queryStr = '{' + queryStr + '}'; // 执行请求\n\n              _context5.next = 9;\n              return _this.client.query({\n                query: gql(queryStr)\n              });\n\n            case 9:\n              result = _context5.sent;\n              provinceAndCityList = provinces.map(function (v) {\n                var id = v.id,\n                    name = v.name;\n                var province = result.data[id];\n                return {\n                  id: id,\n                  name: name,\n                  children: province.cities\n                };\n              });\n              localStorage.setItem('zhiwen_province_city', _JSON$stringify(provinceAndCityList));\n\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"getNIM\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6() {\n      var getNIMAuthInfoResult;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _message.loading('正在获取数据...', 0);\n\n              _this.clearCookie('uid');\n\n              _this.clearCookie('sdktoken');\n\n              _context6.prev = 3;\n              _context6.next = 6;\n              return _this.postNIM();\n\n            case 6:\n              getNIMAuthInfoResult = _context6.sent;\n\n              if (getNIMAuthInfoResult.data && getNIMAuthInfoResult.data.getNIMAuthInfo) {\n                _this.setCookie('uid', getNIMAuthInfoResult.data.getNIMAuthInfo.accid);\n\n                _this.setCookie('sdktoken', getNIMAuthInfoResult.data.getNIMAuthInfo.token);\n\n                _message.destroy();\n\n                window.open(\"\".concat(publicRuntimeConfig.clientUrl, \"/im/main.html\"), 'newWindow', 'channelmode=yes');\n              }\n\n              _context6.next = 14;\n              break;\n\n            case 10:\n              _context6.prev = 10;\n              _context6.t0 = _context6[\"catch\"](3);\n\n              _message.destroy();\n\n              _message.error('操作失败，请稍后重试。', 1.5);\n\n            case 14:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[3, 10]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"setCookie\", function (name, value) {\n      var Days = 30;\n      var exp = new Date();\n      exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);\n      document.cookie = name + '=' + escape(value) + ';expires=' + exp.toUTCString();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearCookie\", function (name) {\n      document.cookie = name + '=0;expires=' + new Date(0).toUTCString();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"postNIM\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7() {\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", _this.client.mutate({\n                mutation: GetNIMAuthInfo\n              }));\n\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    })));\n\n    return _this;\n  }\n\n  _createClass(LayoutContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          children = _this$props.children,\n          menuName = _this$props.menuName,\n          subMenuName = _this$props.subMenuName;\n      return React.createElement(MisViewer, {\n        query: QueryMisViewer,\n        fetchPolicy: \"network-only\"\n      }, function (_ref8) {\n        var data = _ref8.data,\n            error = _ref8.error,\n            loading = _ref8.loading,\n            client = _ref8.client;\n        _this2.client = client;\n\n        if (loading || error || !data || !data.misViewer) {\n          return null;\n        } // 保存当前用户 id\n\n\n        localStorage.setItem('zhiwen_person_id', data.misViewer.person.id);\n        localStorage.setItem('misViewer', _JSON$stringify(data.misViewer));\n        return React.createElement(LayoutComponent, {\n          misViewer: data.misViewer,\n          children: children,\n          menuName: menuName,\n          subMenuName: subMenuName,\n          getNIM: _this2.getNIM,\n          setCookie: _this2.setCookie,\n          clearCookie: _this2.clearCookie,\n          postNIM: _this2.postNIM,\n          version: version\n        });\n      });\n    }\n  }]);\n\n  return LayoutContainer;\n}(React.Component);\n\nexport default LayoutContainer;","map":null,"metadata":{},"sourceType":"module"}