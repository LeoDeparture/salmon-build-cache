{"ast":null,"code":"import \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport Router from 'next/router';\nimport React from 'react';\nimport Loading from '../../../components/Loading';\nimport TutorDetailsComponents from '../components/TutorDetailsComponents';\nimport { createCompetitionExperience, deleteCompetitionExperience, updateCompetitionExperience } from './MutationCompetitionExperience';\nimport { createEducationExperienceForTutor, deleteEducationExperience, updateEducationExperience } from './MutationEdication';\nimport { mutationUpdateTutor } from './MutationUpdateTutor';\nimport { createWorkExperienceForTutor, deleteWorkExperience, updateWorkExperience } from './MutationWorkExperience';\nimport { listSchools } from './QueryListSchools';\nimport GetTutorByIdQuery, { getTutorById } from './QueryTutorById';\nvar Option = _Select.Option;\nexport var filterData = function filterData(arr, items) {\n  return arr.map(function (item) {\n    return item[items];\n  });\n};\nexport var renderOption = function renderOption(arr) {\n  return arr.map(function (item) {\n    return React.createElement(Option, {\n      key: item.id,\n      value: item.id\n    }, item.name);\n  });\n};\n\nvar TutorDetailsContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TutorDetailsContainer, _React$Component);\n\n  function TutorDetailsContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TutorDetailsContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TutorDetailsContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      id: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"variables\", {\n      input: {\n        id: Router.router.query.id\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var routerData = Router.router.query;\n\n      _this.setState({\n        id: routerData.id\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"queryListSchools\", function (value) {\n      var variables = {\n        input: {\n          first: 30,\n          where: {\n            OR: [{\n              name_contains: value\n            }, {\n              pinyinFull_contains: value\n            }, {\n              pinyinPrefix_contains: value\n            }]\n          }\n        }\n      };\n      return _this.client.query({\n        query: listSchools,\n        variables: variables\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mutationUpdateTutor\", function (value, type) {\n      var variables = {\n        input: _objectSpread({}, value, {\n          id: _this.state.id\n        })\n      };\n\n      var filterFun = function filterFun(data) {\n        return data;\n      };\n\n      return _this.mutations(mutationUpdateTutor, variables, filterFun, type);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mutationCreateEducationExperienceForTutor\", function (value) {\n      var variables = {\n        input: _objectSpread({}, value, {\n          id: _this.state.id\n        })\n      };\n\n      var filterFun = function filterFun(data, result2) {\n        data.getTutorById.educationExperiences = [_objectSpread({}, result2.data.createEducationExperienceForTutor)].concat(_toConsumableArray(data.getTutorById.educationExperiences));\n        return data;\n      };\n\n      return _this.mutations(createEducationExperienceForTutor, variables, filterFun);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deleteEducationExperience\", function (value) {\n      var variables = {\n        input: {\n          id: value\n        }\n      };\n\n      var filterFun = function filterFun(data, result2) {\n        data.getTutorById.educationExperiences.map(function (item, index) {\n          if (item.id === result2.data.deleteEducationExperience.id) {\n            data.getTutorById.educationExperiences.splice(index, 1);\n          }\n        });\n        return data;\n      };\n\n      return _this.mutations(deleteEducationExperience, variables, filterFun, 'delete');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mutationUpdateEducationExperience\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(value) {\n        var variables, filterFun;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                variables = {\n                  input: _objectSpread({}, value)\n                };\n\n                filterFun = function filterFun(data) {\n                  return data;\n                };\n\n                return _context.abrupt(\"return\", _this.mutations(updateEducationExperience, variables, filterFun));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"mutationCreateWorkExperienceForTutor\", function (value) {\n      var variables = {\n        input: _objectSpread({}, value, {\n          id: _this.state.id\n        })\n      };\n\n      var filterFun = function filterFun(data, result2) {\n        data.getTutorById.workExperiences = [_objectSpread({}, result2.data.createWorkExperienceForTutor)].concat(_toConsumableArray(data.getTutorById.workExperiences));\n        return data;\n      };\n\n      return _this.mutations(createWorkExperienceForTutor, variables, filterFun);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mutationUpdateWorkExperience\", function (value) {\n      var variables = {\n        input: _objectSpread({}, value)\n      };\n\n      var filterFun = function filterFun(data) {\n        return data;\n      };\n\n      return _this.mutations(updateWorkExperience, variables, filterFun);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mutationDeleteWorkExperience\", function (value) {\n      var variables = {\n        input: {\n          id: value\n        }\n      };\n\n      var filterFun = function filterFun(data, result2) {\n        data.getTutorById.workExperiences.map(function (item, index) {\n          if (item.id === result2.data.deleteWorkExperience.id) {\n            data.getTutorById.workExperiences.splice(index, 1);\n          }\n        });\n        return data;\n      };\n\n      return _this.mutations(deleteWorkExperience, variables, filterFun, 'delete');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createCompetitionEx\", function (value) {\n      var variables = {\n        input: _objectSpread({}, value, {\n          id: _this.state.id\n        })\n      };\n\n      var filterFun = function filterFun(data, result2) {\n        data.getTutorById.competitionExperiences.push(result2.data.createCompetitionExperience);\n        return data;\n      };\n\n      return _this.mutations(createCompetitionExperience, variables, filterFun);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateCompetitionEx\", function (value) {\n      var variables = {\n        input: _objectSpread({}, value)\n      };\n\n      var filterFun = function filterFun(data) {\n        return data;\n      };\n\n      return _this.mutations(updateCompetitionExperience, variables, filterFun);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deleteCompetitionEx\", function (value) {\n      var variables = {\n        input: {\n          id: value\n        }\n      };\n\n      var filterFun = function filterFun(data, result2) {\n        data.getTutorById.competitionExperiences.map(function (item, index) {\n          if (item.id === result2.data.deleteCompetitionExperience.id) {\n            data.getTutorById.competitionExperiences.splice(index, 1);\n          }\n        });\n        return data;\n      };\n\n      return _this.mutations(deleteCompetitionExperience, variables, filterFun, 'delete');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mutations\", function (mutationName, variables, filterFun) {\n      var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'save';\n      return _this.client.mutate({\n        mutation: mutationName,\n        update: function update(proxy, result2) {\n          var data = proxy.readQuery({\n            query: getTutorById,\n            variables: _this.variables\n          });\n          var data2 = filterFun(data, result2);\n          proxy.writeQuery({\n            data: data2,\n            query: getTutorById,\n            variables: _this.variables\n          });\n        },\n        variables: variables\n      }).then(function (result) {\n        if (result.data) {\n          _this.refetch(_this.variables);\n\n          if (type === 'save') {\n            _message.success('保存成功');\n          }\n\n          if (type === 'delete') {\n            _message.success('删除成功');\n          }\n        }\n\n        return true;\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(TutorDetailsContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(GetTutorByIdQuery, {\n        query: getTutorById,\n        variables: this.variables\n      }, function (_ref2) {\n        var data = _ref2.data,\n            loading = _ref2.loading,\n            error = _ref2.error,\n            client = _ref2.client,\n            refetch = _ref2.refetch;\n        _this2.client = client;\n        _this2.refetch = refetch;\n\n        if (loading) {\n          return React.createElement(Loading, null);\n        }\n\n        if (error) {\n          return null;\n        }\n\n        if (data.getTutorById) {\n          return React.createElement(TutorDetailsComponents, {\n            tutorData: data.getTutorById,\n            queryListSchools: _this2.queryListSchools,\n            mutationUpdateTutor: _this2.mutationUpdateTutor,\n            mutationCreateEducate: _this2.mutationCreateEducationExperienceForTutor,\n            mutationUpdateEducate: _this2.mutationUpdateEducationExperience,\n            deleteEducate: _this2.deleteEducationExperience,\n            mutationCreateWork: _this2.mutationCreateWorkExperienceForTutor,\n            createCompetitionEx: _this2.createCompetitionEx,\n            updateCompetitionEx: _this2.updateCompetitionEx,\n            deleteCompetitionEx: _this2.deleteCompetitionEx,\n            mutationUpdateWork: _this2.mutationUpdateWorkExperience,\n            mutationDeleteWork: _this2.mutationDeleteWorkExperience\n          });\n        }\n\n        return null;\n      });\n    }\n  }]);\n\n  return TutorDetailsContainer;\n}(React.Component);\n\nexport default TutorDetailsContainer;","map":null,"metadata":{},"sourceType":"module"}