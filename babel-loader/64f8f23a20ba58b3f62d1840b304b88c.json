{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport ConfigureInfo from '../components/ConfigureInfo';\nimport Loading from '../../../../components/Loading';\nimport { HiddenWrapper } from '../CSSComponent';\nimport { TableFooter } from '../../../../components/Table';\nimport ListStudentsQuery, { query } from './ListStudentsQuery';\nvar ItemsPerPage = 20;\n\nvar ConfigureInfoContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ConfigureInfoContainer, _Component);\n\n  function ConfigureInfoContainer(props) {\n    var _this;\n\n    _classCallCheck(this, ConfigureInfoContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConfigureInfoContainer).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"changeInput\", function (value) {\n      _this.variables.input.where = {\n        OR: [{\n          studentNo_contains: value\n        }, {\n          account: {\n            person: {\n              phoneNumber_contains: value\n            }\n          }\n        }, {\n          account: {\n            person: {\n              name_contains: value\n            }\n          }\n        }, {\n          account: {\n            person: {\n              nickname_contains: value\n            }\n          }\n        }, {\n          account: {\n            person: {\n              email_contains: value\n            }\n          }\n        }]\n      };\n\n      _this.refetch(_this.variables);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"footer\", function () {\n      return _this.state.pageInfo.hasNextPage && React.createElement(TableFooter, {\n        isLoading: _this.state.loading,\n        onClickLink: _this.queryMore\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"storePageInfo\", function (data) {\n      if (!data.accounts) return;\n      var pageInfo = data.accounts.pageInfo;\n\n      _this.setState({\n        pageInfo: pageInfo\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"queryMore\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$state, loading, pageInfo;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$state = _this.state, loading = _this$state.loading, pageInfo = _this$state.pageInfo;\n\n              if (!(loading || !pageInfo.hasNextPage)) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _this.setState({\n                loading: true\n              });\n\n              _context.next = 6;\n              return _this.fetchMore({\n                updateQuery: function updateQuery(prevData, _ref2) {\n                  var newData = _ref2.fetchMoreResult;\n\n                  if (!newData) {\n                    return prevData;\n                  }\n\n                  newData.accounts.edges = [].concat(_toConsumableArray(prevData.accounts.edges), _toConsumableArray(newData.accounts.edges));\n                  return newData;\n                },\n                variables: {\n                  input: _objectSpread({}, _this.variables.input, {\n                    after: pageInfo.endCursor,\n                    first: ItemsPerPage\n                  })\n                }\n              });\n\n            case 6:\n              _this.setState({\n                loading: false\n              }); // 记录翻页数据\n\n\n              _this.variables.input.first += ItemsPerPage;\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _this.state = {\n      loading: false,\n      pageInfo: undefined\n    };\n    _this.variables = {\n      input: {\n        where: {\n          OR: [{\n            studentNo_contains: ''\n          }, {\n            account: {\n              person: {\n                phoneNumber_contains: ''\n              }\n            }\n          }, {\n            account: {\n              person: {\n                name_contains: ''\n              }\n            }\n          }, {\n            account: {\n              person: {\n                nickname_contains: ''\n              }\n            }\n          }, {\n            account: {\n              person: {\n                email_contains: ''\n              }\n            }\n          }]\n        },\n        first: ItemsPerPage\n      }\n    };\n    return _this;\n  }\n\n  _createClass(ConfigureInfoContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(HiddenWrapper, {\n        style: !this.props.show ? {\n          display: 'none'\n        } : {}\n      }, React.createElement(ListStudentsQuery, {\n        query: query,\n        variables: this.variables,\n        onCompleted: this.storePageInfo,\n        fetchPolicy: \"network-only\"\n      }, function (_ref3) {\n        var data = _ref3.data,\n            loading = _ref3.loading,\n            error = _ref3.error,\n            client = _ref3.client,\n            refetch = _ref3.refetch,\n            fetchMore = _ref3.fetchMore;\n        _this2.client = client;\n        _this2.refetch = refetch;\n        _this2.fetchMore = fetchMore;\n\n        if (loading) {\n          return React.createElement(Loading, null);\n        }\n\n        if (error) {\n          return null;\n        }\n\n        var accounts = data.accounts.edges.map(function (v) {\n          return v.node;\n        });\n        return React.createElement(ConfigureInfo, {\n          goLastStep: _this2.props.goLastStep,\n          goNextStep: _this2.props.goNextStep,\n          changeInput: _this2.changeInput,\n          data: accounts,\n          changeCreateData: _this2.props.changeCreateData,\n          footer: _this2.footer\n        });\n      }));\n    }\n  }]);\n\n  return ConfigureInfoContainer;\n}(Component);\n\nexport { ConfigureInfoContainer as default };","map":null,"metadata":{},"sourceType":"module"}